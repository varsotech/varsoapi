user nginx;

events {
    worker_connections   1000;
}

http {
        client_max_body_size 15M;
        include    mime.types;

        # this is required to proxy Grafana Live WebSocket connections.
        # map $http_upgrade $connection_upgrade {
        #   default upgrade;
        #   '' close;
        # }

        # upstream grafana {
        #   server grafana:3000;
        # }

        # HTTP Server
        server {
              listen 80;
              listen [::]:80;

              server_name varso.org www.varso.org;
              server_tokens off;

              # LetsEncrypt certificate challenge
              location /.well-known/acme-challenge/ {
                root /var/www/certbot;
              }

              # Forward HTTP requests to our HTTPS server
              location / {
                return 301 https://$name.varso.org$request_uri;
              }
        }
        
        # HTTPS Server
        server {
              listen 443 default_server ssl http2;
              listen [::]:443 ssl http2;

              server_name varso.org www.varso.org;
              server_tokens off;

              ssl_certificate /etc/letsencrypt/live/varso.org/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/varso.org/privkey.pem;

              include /etc/nginx/options-ssl-nginx.conf;
              ssl_dhparam /etc/nginx/ssl-dhparams.pem;

              root /var/www/varso.org/html;

              location / {
                try_files $uri /index.html =404;
              }

              location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
                expires max;
                add_header Pragma public;
                add_header Cache-Control "public, must-revalidate, proxy-revalidate";
              }


              location /api/v1/auth {
                # Docker DNS
                resolver 127.0.0.11;

                # Using a var forces nginx to boot even if this service is down
                set $addr http://auth:5000;

                # Forward the authentication request to the Go application
                proxy_pass $addr;

                include cors.conf;
              }

              location /api/v1/app {
                # Docker DNS
                resolver 127.0.0.11;

                # Using a var forces nginx to boot even if this service is down
                set $addr http://app:5001;

                # Forward the authentication request to the Go application
                proxy_pass $addr;

                include cors.conf;
              }

              location /api/v1/fileserver { 
                # Docker DNS
                resolver 127.0.0.11;

                # Using a var forces nginx to boot even if this service is down
                set $addr http://fileserver:5002;

                # Forward the authentication request to the Go application
                proxy_pass $addr;

                include cors.conf;
              }

              location /discord {
                return 302 https://discord.gg/cKwaWk4nej;
              }
        }

        # Grafana
        server {
          listen 443 ssl http2;
          listen [::]:443 ssl http2;

          server_name grafana.varso.org;
          server_tokens off;

          # Docker DNS
          resolver 127.0.0.11;

          location / {
            proxy_set_header Host $http_host;

            # Using a var forces nginx to boot even if this service is down
            set $addr http://grafana:3000;

            # Forward the authentication request to the service
            proxy_pass $addr;
          }

          # Proxy Grafana Live WebSocket connections.
          # location /api/live/ {
          #   proxy_http_version 1.1;
          #   proxy_set_header Upgrade $http_upgrade;
          #   proxy_set_header Connection $connection_upgrade;
          #   proxy_set_header Host $http_host;
          #   proxy_pass http://grafana:3000;
          # }
        }
}
