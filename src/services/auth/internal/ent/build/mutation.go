



// Code generated by ent, DO NOT EDIT.



package build


import (
	"context"
	"fmt"
	"sync"
		 "github.com/varsotech/varsoapi/src/services/auth/internal/ent/build/user"
			"github.com/google/uuid"
	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate	= ent.OpCreate
	OpDelete	= ent.OpDelete
	OpDeleteOne	= ent.OpDeleteOne
	OpUpdate	= ent.OpUpdate
	OpUpdateOne	= ent.OpUpdateOne

	// Node types.
		TypeUser = "User"
)




// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op Op
	typ string
		id *int
		delete_time *time.Time
		ban_time *time.Time
		uuid *uuid.UUID
		email *string
		username *string
		password *string
		salt *string
		discord_user_id *string
		name *string
	clearedFields map[string]struct{}
	done bool
	oldValue func(context.Context) (*User, error)
	predicates []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)


// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config: c,
		op: op,
		typ: TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}


	
	// withUserID sets the ID field of the mutation.
	func withUserID(id int) userOption {
		return func(m *UserMutation) {
			var (
				err error
				once sync.Once
				value *User
			)
			m.oldValue = func(ctx context.Context) (*User, error) {
				once.Do(func() {
					if m.done {
						err = errors.New("querying old values post mutation is not allowed")
					} else {
						value, err = m.Client().User.Get(ctx, id)
					}
				})
				return value, err
			}
			m.id = &id
		}
	}

	
	// withUser sets the old User of the mutation.
	func withUser(node *User) userOption {
		return func(m *UserMutation) {
			m.oldValue = func(context.Context) (*User, error) {
				return node, nil
			}
			m.id = &node.ID
		}
	}


// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if 	_, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("build: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}


	

	// ID returns the ID value in the mutation. Note that the ID is only available
	// if it was provided to the builder or after it was returned from the database.
	func (m *UserMutation) ID() (id int, exists bool) {
		if m.id == nil {
			return
		}
		return *m.id, true
	}

	// IDs queries the database and returns the entity ids that match the mutation's predicate.
	// That means, if the mutation is applied within a transaction with an isolation level such
	// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
	// or updated by the mutation.
	func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
		switch {
		case m.op.Is(OpUpdateOne | OpDeleteOne):
			id, exists := m.ID()
			if exists {
				return []int{id}, nil
			}
			fallthrough
		case m.op.Is(OpUpdate | OpDelete):
			return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
		default:
			return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
		}
	}



	
	
	
	// SetDeleteTime sets the "delete_time" field.
	func (m *UserMutation) SetDeleteTime(t time.Time) {
		m.delete_time = &t
	}

	// DeleteTime returns the value of the "delete_time" field in the mutation.
	func (m *UserMutation) DeleteTime() (r time.Time, exists bool) {
		v := m.delete_time
		if v == nil {
			return
		}
		return *v, true
	}

	
		// OldDeleteTime returns the old "delete_time" field's value of the User entity.
		// If the User object wasn't provided to the builder, the object is fetched from the database.
		// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
		func (m *UserMutation) OldDeleteTime(ctx context.Context) (v time.Time, err error) {
			if !m.op.Is(OpUpdateOne) {
				return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
			}
			if m.id == nil || m.oldValue == nil {
				return v, errors.New("OldDeleteTime requires an ID field in the mutation")
			}
			oldValue, err := m.oldValue(ctx)
			if err != nil {
				return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
			}
			return oldValue.DeleteTime, nil
		}
	

	

	

	
		
		// ClearDeleteTime clears the value of the "delete_time" field.
		func (m *UserMutation) ClearDeleteTime() {
			m.delete_time = nil
			m.clearedFields[user.FieldDeleteTime] = struct{}{}
		}

		
		// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
		func (m *UserMutation) DeleteTimeCleared() bool {
			_, ok := m.clearedFields[user.FieldDeleteTime]
			return ok
		}
	

	
	// ResetDeleteTime resets all changes to the "delete_time" field.
	func (m *UserMutation) ResetDeleteTime() {
		m.delete_time = nil
			delete(m.clearedFields, user.FieldDeleteTime)
	}

	
	
	
	// SetBanTime sets the "ban_time" field.
	func (m *UserMutation) SetBanTime(t time.Time) {
		m.ban_time = &t
	}

	// BanTime returns the value of the "ban_time" field in the mutation.
	func (m *UserMutation) BanTime() (r time.Time, exists bool) {
		v := m.ban_time
		if v == nil {
			return
		}
		return *v, true
	}

	
		// OldBanTime returns the old "ban_time" field's value of the User entity.
		// If the User object wasn't provided to the builder, the object is fetched from the database.
		// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
		func (m *UserMutation) OldBanTime(ctx context.Context) (v time.Time, err error) {
			if !m.op.Is(OpUpdateOne) {
				return v, errors.New("OldBanTime is only allowed on UpdateOne operations")
			}
			if m.id == nil || m.oldValue == nil {
				return v, errors.New("OldBanTime requires an ID field in the mutation")
			}
			oldValue, err := m.oldValue(ctx)
			if err != nil {
				return v, fmt.Errorf("querying old value for OldBanTime: %w", err)
			}
			return oldValue.BanTime, nil
		}
	

	

	

	
		
		// ClearBanTime clears the value of the "ban_time" field.
		func (m *UserMutation) ClearBanTime() {
			m.ban_time = nil
			m.clearedFields[user.FieldBanTime] = struct{}{}
		}

		
		// BanTimeCleared returns if the "ban_time" field was cleared in this mutation.
		func (m *UserMutation) BanTimeCleared() bool {
			_, ok := m.clearedFields[user.FieldBanTime]
			return ok
		}
	

	
	// ResetBanTime resets all changes to the "ban_time" field.
	func (m *UserMutation) ResetBanTime() {
		m.ban_time = nil
			delete(m.clearedFields, user.FieldBanTime)
	}

	
	
	
	// SetUUID sets the "uuid" field.
	func (m *UserMutation) SetUUID(u uuid.UUID) {
		m.uuid = &u
	}

	// UUID returns the value of the "uuid" field in the mutation.
	func (m *UserMutation) UUID() (r uuid.UUID, exists bool) {
		v := m.uuid
		if v == nil {
			return
		}
		return *v, true
	}

	
		// OldUUID returns the old "uuid" field's value of the User entity.
		// If the User object wasn't provided to the builder, the object is fetched from the database.
		// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
		func (m *UserMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
			if !m.op.Is(OpUpdateOne) {
				return v, errors.New("OldUUID is only allowed on UpdateOne operations")
			}
			if m.id == nil || m.oldValue == nil {
				return v, errors.New("OldUUID requires an ID field in the mutation")
			}
			oldValue, err := m.oldValue(ctx)
			if err != nil {
				return v, fmt.Errorf("querying old value for OldUUID: %w", err)
			}
			return oldValue.UUID, nil
		}
	

	

	

	

	
	// ResetUUID resets all changes to the "uuid" field.
	func (m *UserMutation) ResetUUID() {
		m.uuid = nil
	}

	
	
	
	// SetEmail sets the "email" field.
	func (m *UserMutation) SetEmail(s string) {
		m.email = &s
	}

	// Email returns the value of the "email" field in the mutation.
	func (m *UserMutation) Email() (r string, exists bool) {
		v := m.email
		if v == nil {
			return
		}
		return *v, true
	}

	
		// OldEmail returns the old "email" field's value of the User entity.
		// If the User object wasn't provided to the builder, the object is fetched from the database.
		// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
		func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
			if !m.op.Is(OpUpdateOne) {
				return v, errors.New("OldEmail is only allowed on UpdateOne operations")
			}
			if m.id == nil || m.oldValue == nil {
				return v, errors.New("OldEmail requires an ID field in the mutation")
			}
			oldValue, err := m.oldValue(ctx)
			if err != nil {
				return v, fmt.Errorf("querying old value for OldEmail: %w", err)
			}
			return oldValue.Email, nil
		}
	

	

	

	
		
		// ClearEmail clears the value of the "email" field.
		func (m *UserMutation) ClearEmail() {
			m.email = nil
			m.clearedFields[user.FieldEmail] = struct{}{}
		}

		
		// EmailCleared returns if the "email" field was cleared in this mutation.
		func (m *UserMutation) EmailCleared() bool {
			_, ok := m.clearedFields[user.FieldEmail]
			return ok
		}
	

	
	// ResetEmail resets all changes to the "email" field.
	func (m *UserMutation) ResetEmail() {
		m.email = nil
			delete(m.clearedFields, user.FieldEmail)
	}

	
	
	
	// SetUsername sets the "username" field.
	func (m *UserMutation) SetUsername(s string) {
		m.username = &s
	}

	// Username returns the value of the "username" field in the mutation.
	func (m *UserMutation) Username() (r string, exists bool) {
		v := m.username
		if v == nil {
			return
		}
		return *v, true
	}

	
		// OldUsername returns the old "username" field's value of the User entity.
		// If the User object wasn't provided to the builder, the object is fetched from the database.
		// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
		func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
			if !m.op.Is(OpUpdateOne) {
				return v, errors.New("OldUsername is only allowed on UpdateOne operations")
			}
			if m.id == nil || m.oldValue == nil {
				return v, errors.New("OldUsername requires an ID field in the mutation")
			}
			oldValue, err := m.oldValue(ctx)
			if err != nil {
				return v, fmt.Errorf("querying old value for OldUsername: %w", err)
			}
			return oldValue.Username, nil
		}
	

	

	

	
		
		// ClearUsername clears the value of the "username" field.
		func (m *UserMutation) ClearUsername() {
			m.username = nil
			m.clearedFields[user.FieldUsername] = struct{}{}
		}

		
		// UsernameCleared returns if the "username" field was cleared in this mutation.
		func (m *UserMutation) UsernameCleared() bool {
			_, ok := m.clearedFields[user.FieldUsername]
			return ok
		}
	

	
	// ResetUsername resets all changes to the "username" field.
	func (m *UserMutation) ResetUsername() {
		m.username = nil
			delete(m.clearedFields, user.FieldUsername)
	}

	
	
	
	// SetPassword sets the "password" field.
	func (m *UserMutation) SetPassword(s string) {
		m.password = &s
	}

	// Password returns the value of the "password" field in the mutation.
	func (m *UserMutation) Password() (r string, exists bool) {
		v := m.password
		if v == nil {
			return
		}
		return *v, true
	}

	
		// OldPassword returns the old "password" field's value of the User entity.
		// If the User object wasn't provided to the builder, the object is fetched from the database.
		// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
		func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
			if !m.op.Is(OpUpdateOne) {
				return v, errors.New("OldPassword is only allowed on UpdateOne operations")
			}
			if m.id == nil || m.oldValue == nil {
				return v, errors.New("OldPassword requires an ID field in the mutation")
			}
			oldValue, err := m.oldValue(ctx)
			if err != nil {
				return v, fmt.Errorf("querying old value for OldPassword: %w", err)
			}
			return oldValue.Password, nil
		}
	

	

	

	
		
		// ClearPassword clears the value of the "password" field.
		func (m *UserMutation) ClearPassword() {
			m.password = nil
			m.clearedFields[user.FieldPassword] = struct{}{}
		}

		
		// PasswordCleared returns if the "password" field was cleared in this mutation.
		func (m *UserMutation) PasswordCleared() bool {
			_, ok := m.clearedFields[user.FieldPassword]
			return ok
		}
	

	
	// ResetPassword resets all changes to the "password" field.
	func (m *UserMutation) ResetPassword() {
		m.password = nil
			delete(m.clearedFields, user.FieldPassword)
	}

	
	
	
	// SetSalt sets the "salt" field.
	func (m *UserMutation) SetSalt(s string) {
		m.salt = &s
	}

	// Salt returns the value of the "salt" field in the mutation.
	func (m *UserMutation) Salt() (r string, exists bool) {
		v := m.salt
		if v == nil {
			return
		}
		return *v, true
	}

	
		// OldSalt returns the old "salt" field's value of the User entity.
		// If the User object wasn't provided to the builder, the object is fetched from the database.
		// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
		func (m *UserMutation) OldSalt(ctx context.Context) (v string, err error) {
			if !m.op.Is(OpUpdateOne) {
				return v, errors.New("OldSalt is only allowed on UpdateOne operations")
			}
			if m.id == nil || m.oldValue == nil {
				return v, errors.New("OldSalt requires an ID field in the mutation")
			}
			oldValue, err := m.oldValue(ctx)
			if err != nil {
				return v, fmt.Errorf("querying old value for OldSalt: %w", err)
			}
			return oldValue.Salt, nil
		}
	

	

	

	
		
		// ClearSalt clears the value of the "salt" field.
		func (m *UserMutation) ClearSalt() {
			m.salt = nil
			m.clearedFields[user.FieldSalt] = struct{}{}
		}

		
		// SaltCleared returns if the "salt" field was cleared in this mutation.
		func (m *UserMutation) SaltCleared() bool {
			_, ok := m.clearedFields[user.FieldSalt]
			return ok
		}
	

	
	// ResetSalt resets all changes to the "salt" field.
	func (m *UserMutation) ResetSalt() {
		m.salt = nil
			delete(m.clearedFields, user.FieldSalt)
	}

	
	
	
	// SetDiscordUserID sets the "discord_user_id" field.
	func (m *UserMutation) SetDiscordUserID(s string) {
		m.discord_user_id = &s
	}

	// DiscordUserID returns the value of the "discord_user_id" field in the mutation.
	func (m *UserMutation) DiscordUserID() (r string, exists bool) {
		v := m.discord_user_id
		if v == nil {
			return
		}
		return *v, true
	}

	
		// OldDiscordUserID returns the old "discord_user_id" field's value of the User entity.
		// If the User object wasn't provided to the builder, the object is fetched from the database.
		// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
		func (m *UserMutation) OldDiscordUserID(ctx context.Context) (v string, err error) {
			if !m.op.Is(OpUpdateOne) {
				return v, errors.New("OldDiscordUserID is only allowed on UpdateOne operations")
			}
			if m.id == nil || m.oldValue == nil {
				return v, errors.New("OldDiscordUserID requires an ID field in the mutation")
			}
			oldValue, err := m.oldValue(ctx)
			if err != nil {
				return v, fmt.Errorf("querying old value for OldDiscordUserID: %w", err)
			}
			return oldValue.DiscordUserID, nil
		}
	

	

	

	
		
		// ClearDiscordUserID clears the value of the "discord_user_id" field.
		func (m *UserMutation) ClearDiscordUserID() {
			m.discord_user_id = nil
			m.clearedFields[user.FieldDiscordUserID] = struct{}{}
		}

		
		// DiscordUserIDCleared returns if the "discord_user_id" field was cleared in this mutation.
		func (m *UserMutation) DiscordUserIDCleared() bool {
			_, ok := m.clearedFields[user.FieldDiscordUserID]
			return ok
		}
	

	
	// ResetDiscordUserID resets all changes to the "discord_user_id" field.
	func (m *UserMutation) ResetDiscordUserID() {
		m.discord_user_id = nil
			delete(m.clearedFields, user.FieldDiscordUserID)
	}

	
	
	
	// SetName sets the "name" field.
	func (m *UserMutation) SetName(s string) {
		m.name = &s
	}

	// Name returns the value of the "name" field in the mutation.
	func (m *UserMutation) Name() (r string, exists bool) {
		v := m.name
		if v == nil {
			return
		}
		return *v, true
	}

	
		// OldName returns the old "name" field's value of the User entity.
		// If the User object wasn't provided to the builder, the object is fetched from the database.
		// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
		func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
			if !m.op.Is(OpUpdateOne) {
				return v, errors.New("OldName is only allowed on UpdateOne operations")
			}
			if m.id == nil || m.oldValue == nil {
				return v, errors.New("OldName requires an ID field in the mutation")
			}
			oldValue, err := m.oldValue(ctx)
			if err != nil {
				return v, fmt.Errorf("querying old value for OldName: %w", err)
			}
			return oldValue.Name, nil
		}
	

	

	

	
		
		// ClearName clears the value of the "name" field.
		func (m *UserMutation) ClearName() {
			m.name = nil
			m.clearedFields[user.FieldName] = struct{}{}
		}

		
		// NameCleared returns if the "name" field was cleared in this mutation.
		func (m *UserMutation) NameCleared() bool {
			_, ok := m.clearedFields[user.FieldName]
			return ok
		}
	

	
	// ResetName resets all changes to the "name" field.
	func (m *UserMutation) ResetName() {
		m.name = nil
			delete(m.clearedFields, user.FieldName)
	}






// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 9)
		if m.delete_time != nil {
			fields = append(fields, user.FieldDeleteTime)
		}
		if m.ban_time != nil {
			fields = append(fields, user.FieldBanTime)
		}
		if m.uuid != nil {
			fields = append(fields, user.FieldUUID)
		}
		if m.email != nil {
			fields = append(fields, user.FieldEmail)
		}
		if m.username != nil {
			fields = append(fields, user.FieldUsername)
		}
		if m.password != nil {
			fields = append(fields, user.FieldPassword)
		}
		if m.salt != nil {
			fields = append(fields, user.FieldSalt)
		}
		if m.discord_user_id != nil {
			fields = append(fields, user.FieldDiscordUserID)
		}
		if m.name != nil {
			fields = append(fields, user.FieldName)
		}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
		switch name {
			case user.FieldDeleteTime:
				return m.DeleteTime()
			case user.FieldBanTime:
				return m.BanTime()
			case user.FieldUUID:
				return m.UUID()
			case user.FieldEmail:
				return m.Email()
			case user.FieldUsername:
				return m.Username()
			case user.FieldPassword:
				return m.Password()
			case user.FieldSalt:
				return m.Salt()
			case user.FieldDiscordUserID:
				return m.DiscordUserID()
			case user.FieldName:
				return m.Name()
		}
	return nil, false
}


// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
			switch name {
				case user.FieldDeleteTime:
					return m.OldDeleteTime(ctx)
				case user.FieldBanTime:
					return m.OldBanTime(ctx)
				case user.FieldUUID:
					return m.OldUUID(ctx)
				case user.FieldEmail:
					return m.OldEmail(ctx)
				case user.FieldUsername:
					return m.OldUsername(ctx)
				case user.FieldPassword:
					return m.OldPassword(ctx)
				case user.FieldSalt:
					return m.OldSalt(ctx)
				case user.FieldDiscordUserID:
					return m.OldDiscordUserID(ctx)
				case user.FieldName:
					return m.OldName(ctx)
			}
		return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
		case user.FieldDeleteTime:
			v, ok := value.(time.Time)
			if !ok {
				return fmt.Errorf("unexpected type %T for field %s", value, name)
			}
			m.SetDeleteTime(v)
			return nil
		case user.FieldBanTime:
			v, ok := value.(time.Time)
			if !ok {
				return fmt.Errorf("unexpected type %T for field %s", value, name)
			}
			m.SetBanTime(v)
			return nil
		case user.FieldUUID:
			v, ok := value.(uuid.UUID)
			if !ok {
				return fmt.Errorf("unexpected type %T for field %s", value, name)
			}
			m.SetUUID(v)
			return nil
		case user.FieldEmail:
			v, ok := value.(string)
			if !ok {
				return fmt.Errorf("unexpected type %T for field %s", value, name)
			}
			m.SetEmail(v)
			return nil
		case user.FieldUsername:
			v, ok := value.(string)
			if !ok {
				return fmt.Errorf("unexpected type %T for field %s", value, name)
			}
			m.SetUsername(v)
			return nil
		case user.FieldPassword:
			v, ok := value.(string)
			if !ok {
				return fmt.Errorf("unexpected type %T for field %s", value, name)
			}
			m.SetPassword(v)
			return nil
		case user.FieldSalt:
			v, ok := value.(string)
			if !ok {
				return fmt.Errorf("unexpected type %T for field %s", value, name)
			}
			m.SetSalt(v)
			return nil
		case user.FieldDiscordUserID:
			v, ok := value.(string)
			if !ok {
				return fmt.Errorf("unexpected type %T for field %s", value, name)
			}
			m.SetDiscordUserID(v)
			return nil
		case user.FieldName:
			v, ok := value.(string)
			if !ok {
				return fmt.Errorf("unexpected type %T for field %s", value, name)
			}
			m.SetName(v)
			return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
		return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
		switch name {
		}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
		var fields []string
				if m.FieldCleared(user.FieldDeleteTime) {
					fields = append(fields, user.FieldDeleteTime)
				}
				if m.FieldCleared(user.FieldBanTime) {
					fields = append(fields, user.FieldBanTime)
				}
				if m.FieldCleared(user.FieldEmail) {
					fields = append(fields, user.FieldEmail)
				}
				if m.FieldCleared(user.FieldUsername) {
					fields = append(fields, user.FieldUsername)
				}
				if m.FieldCleared(user.FieldPassword) {
					fields = append(fields, user.FieldPassword)
				}
				if m.FieldCleared(user.FieldSalt) {
					fields = append(fields, user.FieldSalt)
				}
				if m.FieldCleared(user.FieldDiscordUserID) {
					fields = append(fields, user.FieldDiscordUserID)
				}
				if m.FieldCleared(user.FieldName) {
					fields = append(fields, user.FieldName)
				}
		return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
		switch name {
				case user.FieldDeleteTime:
					m.ClearDeleteTime()
					return nil
				case user.FieldBanTime:
					m.ClearBanTime()
					return nil
				case user.FieldEmail:
					m.ClearEmail()
					return nil
				case user.FieldUsername:
					m.ClearUsername()
					return nil
				case user.FieldPassword:
					m.ClearPassword()
					return nil
				case user.FieldSalt:
					m.ClearSalt()
					return nil
				case user.FieldDiscordUserID:
					m.ClearDiscordUserID()
					return nil
				case user.FieldName:
					m.ClearName()
					return nil
		}
	return fmt.Errorf("unknown User nullable field %s", name)
}


// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
		switch name {
			case user.FieldDeleteTime:
				m.ResetDeleteTime()
				return nil
			case user.FieldBanTime:
				m.ResetBanTime()
				return nil
			case user.FieldUUID:
				m.ResetUUID()
				return nil
			case user.FieldEmail:
				m.ResetEmail()
				return nil
			case user.FieldUsername:
				m.ResetUsername()
				return nil
			case user.FieldPassword:
				m.ResetPassword()
				return nil
			case user.FieldSalt:
				m.ResetSalt()
				return nil
			case user.FieldDiscordUserID:
				m.ResetDiscordUserID()
				return nil
			case user.FieldName:
				m.ResetName()
				return nil
		}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}


