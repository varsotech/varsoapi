// Code generated by ent, DO NOT EDIT.

package build

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/varsotech/varsoapi/src/services/analytics/internal/ent/build/accesslog"
)

// AccessLogCreate is the builder for creating a AccessLog entity.
type AccessLogCreate struct {
	config
	mutation *AccessLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (alc *AccessLogCreate) SetCreateTime(t time.Time) *AccessLogCreate {
	alc.mutation.SetCreateTime(t)
	return alc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (alc *AccessLogCreate) SetNillableCreateTime(t *time.Time) *AccessLogCreate {
	if t != nil {
		alc.SetCreateTime(*t)
	}
	return alc
}

// SetIP sets the "ip" field.
func (alc *AccessLogCreate) SetIP(s string) *AccessLogCreate {
	alc.mutation.SetIP(s)
	return alc
}

// SetURI sets the "uri" field.
func (alc *AccessLogCreate) SetURI(s string) *AccessLogCreate {
	alc.mutation.SetURI(s)
	return alc
}

// SetForwardedFor sets the "forwarded_for" field.
func (alc *AccessLogCreate) SetForwardedFor(s string) *AccessLogCreate {
	alc.mutation.SetForwardedFor(s)
	return alc
}

// SetForwardedProto sets the "forwarded_proto" field.
func (alc *AccessLogCreate) SetForwardedProto(s string) *AccessLogCreate {
	alc.mutation.SetForwardedProto(s)
	return alc
}

// SetForwardedHost sets the "forwarded_host" field.
func (alc *AccessLogCreate) SetForwardedHost(s string) *AccessLogCreate {
	alc.mutation.SetForwardedHost(s)
	return alc
}

// SetForwardedPort sets the "forwarded_port" field.
func (alc *AccessLogCreate) SetForwardedPort(s string) *AccessLogCreate {
	alc.mutation.SetForwardedPort(s)
	return alc
}

// SetForwardedServer sets the "forwarded_server" field.
func (alc *AccessLogCreate) SetForwardedServer(s string) *AccessLogCreate {
	alc.mutation.SetForwardedServer(s)
	return alc
}

// SetRequestID sets the "request_id" field.
func (alc *AccessLogCreate) SetRequestID(s string) *AccessLogCreate {
	alc.mutation.SetRequestID(s)
	return alc
}

// SetUserAgent sets the "user_agent" field.
func (alc *AccessLogCreate) SetUserAgent(s string) *AccessLogCreate {
	alc.mutation.SetUserAgent(s)
	return alc
}

// Mutation returns the AccessLogMutation object of the builder.
func (alc *AccessLogCreate) Mutation() *AccessLogMutation {
	return alc.mutation
}

// Save creates the AccessLog in the database.
func (alc *AccessLogCreate) Save(ctx context.Context) (*AccessLog, error) {
	alc.defaults()
	return withHooks(ctx, alc.sqlSave, alc.mutation, alc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (alc *AccessLogCreate) SaveX(ctx context.Context) *AccessLog {
	v, err := alc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alc *AccessLogCreate) Exec(ctx context.Context) error {
	_, err := alc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alc *AccessLogCreate) ExecX(ctx context.Context) {
	if err := alc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alc *AccessLogCreate) defaults() {
	if _, ok := alc.mutation.CreateTime(); !ok {
		v := accesslog.DefaultCreateTime()
		alc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alc *AccessLogCreate) check() error {
	if _, ok := alc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`build: missing required field "AccessLog.create_time"`)}
	}
	if _, ok := alc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`build: missing required field "AccessLog.ip"`)}
	}
	if _, ok := alc.mutation.URI(); !ok {
		return &ValidationError{Name: "uri", err: errors.New(`build: missing required field "AccessLog.uri"`)}
	}
	if _, ok := alc.mutation.ForwardedFor(); !ok {
		return &ValidationError{Name: "forwarded_for", err: errors.New(`build: missing required field "AccessLog.forwarded_for"`)}
	}
	if _, ok := alc.mutation.ForwardedProto(); !ok {
		return &ValidationError{Name: "forwarded_proto", err: errors.New(`build: missing required field "AccessLog.forwarded_proto"`)}
	}
	if _, ok := alc.mutation.ForwardedHost(); !ok {
		return &ValidationError{Name: "forwarded_host", err: errors.New(`build: missing required field "AccessLog.forwarded_host"`)}
	}
	if _, ok := alc.mutation.ForwardedPort(); !ok {
		return &ValidationError{Name: "forwarded_port", err: errors.New(`build: missing required field "AccessLog.forwarded_port"`)}
	}
	if _, ok := alc.mutation.ForwardedServer(); !ok {
		return &ValidationError{Name: "forwarded_server", err: errors.New(`build: missing required field "AccessLog.forwarded_server"`)}
	}
	if _, ok := alc.mutation.RequestID(); !ok {
		return &ValidationError{Name: "request_id", err: errors.New(`build: missing required field "AccessLog.request_id"`)}
	}
	if _, ok := alc.mutation.UserAgent(); !ok {
		return &ValidationError{Name: "user_agent", err: errors.New(`build: missing required field "AccessLog.user_agent"`)}
	}
	return nil
}

func (alc *AccessLogCreate) sqlSave(ctx context.Context) (*AccessLog, error) {
	if err := alc.check(); err != nil {
		return nil, err
	}
	_node, _spec := alc.createSpec()
	if err := sqlgraph.CreateNode(ctx, alc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	alc.mutation.id = &_node.ID
	alc.mutation.done = true
	return _node, nil
}

func (alc *AccessLogCreate) createSpec() (*AccessLog, *sqlgraph.CreateSpec) {
	var (
		_node = &AccessLog{config: alc.config}
		_spec = sqlgraph.NewCreateSpec(accesslog.Table, sqlgraph.NewFieldSpec(accesslog.FieldID, field.TypeInt))
	)
	_spec.OnConflict = alc.conflict
	if value, ok := alc.mutation.CreateTime(); ok {
		_spec.SetField(accesslog.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := alc.mutation.IP(); ok {
		_spec.SetField(accesslog.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := alc.mutation.URI(); ok {
		_spec.SetField(accesslog.FieldURI, field.TypeString, value)
		_node.URI = value
	}
	if value, ok := alc.mutation.ForwardedFor(); ok {
		_spec.SetField(accesslog.FieldForwardedFor, field.TypeString, value)
		_node.ForwardedFor = value
	}
	if value, ok := alc.mutation.ForwardedProto(); ok {
		_spec.SetField(accesslog.FieldForwardedProto, field.TypeString, value)
		_node.ForwardedProto = value
	}
	if value, ok := alc.mutation.ForwardedHost(); ok {
		_spec.SetField(accesslog.FieldForwardedHost, field.TypeString, value)
		_node.ForwardedHost = value
	}
	if value, ok := alc.mutation.ForwardedPort(); ok {
		_spec.SetField(accesslog.FieldForwardedPort, field.TypeString, value)
		_node.ForwardedPort = value
	}
	if value, ok := alc.mutation.ForwardedServer(); ok {
		_spec.SetField(accesslog.FieldForwardedServer, field.TypeString, value)
		_node.ForwardedServer = value
	}
	if value, ok := alc.mutation.RequestID(); ok {
		_spec.SetField(accesslog.FieldRequestID, field.TypeString, value)
		_node.RequestID = value
	}
	if value, ok := alc.mutation.UserAgent(); ok {
		_spec.SetField(accesslog.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AccessLog.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccessLogUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (alc *AccessLogCreate) OnConflict(opts ...sql.ConflictOption) *AccessLogUpsertOne {
	alc.conflict = opts
	return &AccessLogUpsertOne{
		create: alc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AccessLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (alc *AccessLogCreate) OnConflictColumns(columns ...string) *AccessLogUpsertOne {
	alc.conflict = append(alc.conflict, sql.ConflictColumns(columns...))
	return &AccessLogUpsertOne{
		create: alc,
	}
}

type (
	// AccessLogUpsertOne is the builder for "upsert"-ing
	//  one AccessLog node.
	AccessLogUpsertOne struct {
		create *AccessLogCreate
	}

	// AccessLogUpsert is the "OnConflict" setter.
	AccessLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetIP sets the "ip" field.
func (u *AccessLogUpsert) SetIP(v string) *AccessLogUpsert {
	u.Set(accesslog.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AccessLogUpsert) UpdateIP() *AccessLogUpsert {
	u.SetExcluded(accesslog.FieldIP)
	return u
}

// SetURI sets the "uri" field.
func (u *AccessLogUpsert) SetURI(v string) *AccessLogUpsert {
	u.Set(accesslog.FieldURI, v)
	return u
}

// UpdateURI sets the "uri" field to the value that was provided on create.
func (u *AccessLogUpsert) UpdateURI() *AccessLogUpsert {
	u.SetExcluded(accesslog.FieldURI)
	return u
}

// SetForwardedFor sets the "forwarded_for" field.
func (u *AccessLogUpsert) SetForwardedFor(v string) *AccessLogUpsert {
	u.Set(accesslog.FieldForwardedFor, v)
	return u
}

// UpdateForwardedFor sets the "forwarded_for" field to the value that was provided on create.
func (u *AccessLogUpsert) UpdateForwardedFor() *AccessLogUpsert {
	u.SetExcluded(accesslog.FieldForwardedFor)
	return u
}

// SetForwardedProto sets the "forwarded_proto" field.
func (u *AccessLogUpsert) SetForwardedProto(v string) *AccessLogUpsert {
	u.Set(accesslog.FieldForwardedProto, v)
	return u
}

// UpdateForwardedProto sets the "forwarded_proto" field to the value that was provided on create.
func (u *AccessLogUpsert) UpdateForwardedProto() *AccessLogUpsert {
	u.SetExcluded(accesslog.FieldForwardedProto)
	return u
}

// SetForwardedHost sets the "forwarded_host" field.
func (u *AccessLogUpsert) SetForwardedHost(v string) *AccessLogUpsert {
	u.Set(accesslog.FieldForwardedHost, v)
	return u
}

// UpdateForwardedHost sets the "forwarded_host" field to the value that was provided on create.
func (u *AccessLogUpsert) UpdateForwardedHost() *AccessLogUpsert {
	u.SetExcluded(accesslog.FieldForwardedHost)
	return u
}

// SetForwardedPort sets the "forwarded_port" field.
func (u *AccessLogUpsert) SetForwardedPort(v string) *AccessLogUpsert {
	u.Set(accesslog.FieldForwardedPort, v)
	return u
}

// UpdateForwardedPort sets the "forwarded_port" field to the value that was provided on create.
func (u *AccessLogUpsert) UpdateForwardedPort() *AccessLogUpsert {
	u.SetExcluded(accesslog.FieldForwardedPort)
	return u
}

// SetForwardedServer sets the "forwarded_server" field.
func (u *AccessLogUpsert) SetForwardedServer(v string) *AccessLogUpsert {
	u.Set(accesslog.FieldForwardedServer, v)
	return u
}

// UpdateForwardedServer sets the "forwarded_server" field to the value that was provided on create.
func (u *AccessLogUpsert) UpdateForwardedServer() *AccessLogUpsert {
	u.SetExcluded(accesslog.FieldForwardedServer)
	return u
}

// SetRequestID sets the "request_id" field.
func (u *AccessLogUpsert) SetRequestID(v string) *AccessLogUpsert {
	u.Set(accesslog.FieldRequestID, v)
	return u
}

// UpdateRequestID sets the "request_id" field to the value that was provided on create.
func (u *AccessLogUpsert) UpdateRequestID() *AccessLogUpsert {
	u.SetExcluded(accesslog.FieldRequestID)
	return u
}

// SetUserAgent sets the "user_agent" field.
func (u *AccessLogUpsert) SetUserAgent(v string) *AccessLogUpsert {
	u.Set(accesslog.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *AccessLogUpsert) UpdateUserAgent() *AccessLogUpsert {
	u.SetExcluded(accesslog.FieldUserAgent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AccessLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AccessLogUpsertOne) UpdateNewValues() *AccessLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(accesslog.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AccessLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AccessLogUpsertOne) Ignore() *AccessLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccessLogUpsertOne) DoNothing() *AccessLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccessLogCreate.OnConflict
// documentation for more info.
func (u *AccessLogUpsertOne) Update(set func(*AccessLogUpsert)) *AccessLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccessLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetIP sets the "ip" field.
func (u *AccessLogUpsertOne) SetIP(v string) *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AccessLogUpsertOne) UpdateIP() *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateIP()
	})
}

// SetURI sets the "uri" field.
func (u *AccessLogUpsertOne) SetURI(v string) *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetURI(v)
	})
}

// UpdateURI sets the "uri" field to the value that was provided on create.
func (u *AccessLogUpsertOne) UpdateURI() *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateURI()
	})
}

// SetForwardedFor sets the "forwarded_for" field.
func (u *AccessLogUpsertOne) SetForwardedFor(v string) *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetForwardedFor(v)
	})
}

// UpdateForwardedFor sets the "forwarded_for" field to the value that was provided on create.
func (u *AccessLogUpsertOne) UpdateForwardedFor() *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateForwardedFor()
	})
}

// SetForwardedProto sets the "forwarded_proto" field.
func (u *AccessLogUpsertOne) SetForwardedProto(v string) *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetForwardedProto(v)
	})
}

// UpdateForwardedProto sets the "forwarded_proto" field to the value that was provided on create.
func (u *AccessLogUpsertOne) UpdateForwardedProto() *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateForwardedProto()
	})
}

// SetForwardedHost sets the "forwarded_host" field.
func (u *AccessLogUpsertOne) SetForwardedHost(v string) *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetForwardedHost(v)
	})
}

// UpdateForwardedHost sets the "forwarded_host" field to the value that was provided on create.
func (u *AccessLogUpsertOne) UpdateForwardedHost() *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateForwardedHost()
	})
}

// SetForwardedPort sets the "forwarded_port" field.
func (u *AccessLogUpsertOne) SetForwardedPort(v string) *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetForwardedPort(v)
	})
}

// UpdateForwardedPort sets the "forwarded_port" field to the value that was provided on create.
func (u *AccessLogUpsertOne) UpdateForwardedPort() *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateForwardedPort()
	})
}

// SetForwardedServer sets the "forwarded_server" field.
func (u *AccessLogUpsertOne) SetForwardedServer(v string) *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetForwardedServer(v)
	})
}

// UpdateForwardedServer sets the "forwarded_server" field to the value that was provided on create.
func (u *AccessLogUpsertOne) UpdateForwardedServer() *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateForwardedServer()
	})
}

// SetRequestID sets the "request_id" field.
func (u *AccessLogUpsertOne) SetRequestID(v string) *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetRequestID(v)
	})
}

// UpdateRequestID sets the "request_id" field to the value that was provided on create.
func (u *AccessLogUpsertOne) UpdateRequestID() *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateRequestID()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *AccessLogUpsertOne) SetUserAgent(v string) *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *AccessLogUpsertOne) UpdateUserAgent() *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateUserAgent()
	})
}

// Exec executes the query.
func (u *AccessLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("build: missing options for AccessLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccessLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AccessLogUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AccessLogUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AccessLogCreateBulk is the builder for creating many AccessLog entities in bulk.
type AccessLogCreateBulk struct {
	config
	err      error
	builders []*AccessLogCreate
	conflict []sql.ConflictOption
}

// Save creates the AccessLog entities in the database.
func (alcb *AccessLogCreateBulk) Save(ctx context.Context) ([]*AccessLog, error) {
	if alcb.err != nil {
		return nil, alcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(alcb.builders))
	nodes := make([]*AccessLog, len(alcb.builders))
	mutators := make([]Mutator, len(alcb.builders))
	for i := range alcb.builders {
		func(i int, root context.Context) {
			builder := alcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccessLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, alcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = alcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, alcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, alcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (alcb *AccessLogCreateBulk) SaveX(ctx context.Context) []*AccessLog {
	v, err := alcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alcb *AccessLogCreateBulk) Exec(ctx context.Context) error {
	_, err := alcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alcb *AccessLogCreateBulk) ExecX(ctx context.Context) {
	if err := alcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AccessLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccessLogUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (alcb *AccessLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *AccessLogUpsertBulk {
	alcb.conflict = opts
	return &AccessLogUpsertBulk{
		create: alcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AccessLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (alcb *AccessLogCreateBulk) OnConflictColumns(columns ...string) *AccessLogUpsertBulk {
	alcb.conflict = append(alcb.conflict, sql.ConflictColumns(columns...))
	return &AccessLogUpsertBulk{
		create: alcb,
	}
}

// AccessLogUpsertBulk is the builder for "upsert"-ing
// a bulk of AccessLog nodes.
type AccessLogUpsertBulk struct {
	create *AccessLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AccessLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AccessLogUpsertBulk) UpdateNewValues() *AccessLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(accesslog.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AccessLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AccessLogUpsertBulk) Ignore() *AccessLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccessLogUpsertBulk) DoNothing() *AccessLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccessLogCreateBulk.OnConflict
// documentation for more info.
func (u *AccessLogUpsertBulk) Update(set func(*AccessLogUpsert)) *AccessLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccessLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetIP sets the "ip" field.
func (u *AccessLogUpsertBulk) SetIP(v string) *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AccessLogUpsertBulk) UpdateIP() *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateIP()
	})
}

// SetURI sets the "uri" field.
func (u *AccessLogUpsertBulk) SetURI(v string) *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetURI(v)
	})
}

// UpdateURI sets the "uri" field to the value that was provided on create.
func (u *AccessLogUpsertBulk) UpdateURI() *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateURI()
	})
}

// SetForwardedFor sets the "forwarded_for" field.
func (u *AccessLogUpsertBulk) SetForwardedFor(v string) *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetForwardedFor(v)
	})
}

// UpdateForwardedFor sets the "forwarded_for" field to the value that was provided on create.
func (u *AccessLogUpsertBulk) UpdateForwardedFor() *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateForwardedFor()
	})
}

// SetForwardedProto sets the "forwarded_proto" field.
func (u *AccessLogUpsertBulk) SetForwardedProto(v string) *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetForwardedProto(v)
	})
}

// UpdateForwardedProto sets the "forwarded_proto" field to the value that was provided on create.
func (u *AccessLogUpsertBulk) UpdateForwardedProto() *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateForwardedProto()
	})
}

// SetForwardedHost sets the "forwarded_host" field.
func (u *AccessLogUpsertBulk) SetForwardedHost(v string) *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetForwardedHost(v)
	})
}

// UpdateForwardedHost sets the "forwarded_host" field to the value that was provided on create.
func (u *AccessLogUpsertBulk) UpdateForwardedHost() *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateForwardedHost()
	})
}

// SetForwardedPort sets the "forwarded_port" field.
func (u *AccessLogUpsertBulk) SetForwardedPort(v string) *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetForwardedPort(v)
	})
}

// UpdateForwardedPort sets the "forwarded_port" field to the value that was provided on create.
func (u *AccessLogUpsertBulk) UpdateForwardedPort() *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateForwardedPort()
	})
}

// SetForwardedServer sets the "forwarded_server" field.
func (u *AccessLogUpsertBulk) SetForwardedServer(v string) *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetForwardedServer(v)
	})
}

// UpdateForwardedServer sets the "forwarded_server" field to the value that was provided on create.
func (u *AccessLogUpsertBulk) UpdateForwardedServer() *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateForwardedServer()
	})
}

// SetRequestID sets the "request_id" field.
func (u *AccessLogUpsertBulk) SetRequestID(v string) *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetRequestID(v)
	})
}

// UpdateRequestID sets the "request_id" field to the value that was provided on create.
func (u *AccessLogUpsertBulk) UpdateRequestID() *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateRequestID()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *AccessLogUpsertBulk) SetUserAgent(v string) *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *AccessLogUpsertBulk) UpdateUserAgent() *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateUserAgent()
	})
}

// Exec executes the query.
func (u *AccessLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("build: OnConflict was set for builder %d. Set it on the AccessLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("build: missing options for AccessLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccessLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
