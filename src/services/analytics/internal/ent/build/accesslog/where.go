// Code generated by ent, DO NOT EDIT.

package accesslog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/varsotech/varsoapi/src/services/analytics/internal/ent/build/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldCreateTime, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldIP, v))
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldURI, v))
}

// ForwardedFor applies equality check predicate on the "forwarded_for" field. It's identical to ForwardedForEQ.
func ForwardedFor(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldForwardedFor, v))
}

// ForwardedProto applies equality check predicate on the "forwarded_proto" field. It's identical to ForwardedProtoEQ.
func ForwardedProto(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldForwardedProto, v))
}

// ForwardedHost applies equality check predicate on the "forwarded_host" field. It's identical to ForwardedHostEQ.
func ForwardedHost(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldForwardedHost, v))
}

// ForwardedPort applies equality check predicate on the "forwarded_port" field. It's identical to ForwardedPortEQ.
func ForwardedPort(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldForwardedPort, v))
}

// ForwardedServer applies equality check predicate on the "forwarded_server" field. It's identical to ForwardedServerEQ.
func ForwardedServer(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldForwardedServer, v))
}

// RequestID applies equality check predicate on the "request_id" field. It's identical to RequestIDEQ.
func RequestID(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldRequestID, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldUserAgent, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldCreateTime, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContainsFold(FieldIP, v))
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldURI, v))
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldURI, v))
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldURI, vs...))
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldURI, vs...))
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldURI, v))
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldURI, v))
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldURI, v))
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldURI, v))
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContains(FieldURI, v))
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasPrefix(FieldURI, v))
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasSuffix(FieldURI, v))
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEqualFold(FieldURI, v))
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContainsFold(FieldURI, v))
}

// ForwardedForEQ applies the EQ predicate on the "forwarded_for" field.
func ForwardedForEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldForwardedFor, v))
}

// ForwardedForNEQ applies the NEQ predicate on the "forwarded_for" field.
func ForwardedForNEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldForwardedFor, v))
}

// ForwardedForIn applies the In predicate on the "forwarded_for" field.
func ForwardedForIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldForwardedFor, vs...))
}

// ForwardedForNotIn applies the NotIn predicate on the "forwarded_for" field.
func ForwardedForNotIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldForwardedFor, vs...))
}

// ForwardedForGT applies the GT predicate on the "forwarded_for" field.
func ForwardedForGT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldForwardedFor, v))
}

// ForwardedForGTE applies the GTE predicate on the "forwarded_for" field.
func ForwardedForGTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldForwardedFor, v))
}

// ForwardedForLT applies the LT predicate on the "forwarded_for" field.
func ForwardedForLT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldForwardedFor, v))
}

// ForwardedForLTE applies the LTE predicate on the "forwarded_for" field.
func ForwardedForLTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldForwardedFor, v))
}

// ForwardedForContains applies the Contains predicate on the "forwarded_for" field.
func ForwardedForContains(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContains(FieldForwardedFor, v))
}

// ForwardedForHasPrefix applies the HasPrefix predicate on the "forwarded_for" field.
func ForwardedForHasPrefix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasPrefix(FieldForwardedFor, v))
}

// ForwardedForHasSuffix applies the HasSuffix predicate on the "forwarded_for" field.
func ForwardedForHasSuffix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasSuffix(FieldForwardedFor, v))
}

// ForwardedForEqualFold applies the EqualFold predicate on the "forwarded_for" field.
func ForwardedForEqualFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEqualFold(FieldForwardedFor, v))
}

// ForwardedForContainsFold applies the ContainsFold predicate on the "forwarded_for" field.
func ForwardedForContainsFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContainsFold(FieldForwardedFor, v))
}

// ForwardedProtoEQ applies the EQ predicate on the "forwarded_proto" field.
func ForwardedProtoEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldForwardedProto, v))
}

// ForwardedProtoNEQ applies the NEQ predicate on the "forwarded_proto" field.
func ForwardedProtoNEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldForwardedProto, v))
}

// ForwardedProtoIn applies the In predicate on the "forwarded_proto" field.
func ForwardedProtoIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldForwardedProto, vs...))
}

// ForwardedProtoNotIn applies the NotIn predicate on the "forwarded_proto" field.
func ForwardedProtoNotIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldForwardedProto, vs...))
}

// ForwardedProtoGT applies the GT predicate on the "forwarded_proto" field.
func ForwardedProtoGT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldForwardedProto, v))
}

// ForwardedProtoGTE applies the GTE predicate on the "forwarded_proto" field.
func ForwardedProtoGTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldForwardedProto, v))
}

// ForwardedProtoLT applies the LT predicate on the "forwarded_proto" field.
func ForwardedProtoLT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldForwardedProto, v))
}

// ForwardedProtoLTE applies the LTE predicate on the "forwarded_proto" field.
func ForwardedProtoLTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldForwardedProto, v))
}

// ForwardedProtoContains applies the Contains predicate on the "forwarded_proto" field.
func ForwardedProtoContains(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContains(FieldForwardedProto, v))
}

// ForwardedProtoHasPrefix applies the HasPrefix predicate on the "forwarded_proto" field.
func ForwardedProtoHasPrefix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasPrefix(FieldForwardedProto, v))
}

// ForwardedProtoHasSuffix applies the HasSuffix predicate on the "forwarded_proto" field.
func ForwardedProtoHasSuffix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasSuffix(FieldForwardedProto, v))
}

// ForwardedProtoEqualFold applies the EqualFold predicate on the "forwarded_proto" field.
func ForwardedProtoEqualFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEqualFold(FieldForwardedProto, v))
}

// ForwardedProtoContainsFold applies the ContainsFold predicate on the "forwarded_proto" field.
func ForwardedProtoContainsFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContainsFold(FieldForwardedProto, v))
}

// ForwardedHostEQ applies the EQ predicate on the "forwarded_host" field.
func ForwardedHostEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldForwardedHost, v))
}

// ForwardedHostNEQ applies the NEQ predicate on the "forwarded_host" field.
func ForwardedHostNEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldForwardedHost, v))
}

// ForwardedHostIn applies the In predicate on the "forwarded_host" field.
func ForwardedHostIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldForwardedHost, vs...))
}

// ForwardedHostNotIn applies the NotIn predicate on the "forwarded_host" field.
func ForwardedHostNotIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldForwardedHost, vs...))
}

// ForwardedHostGT applies the GT predicate on the "forwarded_host" field.
func ForwardedHostGT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldForwardedHost, v))
}

// ForwardedHostGTE applies the GTE predicate on the "forwarded_host" field.
func ForwardedHostGTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldForwardedHost, v))
}

// ForwardedHostLT applies the LT predicate on the "forwarded_host" field.
func ForwardedHostLT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldForwardedHost, v))
}

// ForwardedHostLTE applies the LTE predicate on the "forwarded_host" field.
func ForwardedHostLTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldForwardedHost, v))
}

// ForwardedHostContains applies the Contains predicate on the "forwarded_host" field.
func ForwardedHostContains(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContains(FieldForwardedHost, v))
}

// ForwardedHostHasPrefix applies the HasPrefix predicate on the "forwarded_host" field.
func ForwardedHostHasPrefix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasPrefix(FieldForwardedHost, v))
}

// ForwardedHostHasSuffix applies the HasSuffix predicate on the "forwarded_host" field.
func ForwardedHostHasSuffix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasSuffix(FieldForwardedHost, v))
}

// ForwardedHostEqualFold applies the EqualFold predicate on the "forwarded_host" field.
func ForwardedHostEqualFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEqualFold(FieldForwardedHost, v))
}

// ForwardedHostContainsFold applies the ContainsFold predicate on the "forwarded_host" field.
func ForwardedHostContainsFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContainsFold(FieldForwardedHost, v))
}

// ForwardedPortEQ applies the EQ predicate on the "forwarded_port" field.
func ForwardedPortEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldForwardedPort, v))
}

// ForwardedPortNEQ applies the NEQ predicate on the "forwarded_port" field.
func ForwardedPortNEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldForwardedPort, v))
}

// ForwardedPortIn applies the In predicate on the "forwarded_port" field.
func ForwardedPortIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldForwardedPort, vs...))
}

// ForwardedPortNotIn applies the NotIn predicate on the "forwarded_port" field.
func ForwardedPortNotIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldForwardedPort, vs...))
}

// ForwardedPortGT applies the GT predicate on the "forwarded_port" field.
func ForwardedPortGT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldForwardedPort, v))
}

// ForwardedPortGTE applies the GTE predicate on the "forwarded_port" field.
func ForwardedPortGTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldForwardedPort, v))
}

// ForwardedPortLT applies the LT predicate on the "forwarded_port" field.
func ForwardedPortLT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldForwardedPort, v))
}

// ForwardedPortLTE applies the LTE predicate on the "forwarded_port" field.
func ForwardedPortLTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldForwardedPort, v))
}

// ForwardedPortContains applies the Contains predicate on the "forwarded_port" field.
func ForwardedPortContains(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContains(FieldForwardedPort, v))
}

// ForwardedPortHasPrefix applies the HasPrefix predicate on the "forwarded_port" field.
func ForwardedPortHasPrefix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasPrefix(FieldForwardedPort, v))
}

// ForwardedPortHasSuffix applies the HasSuffix predicate on the "forwarded_port" field.
func ForwardedPortHasSuffix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasSuffix(FieldForwardedPort, v))
}

// ForwardedPortEqualFold applies the EqualFold predicate on the "forwarded_port" field.
func ForwardedPortEqualFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEqualFold(FieldForwardedPort, v))
}

// ForwardedPortContainsFold applies the ContainsFold predicate on the "forwarded_port" field.
func ForwardedPortContainsFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContainsFold(FieldForwardedPort, v))
}

// ForwardedServerEQ applies the EQ predicate on the "forwarded_server" field.
func ForwardedServerEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldForwardedServer, v))
}

// ForwardedServerNEQ applies the NEQ predicate on the "forwarded_server" field.
func ForwardedServerNEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldForwardedServer, v))
}

// ForwardedServerIn applies the In predicate on the "forwarded_server" field.
func ForwardedServerIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldForwardedServer, vs...))
}

// ForwardedServerNotIn applies the NotIn predicate on the "forwarded_server" field.
func ForwardedServerNotIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldForwardedServer, vs...))
}

// ForwardedServerGT applies the GT predicate on the "forwarded_server" field.
func ForwardedServerGT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldForwardedServer, v))
}

// ForwardedServerGTE applies the GTE predicate on the "forwarded_server" field.
func ForwardedServerGTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldForwardedServer, v))
}

// ForwardedServerLT applies the LT predicate on the "forwarded_server" field.
func ForwardedServerLT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldForwardedServer, v))
}

// ForwardedServerLTE applies the LTE predicate on the "forwarded_server" field.
func ForwardedServerLTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldForwardedServer, v))
}

// ForwardedServerContains applies the Contains predicate on the "forwarded_server" field.
func ForwardedServerContains(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContains(FieldForwardedServer, v))
}

// ForwardedServerHasPrefix applies the HasPrefix predicate on the "forwarded_server" field.
func ForwardedServerHasPrefix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasPrefix(FieldForwardedServer, v))
}

// ForwardedServerHasSuffix applies the HasSuffix predicate on the "forwarded_server" field.
func ForwardedServerHasSuffix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasSuffix(FieldForwardedServer, v))
}

// ForwardedServerEqualFold applies the EqualFold predicate on the "forwarded_server" field.
func ForwardedServerEqualFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEqualFold(FieldForwardedServer, v))
}

// ForwardedServerContainsFold applies the ContainsFold predicate on the "forwarded_server" field.
func ForwardedServerContainsFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContainsFold(FieldForwardedServer, v))
}

// RequestIDEQ applies the EQ predicate on the "request_id" field.
func RequestIDEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldRequestID, v))
}

// RequestIDNEQ applies the NEQ predicate on the "request_id" field.
func RequestIDNEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldRequestID, v))
}

// RequestIDIn applies the In predicate on the "request_id" field.
func RequestIDIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldRequestID, vs...))
}

// RequestIDNotIn applies the NotIn predicate on the "request_id" field.
func RequestIDNotIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldRequestID, vs...))
}

// RequestIDGT applies the GT predicate on the "request_id" field.
func RequestIDGT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldRequestID, v))
}

// RequestIDGTE applies the GTE predicate on the "request_id" field.
func RequestIDGTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldRequestID, v))
}

// RequestIDLT applies the LT predicate on the "request_id" field.
func RequestIDLT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldRequestID, v))
}

// RequestIDLTE applies the LTE predicate on the "request_id" field.
func RequestIDLTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldRequestID, v))
}

// RequestIDContains applies the Contains predicate on the "request_id" field.
func RequestIDContains(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContains(FieldRequestID, v))
}

// RequestIDHasPrefix applies the HasPrefix predicate on the "request_id" field.
func RequestIDHasPrefix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasPrefix(FieldRequestID, v))
}

// RequestIDHasSuffix applies the HasSuffix predicate on the "request_id" field.
func RequestIDHasSuffix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasSuffix(FieldRequestID, v))
}

// RequestIDEqualFold applies the EqualFold predicate on the "request_id" field.
func RequestIDEqualFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEqualFold(FieldRequestID, v))
}

// RequestIDContainsFold applies the ContainsFold predicate on the "request_id" field.
func RequestIDContainsFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContainsFold(FieldRequestID, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContainsFold(FieldUserAgent, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AccessLog) predicate.AccessLog {
	return predicate.AccessLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AccessLog) predicate.AccessLog {
	return predicate.AccessLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AccessLog) predicate.AccessLog {
	return predicate.AccessLog(sql.NotPredicates(p))
}
