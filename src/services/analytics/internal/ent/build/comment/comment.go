// Code generated by ent, DO NOT EDIT.

package comment

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the comment type in the database.
	Label = "comment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uuid"
	// FieldUserUUID holds the string denoting the user_uuid field in the database.
	FieldUserUUID = "user_uuid"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldWasEdited holds the string denoting the was_edited field in the database.
	FieldWasEdited = "was_edited"
	// FieldTotalVotes holds the string denoting the total_votes field in the database.
	FieldTotalVotes = "total_votes"
	// FieldUpvotes holds the string denoting the upvotes field in the database.
	FieldUpvotes = "upvotes"
	// FieldDownvotes holds the string denoting the downvotes field in the database.
	FieldDownvotes = "downvotes"
	// EdgePost holds the string denoting the post edge name in mutations.
	EdgePost = "post"
	// Table holds the table name of the comment in the database.
	Table = "comments"
	// PostTable is the table that holds the post relation/edge.
	PostTable = "posts"
	// PostInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostInverseTable = "posts"
	// PostColumn is the table column denoting the post relation/edge.
	PostColumn = "post_comments"
)

// Columns holds all SQL columns for comment fields.
var Columns = []string{
	FieldID,
	FieldUserUUID,
	FieldText,
	FieldWasEdited,
	FieldTotalVotes,
	FieldUpvotes,
	FieldDownvotes,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultWasEdited holds the default value on creation for the "was_edited" field.
	DefaultWasEdited bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Comment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserUUID orders the results by the user_uuid field.
func ByUserUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserUUID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByWasEdited orders the results by the was_edited field.
func ByWasEdited(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWasEdited, opts...).ToFunc()
}

// ByTotalVotes orders the results by the total_votes field.
func ByTotalVotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalVotes, opts...).ToFunc()
}

// ByUpvotes orders the results by the upvotes field.
func ByUpvotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpvotes, opts...).ToFunc()
}

// ByDownvotes orders the results by the downvotes field.
func ByDownvotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownvotes, opts...).ToFunc()
}

// ByPostCount orders the results by post count.
func ByPostCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPostStep(), opts...)
	}
}

// ByPost orders the results by post terms.
func ByPost(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PostTable, PostColumn),
	)
}
