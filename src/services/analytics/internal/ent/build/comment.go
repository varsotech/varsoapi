// Code generated by ent, DO NOT EDIT.

package build

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/varsotech/varsoapi/src/services/analytics/internal/ent/build/comment"
)

// Comment is the model entity for the Comment schema.
type Comment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserUUID holds the value of the "user_uuid" field.
	UserUUID uuid.UUID `json:"user_uuid,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// WasEdited holds the value of the "was_edited" field.
	WasEdited bool `json:"was_edited,omitempty"`
	// TotalVotes holds the value of the "total_votes" field.
	TotalVotes int64 `json:"total_votes,omitempty"`
	// Upvotes holds the value of the "upvotes" field.
	Upvotes int64 `json:"upvotes,omitempty"`
	// Downvotes holds the value of the "downvotes" field.
	Downvotes int64 `json:"downvotes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommentQuery when eager-loading is set.
	Edges        CommentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CommentEdges holds the relations/edges for other nodes in the graph.
type CommentEdges struct {
	// Post holds the value of the post edge.
	Post []*Post `json:"post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) PostOrErr() ([]*Post, error) {
	if e.loadedTypes[0] {
		return e.Post, nil
	}
	return nil, &NotLoadedError{edge: "post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Comment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case comment.FieldWasEdited:
			values[i] = new(sql.NullBool)
		case comment.FieldTotalVotes, comment.FieldUpvotes, comment.FieldDownvotes:
			values[i] = new(sql.NullInt64)
		case comment.FieldText:
			values[i] = new(sql.NullString)
		case comment.FieldID, comment.FieldUserUUID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Comment fields.
func (c *Comment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case comment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case comment.FieldUserUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_uuid", values[i])
			} else if value != nil {
				c.UserUUID = *value
			}
		case comment.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				c.Text = value.String
			}
		case comment.FieldWasEdited:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field was_edited", values[i])
			} else if value.Valid {
				c.WasEdited = value.Bool
			}
		case comment.FieldTotalVotes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_votes", values[i])
			} else if value.Valid {
				c.TotalVotes = value.Int64
			}
		case comment.FieldUpvotes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field upvotes", values[i])
			} else if value.Valid {
				c.Upvotes = value.Int64
			}
		case comment.FieldDownvotes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field downvotes", values[i])
			} else if value.Valid {
				c.Downvotes = value.Int64
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Comment.
// This includes values selected through modifiers, order, etc.
func (c *Comment) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryPost queries the "post" edge of the Comment entity.
func (c *Comment) QueryPost() *PostQuery {
	return NewCommentClient(c.config).QueryPost(c)
}

// Update returns a builder for updating this Comment.
// Note that you need to call Comment.Unwrap() before calling this method if this Comment
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Comment) Update() *CommentUpdateOne {
	return NewCommentClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Comment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Comment) Unwrap() *Comment {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("build: Comment is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Comment) String() string {
	var builder strings.Builder
	builder.WriteString("Comment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("user_uuid=")
	builder.WriteString(fmt.Sprintf("%v", c.UserUUID))
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(c.Text)
	builder.WriteString(", ")
	builder.WriteString("was_edited=")
	builder.WriteString(fmt.Sprintf("%v", c.WasEdited))
	builder.WriteString(", ")
	builder.WriteString("total_votes=")
	builder.WriteString(fmt.Sprintf("%v", c.TotalVotes))
	builder.WriteString(", ")
	builder.WriteString("upvotes=")
	builder.WriteString(fmt.Sprintf("%v", c.Upvotes))
	builder.WriteString(", ")
	builder.WriteString("downvotes=")
	builder.WriteString(fmt.Sprintf("%v", c.Downvotes))
	builder.WriteByte(')')
	return builder.String()
}

// Comments is a parsable slice of Comment.
type Comments []*Comment
