// Code generated by ent, DO NOT EDIT.

package build

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/varsotech/varsoapi/src/services/analytics/internal/ent/build/accesslog"
)

// AccessLog is the model entity for the AccessLog schema.
type AccessLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// URI holds the value of the "uri" field.
	URI string `json:"uri,omitempty"`
	// ForwardedFor holds the value of the "forwarded_for" field.
	ForwardedFor string `json:"forwarded_for,omitempty"`
	// ForwardedProto holds the value of the "forwarded_proto" field.
	ForwardedProto string `json:"forwarded_proto,omitempty"`
	// ForwardedHost holds the value of the "forwarded_host" field.
	ForwardedHost string `json:"forwarded_host,omitempty"`
	// ForwardedPort holds the value of the "forwarded_port" field.
	ForwardedPort string `json:"forwarded_port,omitempty"`
	// ForwardedServer holds the value of the "forwarded_server" field.
	ForwardedServer string `json:"forwarded_server,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID string `json:"request_id,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent    string `json:"user_agent,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccessLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case accesslog.FieldID:
			values[i] = new(sql.NullInt64)
		case accesslog.FieldIP, accesslog.FieldURI, accesslog.FieldForwardedFor, accesslog.FieldForwardedProto, accesslog.FieldForwardedHost, accesslog.FieldForwardedPort, accesslog.FieldForwardedServer, accesslog.FieldRequestID, accesslog.FieldUserAgent:
			values[i] = new(sql.NullString)
		case accesslog.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccessLog fields.
func (al *AccessLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accesslog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			al.ID = int(value.Int64)
		case accesslog.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				al.CreateTime = value.Time
			}
		case accesslog.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				al.IP = value.String
			}
		case accesslog.FieldURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uri", values[i])
			} else if value.Valid {
				al.URI = value.String
			}
		case accesslog.FieldForwardedFor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field forwarded_for", values[i])
			} else if value.Valid {
				al.ForwardedFor = value.String
			}
		case accesslog.FieldForwardedProto:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field forwarded_proto", values[i])
			} else if value.Valid {
				al.ForwardedProto = value.String
			}
		case accesslog.FieldForwardedHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field forwarded_host", values[i])
			} else if value.Valid {
				al.ForwardedHost = value.String
			}
		case accesslog.FieldForwardedPort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field forwarded_port", values[i])
			} else if value.Valid {
				al.ForwardedPort = value.String
			}
		case accesslog.FieldForwardedServer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field forwarded_server", values[i])
			} else if value.Valid {
				al.ForwardedServer = value.String
			}
		case accesslog.FieldRequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				al.RequestID = value.String
			}
		case accesslog.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				al.UserAgent = value.String
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AccessLog.
// This includes values selected through modifiers, order, etc.
func (al *AccessLog) Value(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// Update returns a builder for updating this AccessLog.
// Note that you need to call AccessLog.Unwrap() before calling this method if this AccessLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AccessLog) Update() *AccessLogUpdateOne {
	return NewAccessLogClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the AccessLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AccessLog) Unwrap() *AccessLog {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("build: AccessLog is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AccessLog) String() string {
	var builder strings.Builder
	builder.WriteString("AccessLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("create_time=")
	builder.WriteString(al.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(al.IP)
	builder.WriteString(", ")
	builder.WriteString("uri=")
	builder.WriteString(al.URI)
	builder.WriteString(", ")
	builder.WriteString("forwarded_for=")
	builder.WriteString(al.ForwardedFor)
	builder.WriteString(", ")
	builder.WriteString("forwarded_proto=")
	builder.WriteString(al.ForwardedProto)
	builder.WriteString(", ")
	builder.WriteString("forwarded_host=")
	builder.WriteString(al.ForwardedHost)
	builder.WriteString(", ")
	builder.WriteString("forwarded_port=")
	builder.WriteString(al.ForwardedPort)
	builder.WriteString(", ")
	builder.WriteString("forwarded_server=")
	builder.WriteString(al.ForwardedServer)
	builder.WriteString(", ")
	builder.WriteString("request_id=")
	builder.WriteString(al.RequestID)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(al.UserAgent)
	builder.WriteByte(')')
	return builder.String()
}

// AccessLogs is a parsable slice of AccessLog.
type AccessLogs []*AccessLog
