// Code generated by ent, DO NOT EDIT.

package post

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the post type in the database.
	Label = "post"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uuid"
	// FieldAuthorUserUUID holds the string denoting the author_user_uuid field in the database.
	FieldAuthorUserUUID = "author_user_uuid"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldCoverImage holds the string denoting the cover_image field in the database.
	FieldCoverImage = "cover_image"
	// FieldTotalVotes holds the string denoting the total_votes field in the database.
	FieldTotalVotes = "total_votes"
	// FieldUpvotes holds the string denoting the upvotes field in the database.
	FieldUpvotes = "upvotes"
	// FieldDownvotes holds the string denoting the downvotes field in the database.
	FieldDownvotes = "downvotes"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// Table holds the table name of the post in the database.
	Table = "posts"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "posts"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "post_comments"
)

// Columns holds all SQL columns for post fields.
var Columns = []string{
	FieldID,
	FieldAuthorUserUUID,
	FieldTitle,
	FieldCoverImage,
	FieldTotalVotes,
	FieldUpvotes,
	FieldDownvotes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "posts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"post_comments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Post queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAuthorUserUUID orders the results by the author_user_uuid field.
func ByAuthorUserUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorUserUUID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByCoverImage orders the results by the cover_image field.
func ByCoverImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoverImage, opts...).ToFunc()
}

// ByTotalVotes orders the results by the total_votes field.
func ByTotalVotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalVotes, opts...).ToFunc()
}

// ByUpvotes orders the results by the upvotes field.
func ByUpvotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpvotes, opts...).ToFunc()
}

// ByDownvotes orders the results by the downvotes field.
func ByDownvotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownvotes, opts...).ToFunc()
}

// ByCommentsField orders the results by comments field.
func ByCommentsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentsStep(), sql.OrderByField(field, opts...))
	}
}
func newCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CommentsTable, CommentsColumn),
	)
}
