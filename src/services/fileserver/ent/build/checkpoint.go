// Code generated by ent, DO NOT EDIT.

package build

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/varsotech/varsoapi/src/services/fileserver/ent/build/checkpoint"
)

// Checkpoint is the model entity for the Checkpoint schema.
type Checkpoint struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UserUUID holds the value of the "user_uuid" field.
	UserUUID string `json:"user_uuid,omitempty"`
	// Key holds the value of the "key" field.
	Key          string `json:"key,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Checkpoint) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case checkpoint.FieldID:
			values[i] = new(sql.NullInt64)
		case checkpoint.FieldUserUUID, checkpoint.FieldKey:
			values[i] = new(sql.NullString)
		case checkpoint.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Checkpoint fields.
func (c *Checkpoint) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case checkpoint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case checkpoint.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case checkpoint.FieldUserUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_uuid", values[i])
			} else if value.Valid {
				c.UserUUID = value.String
			}
		case checkpoint.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				c.Key = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Checkpoint.
// This includes values selected through modifiers, order, etc.
func (c *Checkpoint) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Checkpoint.
// Note that you need to call Checkpoint.Unwrap() before calling this method if this Checkpoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Checkpoint) Update() *CheckpointUpdateOne {
	return NewCheckpointClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Checkpoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Checkpoint) Unwrap() *Checkpoint {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("build: Checkpoint is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Checkpoint) String() string {
	var builder strings.Builder
	builder.WriteString("Checkpoint(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_uuid=")
	builder.WriteString(c.UserUUID)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(c.Key)
	builder.WriteByte(')')
	return builder.String()
}

// Checkpoints is a parsable slice of Checkpoint.
type Checkpoints []*Checkpoint
