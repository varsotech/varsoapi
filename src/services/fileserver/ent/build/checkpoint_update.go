// Code generated by ent, DO NOT EDIT.

package build

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/varsotech/varsoapi/src/services/fileserver/ent/build/checkpoint"
	"github.com/varsotech/varsoapi/src/services/fileserver/ent/build/predicate"
)

// CheckpointUpdate is the builder for updating Checkpoint entities.
type CheckpointUpdate struct {
	config
	hooks    []Hook
	mutation *CheckpointMutation
}

// Where appends a list predicates to the CheckpointUpdate builder.
func (cu *CheckpointUpdate) Where(ps ...predicate.Checkpoint) *CheckpointUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreateTime sets the "create_time" field.
func (cu *CheckpointUpdate) SetCreateTime(t time.Time) *CheckpointUpdate {
	cu.mutation.SetCreateTime(t)
	return cu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cu *CheckpointUpdate) SetNillableCreateTime(t *time.Time) *CheckpointUpdate {
	if t != nil {
		cu.SetCreateTime(*t)
	}
	return cu
}

// SetUserUUID sets the "user_uuid" field.
func (cu *CheckpointUpdate) SetUserUUID(s string) *CheckpointUpdate {
	cu.mutation.SetUserUUID(s)
	return cu
}

// SetNillableUserUUID sets the "user_uuid" field if the given value is not nil.
func (cu *CheckpointUpdate) SetNillableUserUUID(s *string) *CheckpointUpdate {
	if s != nil {
		cu.SetUserUUID(*s)
	}
	return cu
}

// SetKey sets the "key" field.
func (cu *CheckpointUpdate) SetKey(s string) *CheckpointUpdate {
	cu.mutation.SetKey(s)
	return cu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (cu *CheckpointUpdate) SetNillableKey(s *string) *CheckpointUpdate {
	if s != nil {
		cu.SetKey(*s)
	}
	return cu
}

// Mutation returns the CheckpointMutation object of the builder.
func (cu *CheckpointUpdate) Mutation() *CheckpointMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CheckpointUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CheckpointUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CheckpointUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CheckpointUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CheckpointUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(checkpoint.Table, checkpoint.Columns, sqlgraph.NewFieldSpec(checkpoint.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreateTime(); ok {
		_spec.SetField(checkpoint.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UserUUID(); ok {
		_spec.SetField(checkpoint.FieldUserUUID, field.TypeString, value)
	}
	if value, ok := cu.mutation.Key(); ok {
		_spec.SetField(checkpoint.FieldKey, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CheckpointUpdateOne is the builder for updating a single Checkpoint entity.
type CheckpointUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CheckpointMutation
}

// SetCreateTime sets the "create_time" field.
func (cuo *CheckpointUpdateOne) SetCreateTime(t time.Time) *CheckpointUpdateOne {
	cuo.mutation.SetCreateTime(t)
	return cuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cuo *CheckpointUpdateOne) SetNillableCreateTime(t *time.Time) *CheckpointUpdateOne {
	if t != nil {
		cuo.SetCreateTime(*t)
	}
	return cuo
}

// SetUserUUID sets the "user_uuid" field.
func (cuo *CheckpointUpdateOne) SetUserUUID(s string) *CheckpointUpdateOne {
	cuo.mutation.SetUserUUID(s)
	return cuo
}

// SetNillableUserUUID sets the "user_uuid" field if the given value is not nil.
func (cuo *CheckpointUpdateOne) SetNillableUserUUID(s *string) *CheckpointUpdateOne {
	if s != nil {
		cuo.SetUserUUID(*s)
	}
	return cuo
}

// SetKey sets the "key" field.
func (cuo *CheckpointUpdateOne) SetKey(s string) *CheckpointUpdateOne {
	cuo.mutation.SetKey(s)
	return cuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (cuo *CheckpointUpdateOne) SetNillableKey(s *string) *CheckpointUpdateOne {
	if s != nil {
		cuo.SetKey(*s)
	}
	return cuo
}

// Mutation returns the CheckpointMutation object of the builder.
func (cuo *CheckpointUpdateOne) Mutation() *CheckpointMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CheckpointUpdate builder.
func (cuo *CheckpointUpdateOne) Where(ps ...predicate.Checkpoint) *CheckpointUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CheckpointUpdateOne) Select(field string, fields ...string) *CheckpointUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Checkpoint entity.
func (cuo *CheckpointUpdateOne) Save(ctx context.Context) (*Checkpoint, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CheckpointUpdateOne) SaveX(ctx context.Context) *Checkpoint {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CheckpointUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CheckpointUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CheckpointUpdateOne) sqlSave(ctx context.Context) (_node *Checkpoint, err error) {
	_spec := sqlgraph.NewUpdateSpec(checkpoint.Table, checkpoint.Columns, sqlgraph.NewFieldSpec(checkpoint.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`build: missing "Checkpoint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, checkpoint.FieldID)
		for _, f := range fields {
			if !checkpoint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("build: invalid field %q for query", f)}
			}
			if f != checkpoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreateTime(); ok {
		_spec.SetField(checkpoint.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UserUUID(); ok {
		_spec.SetField(checkpoint.FieldUserUUID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Key(); ok {
		_spec.SetField(checkpoint.FieldKey, field.TypeString, value)
	}
	_node = &Checkpoint{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
