FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# ARG NPM_TOKEN
# ENV NPM_TOKEN=${NPM_TOKEN}
# ARG NPM_REGISTRY_URL
# ENV NPM_REGISTRY_URL=${NPM_REGISTRY_URL}

# Install dependencies
COPY src/services/www/yarn.lock ./
# RUN echo //${NPM_REGISTRY_URL}/:_authToken=\${NPM_TOKEN} > .npmrc
RUN yarn --frozen-lockfile

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY src/services/www/. .

# ARG NPM_TOKEN
# ENV NPM_TOKEN=${NPM_TOKEN}
# ARG NPM_REGISTRY_URL
# ENV NPM_REGISTRY_URL=${NPM_REGISTRY_URL}

ENV NEXT_TELEMETRY_DISABLED 1
# RUN echo //${NPM_REGISTRY_URL}/:_authToken=\${NPM_TOKEN} > .npmrc
RUN yarn run build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# COPY --from=builder /app/.next/standalone ./.next/standalone

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Automatically leverage output traces to reduce image size
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# server.js is created by next build from the standalone output
CMD ["node", "server.js"]