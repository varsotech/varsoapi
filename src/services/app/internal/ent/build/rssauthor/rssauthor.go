// Code generated by ent, DO NOT EDIT.

package rssauthor

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the rssauthor type in the database.
	Label = "rss_author"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uuid"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgePerson holds the string denoting the person edge name in mutations.
	EdgePerson = "person"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeNewsitem holds the string denoting the newsitem edge name in mutations.
	EdgeNewsitem = "newsitem"
	// Table holds the table name of the rssauthor in the database.
	Table = "rss_authors"
	// PersonTable is the table that holds the person relation/edge.
	PersonTable = "rss_authors"
	// PersonInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	PersonInverseTable = "persons"
	// PersonColumn is the table column denoting the person relation/edge.
	PersonColumn = "rss_author_person"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "rss_authors"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "rss_author_organization"
	// NewsitemTable is the table that holds the newsitem relation/edge. The primary key declared below.
	NewsitemTable = "news_item_authors"
	// NewsitemInverseTable is the table name for the NewsItem entity.
	// It exists in this package in order to avoid circular dependency with the "newsitem" package.
	NewsitemInverseTable = "news_items"
)

// Columns holds all SQL columns for rssauthor fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldEmail,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rss_authors"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"organization_author",
	"rss_author_person",
	"rss_author_organization",
}

var (
	// NewsitemPrimaryKey and NewsitemColumn2 are the table columns denoting the
	// primary key for the newsitem relation (M2M).
	NewsitemPrimaryKey = []string{"news_item_id", "rss_author_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the RSSAuthor queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPersonField orders the results by person field.
func ByPersonField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByNewsitemCount orders the results by newsitem count.
func ByNewsitemCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNewsitemStep(), opts...)
	}
}

// ByNewsitem orders the results by newsitem terms.
func ByNewsitem(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNewsitemStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPersonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PersonTable, PersonColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
	)
}
func newNewsitemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NewsitemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, NewsitemTable, NewsitemPrimaryKey...),
	)
}
