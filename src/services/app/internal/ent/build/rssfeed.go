// Code generated by ent, DO NOT EDIT.

package build

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/organization"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/rssfeed"
)

// RSSFeed is the model entity for the RSSFeed schema.
type RSSFeed struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// RssFeedURL holds the value of the "rss_feed_url" field.
	RssFeedURL string `json:"rss_feed_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RSSFeedQuery when eager-loading is set.
	Edges              RSSFeedEdges `json:"edges"`
	organization_feeds *uuid.UUID
	selectValues       sql.SelectValues
}

// RSSFeedEdges holds the relations/edges for other nodes in the graph.
type RSSFeedEdges struct {
	// Items holds the value of the items edge.
	Items []*NewsItem `json:"items,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e RSSFeedEdges) ItemsOrErr() ([]*NewsItem, error) {
	if e.loadedTypes[0] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RSSFeedEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RSSFeed) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rssfeed.FieldRssFeedURL:
			values[i] = new(sql.NullString)
		case rssfeed.FieldCreateTime, rssfeed.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case rssfeed.FieldID:
			values[i] = new(uuid.UUID)
		case rssfeed.ForeignKeys[0]: // organization_feeds
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RSSFeed fields.
func (rf *RSSFeed) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rssfeed.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rf.ID = *value
			}
		case rssfeed.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				rf.CreateTime = value.Time
			}
		case rssfeed.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				rf.UpdateTime = value.Time
			}
		case rssfeed.FieldRssFeedURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rss_feed_url", values[i])
			} else if value.Valid {
				rf.RssFeedURL = value.String
			}
		case rssfeed.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field organization_feeds", values[i])
			} else if value.Valid {
				rf.organization_feeds = new(uuid.UUID)
				*rf.organization_feeds = *value.S.(*uuid.UUID)
			}
		default:
			rf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RSSFeed.
// This includes values selected through modifiers, order, etc.
func (rf *RSSFeed) Value(name string) (ent.Value, error) {
	return rf.selectValues.Get(name)
}

// QueryItems queries the "items" edge of the RSSFeed entity.
func (rf *RSSFeed) QueryItems() *NewsItemQuery {
	return NewRSSFeedClient(rf.config).QueryItems(rf)
}

// QueryOrganization queries the "organization" edge of the RSSFeed entity.
func (rf *RSSFeed) QueryOrganization() *OrganizationQuery {
	return NewRSSFeedClient(rf.config).QueryOrganization(rf)
}

// Update returns a builder for updating this RSSFeed.
// Note that you need to call RSSFeed.Unwrap() before calling this method if this RSSFeed
// was returned from a transaction, and the transaction was committed or rolled back.
func (rf *RSSFeed) Update() *RSSFeedUpdateOne {
	return NewRSSFeedClient(rf.config).UpdateOne(rf)
}

// Unwrap unwraps the RSSFeed entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rf *RSSFeed) Unwrap() *RSSFeed {
	_tx, ok := rf.config.driver.(*txDriver)
	if !ok {
		panic("build: RSSFeed is not a transactional entity")
	}
	rf.config.driver = _tx.drv
	return rf
}

// String implements the fmt.Stringer.
func (rf *RSSFeed) String() string {
	var builder strings.Builder
	builder.WriteString("RSSFeed(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rf.ID))
	builder.WriteString("create_time=")
	builder.WriteString(rf.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(rf.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("rss_feed_url=")
	builder.WriteString(rf.RssFeedURL)
	builder.WriteByte(')')
	return builder.String()
}

// RSSFeeds is a parsable slice of RSSFeed.
type RSSFeeds []*RSSFeed
