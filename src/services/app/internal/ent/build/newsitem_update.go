// Code generated by ent, DO NOT EDIT.

package build

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/newsitem"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/predicate"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/rssauthor"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/rssfeed"
)

// NewsItemUpdate is the builder for updating NewsItem entities.
type NewsItemUpdate struct {
	config
	hooks    []Hook
	mutation *NewsItemMutation
}

// Where appends a list predicates to the NewsItemUpdate builder.
func (niu *NewsItemUpdate) Where(ps ...predicate.NewsItem) *NewsItemUpdate {
	niu.mutation.Where(ps...)
	return niu
}

// SetUpdateTime sets the "update_time" field.
func (niu *NewsItemUpdate) SetUpdateTime(t time.Time) *NewsItemUpdate {
	niu.mutation.SetUpdateTime(t)
	return niu
}

// SetRssGUID sets the "rss_guid" field.
func (niu *NewsItemUpdate) SetRssGUID(s string) *NewsItemUpdate {
	niu.mutation.SetRssGUID(s)
	return niu
}

// SetNillableRssGUID sets the "rss_guid" field if the given value is not nil.
func (niu *NewsItemUpdate) SetNillableRssGUID(s *string) *NewsItemUpdate {
	if s != nil {
		niu.SetRssGUID(*s)
	}
	return niu
}

// SetTitle sets the "title" field.
func (niu *NewsItemUpdate) SetTitle(s string) *NewsItemUpdate {
	niu.mutation.SetTitle(s)
	return niu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (niu *NewsItemUpdate) SetNillableTitle(s *string) *NewsItemUpdate {
	if s != nil {
		niu.SetTitle(*s)
	}
	return niu
}

// SetDescription sets the "description" field.
func (niu *NewsItemUpdate) SetDescription(s string) *NewsItemUpdate {
	niu.mutation.SetDescription(s)
	return niu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (niu *NewsItemUpdate) SetNillableDescription(s *string) *NewsItemUpdate {
	if s != nil {
		niu.SetDescription(*s)
	}
	return niu
}

// SetContent sets the "content" field.
func (niu *NewsItemUpdate) SetContent(s string) *NewsItemUpdate {
	niu.mutation.SetContent(s)
	return niu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (niu *NewsItemUpdate) SetNillableContent(s *string) *NewsItemUpdate {
	if s != nil {
		niu.SetContent(*s)
	}
	return niu
}

// SetLink sets the "link" field.
func (niu *NewsItemUpdate) SetLink(s string) *NewsItemUpdate {
	niu.mutation.SetLink(s)
	return niu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (niu *NewsItemUpdate) SetNillableLink(s *string) *NewsItemUpdate {
	if s != nil {
		niu.SetLink(*s)
	}
	return niu
}

// SetLinks sets the "links" field.
func (niu *NewsItemUpdate) SetLinks(s []string) *NewsItemUpdate {
	niu.mutation.SetLinks(s)
	return niu
}

// AppendLinks appends s to the "links" field.
func (niu *NewsItemUpdate) AppendLinks(s []string) *NewsItemUpdate {
	niu.mutation.AppendLinks(s)
	return niu
}

// SetItemPublishTime sets the "item_publish_time" field.
func (niu *NewsItemUpdate) SetItemPublishTime(t time.Time) *NewsItemUpdate {
	niu.mutation.SetItemPublishTime(t)
	return niu
}

// SetNillableItemPublishTime sets the "item_publish_time" field if the given value is not nil.
func (niu *NewsItemUpdate) SetNillableItemPublishTime(t *time.Time) *NewsItemUpdate {
	if t != nil {
		niu.SetItemPublishTime(*t)
	}
	return niu
}

// ClearItemPublishTime clears the value of the "item_publish_time" field.
func (niu *NewsItemUpdate) ClearItemPublishTime() *NewsItemUpdate {
	niu.mutation.ClearItemPublishTime()
	return niu
}

// SetItemUpdateTime sets the "item_update_time" field.
func (niu *NewsItemUpdate) SetItemUpdateTime(t time.Time) *NewsItemUpdate {
	niu.mutation.SetItemUpdateTime(t)
	return niu
}

// SetNillableItemUpdateTime sets the "item_update_time" field if the given value is not nil.
func (niu *NewsItemUpdate) SetNillableItemUpdateTime(t *time.Time) *NewsItemUpdate {
	if t != nil {
		niu.SetItemUpdateTime(*t)
	}
	return niu
}

// ClearItemUpdateTime clears the value of the "item_update_time" field.
func (niu *NewsItemUpdate) ClearItemUpdateTime() *NewsItemUpdate {
	niu.mutation.ClearItemUpdateTime()
	return niu
}

// SetImageURL sets the "image_url" field.
func (niu *NewsItemUpdate) SetImageURL(s string) *NewsItemUpdate {
	niu.mutation.SetImageURL(s)
	return niu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (niu *NewsItemUpdate) SetNillableImageURL(s *string) *NewsItemUpdate {
	if s != nil {
		niu.SetImageURL(*s)
	}
	return niu
}

// SetImageTitle sets the "image_title" field.
func (niu *NewsItemUpdate) SetImageTitle(s string) *NewsItemUpdate {
	niu.mutation.SetImageTitle(s)
	return niu
}

// SetNillableImageTitle sets the "image_title" field if the given value is not nil.
func (niu *NewsItemUpdate) SetNillableImageTitle(s *string) *NewsItemUpdate {
	if s != nil {
		niu.SetImageTitle(*s)
	}
	return niu
}

// SetCategories sets the "categories" field.
func (niu *NewsItemUpdate) SetCategories(s []string) *NewsItemUpdate {
	niu.mutation.SetCategories(s)
	return niu
}

// AppendCategories appends s to the "categories" field.
func (niu *NewsItemUpdate) AppendCategories(s []string) *NewsItemUpdate {
	niu.mutation.AppendCategories(s)
	return niu
}

// SetBlur sets the "blur" field.
func (niu *NewsItemUpdate) SetBlur(b bool) *NewsItemUpdate {
	niu.mutation.SetBlur(b)
	return niu
}

// SetNillableBlur sets the "blur" field if the given value is not nil.
func (niu *NewsItemUpdate) SetNillableBlur(b *bool) *NewsItemUpdate {
	if b != nil {
		niu.SetBlur(*b)
	}
	return niu
}

// AddAuthorIDs adds the "authors" edge to the RSSAuthor entity by IDs.
func (niu *NewsItemUpdate) AddAuthorIDs(ids ...uuid.UUID) *NewsItemUpdate {
	niu.mutation.AddAuthorIDs(ids...)
	return niu
}

// AddAuthors adds the "authors" edges to the RSSAuthor entity.
func (niu *NewsItemUpdate) AddAuthors(r ...*RSSAuthor) *NewsItemUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return niu.AddAuthorIDs(ids...)
}

// SetFeedID sets the "feed" edge to the RSSFeed entity by ID.
func (niu *NewsItemUpdate) SetFeedID(id uuid.UUID) *NewsItemUpdate {
	niu.mutation.SetFeedID(id)
	return niu
}

// SetNillableFeedID sets the "feed" edge to the RSSFeed entity by ID if the given value is not nil.
func (niu *NewsItemUpdate) SetNillableFeedID(id *uuid.UUID) *NewsItemUpdate {
	if id != nil {
		niu = niu.SetFeedID(*id)
	}
	return niu
}

// SetFeed sets the "feed" edge to the RSSFeed entity.
func (niu *NewsItemUpdate) SetFeed(r *RSSFeed) *NewsItemUpdate {
	return niu.SetFeedID(r.ID)
}

// Mutation returns the NewsItemMutation object of the builder.
func (niu *NewsItemUpdate) Mutation() *NewsItemMutation {
	return niu.mutation
}

// ClearAuthors clears all "authors" edges to the RSSAuthor entity.
func (niu *NewsItemUpdate) ClearAuthors() *NewsItemUpdate {
	niu.mutation.ClearAuthors()
	return niu
}

// RemoveAuthorIDs removes the "authors" edge to RSSAuthor entities by IDs.
func (niu *NewsItemUpdate) RemoveAuthorIDs(ids ...uuid.UUID) *NewsItemUpdate {
	niu.mutation.RemoveAuthorIDs(ids...)
	return niu
}

// RemoveAuthors removes "authors" edges to RSSAuthor entities.
func (niu *NewsItemUpdate) RemoveAuthors(r ...*RSSAuthor) *NewsItemUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return niu.RemoveAuthorIDs(ids...)
}

// ClearFeed clears the "feed" edge to the RSSFeed entity.
func (niu *NewsItemUpdate) ClearFeed() *NewsItemUpdate {
	niu.mutation.ClearFeed()
	return niu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (niu *NewsItemUpdate) Save(ctx context.Context) (int, error) {
	niu.defaults()
	return withHooks(ctx, niu.sqlSave, niu.mutation, niu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (niu *NewsItemUpdate) SaveX(ctx context.Context) int {
	affected, err := niu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (niu *NewsItemUpdate) Exec(ctx context.Context) error {
	_, err := niu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (niu *NewsItemUpdate) ExecX(ctx context.Context) {
	if err := niu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (niu *NewsItemUpdate) defaults() {
	if _, ok := niu.mutation.UpdateTime(); !ok {
		v := newsitem.UpdateDefaultUpdateTime()
		niu.mutation.SetUpdateTime(v)
	}
}

func (niu *NewsItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(newsitem.Table, newsitem.Columns, sqlgraph.NewFieldSpec(newsitem.FieldID, field.TypeUUID))
	if ps := niu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := niu.mutation.UpdateTime(); ok {
		_spec.SetField(newsitem.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := niu.mutation.RssGUID(); ok {
		_spec.SetField(newsitem.FieldRssGUID, field.TypeString, value)
	}
	if value, ok := niu.mutation.Title(); ok {
		_spec.SetField(newsitem.FieldTitle, field.TypeString, value)
	}
	if value, ok := niu.mutation.Description(); ok {
		_spec.SetField(newsitem.FieldDescription, field.TypeString, value)
	}
	if value, ok := niu.mutation.Content(); ok {
		_spec.SetField(newsitem.FieldContent, field.TypeString, value)
	}
	if value, ok := niu.mutation.Link(); ok {
		_spec.SetField(newsitem.FieldLink, field.TypeString, value)
	}
	if value, ok := niu.mutation.Links(); ok {
		_spec.SetField(newsitem.FieldLinks, field.TypeJSON, value)
	}
	if value, ok := niu.mutation.AppendedLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, newsitem.FieldLinks, value)
		})
	}
	if value, ok := niu.mutation.ItemPublishTime(); ok {
		_spec.SetField(newsitem.FieldItemPublishTime, field.TypeTime, value)
	}
	if niu.mutation.ItemPublishTimeCleared() {
		_spec.ClearField(newsitem.FieldItemPublishTime, field.TypeTime)
	}
	if value, ok := niu.mutation.ItemUpdateTime(); ok {
		_spec.SetField(newsitem.FieldItemUpdateTime, field.TypeTime, value)
	}
	if niu.mutation.ItemUpdateTimeCleared() {
		_spec.ClearField(newsitem.FieldItemUpdateTime, field.TypeTime)
	}
	if value, ok := niu.mutation.ImageURL(); ok {
		_spec.SetField(newsitem.FieldImageURL, field.TypeString, value)
	}
	if value, ok := niu.mutation.ImageTitle(); ok {
		_spec.SetField(newsitem.FieldImageTitle, field.TypeString, value)
	}
	if value, ok := niu.mutation.Categories(); ok {
		_spec.SetField(newsitem.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := niu.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, newsitem.FieldCategories, value)
		})
	}
	if value, ok := niu.mutation.Blur(); ok {
		_spec.SetField(newsitem.FieldBlur, field.TypeBool, value)
	}
	if niu.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   newsitem.AuthorsTable,
			Columns: newsitem.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rssauthor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := niu.mutation.RemovedAuthorsIDs(); len(nodes) > 0 && !niu.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   newsitem.AuthorsTable,
			Columns: newsitem.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rssauthor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := niu.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   newsitem.AuthorsTable,
			Columns: newsitem.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rssauthor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if niu.mutation.FeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   newsitem.FeedTable,
			Columns: []string{newsitem.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rssfeed.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := niu.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   newsitem.FeedTable,
			Columns: []string{newsitem.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rssfeed.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, niu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{newsitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	niu.mutation.done = true
	return n, nil
}

// NewsItemUpdateOne is the builder for updating a single NewsItem entity.
type NewsItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NewsItemMutation
}

// SetUpdateTime sets the "update_time" field.
func (niuo *NewsItemUpdateOne) SetUpdateTime(t time.Time) *NewsItemUpdateOne {
	niuo.mutation.SetUpdateTime(t)
	return niuo
}

// SetRssGUID sets the "rss_guid" field.
func (niuo *NewsItemUpdateOne) SetRssGUID(s string) *NewsItemUpdateOne {
	niuo.mutation.SetRssGUID(s)
	return niuo
}

// SetNillableRssGUID sets the "rss_guid" field if the given value is not nil.
func (niuo *NewsItemUpdateOne) SetNillableRssGUID(s *string) *NewsItemUpdateOne {
	if s != nil {
		niuo.SetRssGUID(*s)
	}
	return niuo
}

// SetTitle sets the "title" field.
func (niuo *NewsItemUpdateOne) SetTitle(s string) *NewsItemUpdateOne {
	niuo.mutation.SetTitle(s)
	return niuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (niuo *NewsItemUpdateOne) SetNillableTitle(s *string) *NewsItemUpdateOne {
	if s != nil {
		niuo.SetTitle(*s)
	}
	return niuo
}

// SetDescription sets the "description" field.
func (niuo *NewsItemUpdateOne) SetDescription(s string) *NewsItemUpdateOne {
	niuo.mutation.SetDescription(s)
	return niuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (niuo *NewsItemUpdateOne) SetNillableDescription(s *string) *NewsItemUpdateOne {
	if s != nil {
		niuo.SetDescription(*s)
	}
	return niuo
}

// SetContent sets the "content" field.
func (niuo *NewsItemUpdateOne) SetContent(s string) *NewsItemUpdateOne {
	niuo.mutation.SetContent(s)
	return niuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (niuo *NewsItemUpdateOne) SetNillableContent(s *string) *NewsItemUpdateOne {
	if s != nil {
		niuo.SetContent(*s)
	}
	return niuo
}

// SetLink sets the "link" field.
func (niuo *NewsItemUpdateOne) SetLink(s string) *NewsItemUpdateOne {
	niuo.mutation.SetLink(s)
	return niuo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (niuo *NewsItemUpdateOne) SetNillableLink(s *string) *NewsItemUpdateOne {
	if s != nil {
		niuo.SetLink(*s)
	}
	return niuo
}

// SetLinks sets the "links" field.
func (niuo *NewsItemUpdateOne) SetLinks(s []string) *NewsItemUpdateOne {
	niuo.mutation.SetLinks(s)
	return niuo
}

// AppendLinks appends s to the "links" field.
func (niuo *NewsItemUpdateOne) AppendLinks(s []string) *NewsItemUpdateOne {
	niuo.mutation.AppendLinks(s)
	return niuo
}

// SetItemPublishTime sets the "item_publish_time" field.
func (niuo *NewsItemUpdateOne) SetItemPublishTime(t time.Time) *NewsItemUpdateOne {
	niuo.mutation.SetItemPublishTime(t)
	return niuo
}

// SetNillableItemPublishTime sets the "item_publish_time" field if the given value is not nil.
func (niuo *NewsItemUpdateOne) SetNillableItemPublishTime(t *time.Time) *NewsItemUpdateOne {
	if t != nil {
		niuo.SetItemPublishTime(*t)
	}
	return niuo
}

// ClearItemPublishTime clears the value of the "item_publish_time" field.
func (niuo *NewsItemUpdateOne) ClearItemPublishTime() *NewsItemUpdateOne {
	niuo.mutation.ClearItemPublishTime()
	return niuo
}

// SetItemUpdateTime sets the "item_update_time" field.
func (niuo *NewsItemUpdateOne) SetItemUpdateTime(t time.Time) *NewsItemUpdateOne {
	niuo.mutation.SetItemUpdateTime(t)
	return niuo
}

// SetNillableItemUpdateTime sets the "item_update_time" field if the given value is not nil.
func (niuo *NewsItemUpdateOne) SetNillableItemUpdateTime(t *time.Time) *NewsItemUpdateOne {
	if t != nil {
		niuo.SetItemUpdateTime(*t)
	}
	return niuo
}

// ClearItemUpdateTime clears the value of the "item_update_time" field.
func (niuo *NewsItemUpdateOne) ClearItemUpdateTime() *NewsItemUpdateOne {
	niuo.mutation.ClearItemUpdateTime()
	return niuo
}

// SetImageURL sets the "image_url" field.
func (niuo *NewsItemUpdateOne) SetImageURL(s string) *NewsItemUpdateOne {
	niuo.mutation.SetImageURL(s)
	return niuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (niuo *NewsItemUpdateOne) SetNillableImageURL(s *string) *NewsItemUpdateOne {
	if s != nil {
		niuo.SetImageURL(*s)
	}
	return niuo
}

// SetImageTitle sets the "image_title" field.
func (niuo *NewsItemUpdateOne) SetImageTitle(s string) *NewsItemUpdateOne {
	niuo.mutation.SetImageTitle(s)
	return niuo
}

// SetNillableImageTitle sets the "image_title" field if the given value is not nil.
func (niuo *NewsItemUpdateOne) SetNillableImageTitle(s *string) *NewsItemUpdateOne {
	if s != nil {
		niuo.SetImageTitle(*s)
	}
	return niuo
}

// SetCategories sets the "categories" field.
func (niuo *NewsItemUpdateOne) SetCategories(s []string) *NewsItemUpdateOne {
	niuo.mutation.SetCategories(s)
	return niuo
}

// AppendCategories appends s to the "categories" field.
func (niuo *NewsItemUpdateOne) AppendCategories(s []string) *NewsItemUpdateOne {
	niuo.mutation.AppendCategories(s)
	return niuo
}

// SetBlur sets the "blur" field.
func (niuo *NewsItemUpdateOne) SetBlur(b bool) *NewsItemUpdateOne {
	niuo.mutation.SetBlur(b)
	return niuo
}

// SetNillableBlur sets the "blur" field if the given value is not nil.
func (niuo *NewsItemUpdateOne) SetNillableBlur(b *bool) *NewsItemUpdateOne {
	if b != nil {
		niuo.SetBlur(*b)
	}
	return niuo
}

// AddAuthorIDs adds the "authors" edge to the RSSAuthor entity by IDs.
func (niuo *NewsItemUpdateOne) AddAuthorIDs(ids ...uuid.UUID) *NewsItemUpdateOne {
	niuo.mutation.AddAuthorIDs(ids...)
	return niuo
}

// AddAuthors adds the "authors" edges to the RSSAuthor entity.
func (niuo *NewsItemUpdateOne) AddAuthors(r ...*RSSAuthor) *NewsItemUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return niuo.AddAuthorIDs(ids...)
}

// SetFeedID sets the "feed" edge to the RSSFeed entity by ID.
func (niuo *NewsItemUpdateOne) SetFeedID(id uuid.UUID) *NewsItemUpdateOne {
	niuo.mutation.SetFeedID(id)
	return niuo
}

// SetNillableFeedID sets the "feed" edge to the RSSFeed entity by ID if the given value is not nil.
func (niuo *NewsItemUpdateOne) SetNillableFeedID(id *uuid.UUID) *NewsItemUpdateOne {
	if id != nil {
		niuo = niuo.SetFeedID(*id)
	}
	return niuo
}

// SetFeed sets the "feed" edge to the RSSFeed entity.
func (niuo *NewsItemUpdateOne) SetFeed(r *RSSFeed) *NewsItemUpdateOne {
	return niuo.SetFeedID(r.ID)
}

// Mutation returns the NewsItemMutation object of the builder.
func (niuo *NewsItemUpdateOne) Mutation() *NewsItemMutation {
	return niuo.mutation
}

// ClearAuthors clears all "authors" edges to the RSSAuthor entity.
func (niuo *NewsItemUpdateOne) ClearAuthors() *NewsItemUpdateOne {
	niuo.mutation.ClearAuthors()
	return niuo
}

// RemoveAuthorIDs removes the "authors" edge to RSSAuthor entities by IDs.
func (niuo *NewsItemUpdateOne) RemoveAuthorIDs(ids ...uuid.UUID) *NewsItemUpdateOne {
	niuo.mutation.RemoveAuthorIDs(ids...)
	return niuo
}

// RemoveAuthors removes "authors" edges to RSSAuthor entities.
func (niuo *NewsItemUpdateOne) RemoveAuthors(r ...*RSSAuthor) *NewsItemUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return niuo.RemoveAuthorIDs(ids...)
}

// ClearFeed clears the "feed" edge to the RSSFeed entity.
func (niuo *NewsItemUpdateOne) ClearFeed() *NewsItemUpdateOne {
	niuo.mutation.ClearFeed()
	return niuo
}

// Where appends a list predicates to the NewsItemUpdate builder.
func (niuo *NewsItemUpdateOne) Where(ps ...predicate.NewsItem) *NewsItemUpdateOne {
	niuo.mutation.Where(ps...)
	return niuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (niuo *NewsItemUpdateOne) Select(field string, fields ...string) *NewsItemUpdateOne {
	niuo.fields = append([]string{field}, fields...)
	return niuo
}

// Save executes the query and returns the updated NewsItem entity.
func (niuo *NewsItemUpdateOne) Save(ctx context.Context) (*NewsItem, error) {
	niuo.defaults()
	return withHooks(ctx, niuo.sqlSave, niuo.mutation, niuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (niuo *NewsItemUpdateOne) SaveX(ctx context.Context) *NewsItem {
	node, err := niuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (niuo *NewsItemUpdateOne) Exec(ctx context.Context) error {
	_, err := niuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (niuo *NewsItemUpdateOne) ExecX(ctx context.Context) {
	if err := niuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (niuo *NewsItemUpdateOne) defaults() {
	if _, ok := niuo.mutation.UpdateTime(); !ok {
		v := newsitem.UpdateDefaultUpdateTime()
		niuo.mutation.SetUpdateTime(v)
	}
}

func (niuo *NewsItemUpdateOne) sqlSave(ctx context.Context) (_node *NewsItem, err error) {
	_spec := sqlgraph.NewUpdateSpec(newsitem.Table, newsitem.Columns, sqlgraph.NewFieldSpec(newsitem.FieldID, field.TypeUUID))
	id, ok := niuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`build: missing "NewsItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := niuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, newsitem.FieldID)
		for _, f := range fields {
			if !newsitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("build: invalid field %q for query", f)}
			}
			if f != newsitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := niuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := niuo.mutation.UpdateTime(); ok {
		_spec.SetField(newsitem.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := niuo.mutation.RssGUID(); ok {
		_spec.SetField(newsitem.FieldRssGUID, field.TypeString, value)
	}
	if value, ok := niuo.mutation.Title(); ok {
		_spec.SetField(newsitem.FieldTitle, field.TypeString, value)
	}
	if value, ok := niuo.mutation.Description(); ok {
		_spec.SetField(newsitem.FieldDescription, field.TypeString, value)
	}
	if value, ok := niuo.mutation.Content(); ok {
		_spec.SetField(newsitem.FieldContent, field.TypeString, value)
	}
	if value, ok := niuo.mutation.Link(); ok {
		_spec.SetField(newsitem.FieldLink, field.TypeString, value)
	}
	if value, ok := niuo.mutation.Links(); ok {
		_spec.SetField(newsitem.FieldLinks, field.TypeJSON, value)
	}
	if value, ok := niuo.mutation.AppendedLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, newsitem.FieldLinks, value)
		})
	}
	if value, ok := niuo.mutation.ItemPublishTime(); ok {
		_spec.SetField(newsitem.FieldItemPublishTime, field.TypeTime, value)
	}
	if niuo.mutation.ItemPublishTimeCleared() {
		_spec.ClearField(newsitem.FieldItemPublishTime, field.TypeTime)
	}
	if value, ok := niuo.mutation.ItemUpdateTime(); ok {
		_spec.SetField(newsitem.FieldItemUpdateTime, field.TypeTime, value)
	}
	if niuo.mutation.ItemUpdateTimeCleared() {
		_spec.ClearField(newsitem.FieldItemUpdateTime, field.TypeTime)
	}
	if value, ok := niuo.mutation.ImageURL(); ok {
		_spec.SetField(newsitem.FieldImageURL, field.TypeString, value)
	}
	if value, ok := niuo.mutation.ImageTitle(); ok {
		_spec.SetField(newsitem.FieldImageTitle, field.TypeString, value)
	}
	if value, ok := niuo.mutation.Categories(); ok {
		_spec.SetField(newsitem.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := niuo.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, newsitem.FieldCategories, value)
		})
	}
	if value, ok := niuo.mutation.Blur(); ok {
		_spec.SetField(newsitem.FieldBlur, field.TypeBool, value)
	}
	if niuo.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   newsitem.AuthorsTable,
			Columns: newsitem.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rssauthor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := niuo.mutation.RemovedAuthorsIDs(); len(nodes) > 0 && !niuo.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   newsitem.AuthorsTable,
			Columns: newsitem.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rssauthor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := niuo.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   newsitem.AuthorsTable,
			Columns: newsitem.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rssauthor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if niuo.mutation.FeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   newsitem.FeedTable,
			Columns: []string{newsitem.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rssfeed.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := niuo.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   newsitem.FeedTable,
			Columns: []string{newsitem.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rssfeed.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NewsItem{config: niuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, niuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{newsitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	niuo.mutation.done = true
	return _node, nil
}
