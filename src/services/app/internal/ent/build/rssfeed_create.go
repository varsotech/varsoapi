// Code generated by ent, DO NOT EDIT.

package build

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/newsitem"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/organization"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/rssfeed"
)

// RSSFeedCreate is the builder for creating a RSSFeed entity.
type RSSFeedCreate struct {
	config
	mutation *RSSFeedMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (rfc *RSSFeedCreate) SetCreateTime(t time.Time) *RSSFeedCreate {
	rfc.mutation.SetCreateTime(t)
	return rfc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rfc *RSSFeedCreate) SetNillableCreateTime(t *time.Time) *RSSFeedCreate {
	if t != nil {
		rfc.SetCreateTime(*t)
	}
	return rfc
}

// SetUpdateTime sets the "update_time" field.
func (rfc *RSSFeedCreate) SetUpdateTime(t time.Time) *RSSFeedCreate {
	rfc.mutation.SetUpdateTime(t)
	return rfc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rfc *RSSFeedCreate) SetNillableUpdateTime(t *time.Time) *RSSFeedCreate {
	if t != nil {
		rfc.SetUpdateTime(*t)
	}
	return rfc
}

// SetRssFeedURL sets the "rss_feed_url" field.
func (rfc *RSSFeedCreate) SetRssFeedURL(s string) *RSSFeedCreate {
	rfc.mutation.SetRssFeedURL(s)
	return rfc
}

// SetID sets the "id" field.
func (rfc *RSSFeedCreate) SetID(u uuid.UUID) *RSSFeedCreate {
	rfc.mutation.SetID(u)
	return rfc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rfc *RSSFeedCreate) SetNillableID(u *uuid.UUID) *RSSFeedCreate {
	if u != nil {
		rfc.SetID(*u)
	}
	return rfc
}

// AddItemIDs adds the "items" edge to the NewsItem entity by IDs.
func (rfc *RSSFeedCreate) AddItemIDs(ids ...uuid.UUID) *RSSFeedCreate {
	rfc.mutation.AddItemIDs(ids...)
	return rfc
}

// AddItems adds the "items" edges to the NewsItem entity.
func (rfc *RSSFeedCreate) AddItems(n ...*NewsItem) *RSSFeedCreate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return rfc.AddItemIDs(ids...)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (rfc *RSSFeedCreate) SetOrganizationID(id uuid.UUID) *RSSFeedCreate {
	rfc.mutation.SetOrganizationID(id)
	return rfc
}

// SetNillableOrganizationID sets the "organization" edge to the Organization entity by ID if the given value is not nil.
func (rfc *RSSFeedCreate) SetNillableOrganizationID(id *uuid.UUID) *RSSFeedCreate {
	if id != nil {
		rfc = rfc.SetOrganizationID(*id)
	}
	return rfc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (rfc *RSSFeedCreate) SetOrganization(o *Organization) *RSSFeedCreate {
	return rfc.SetOrganizationID(o.ID)
}

// Mutation returns the RSSFeedMutation object of the builder.
func (rfc *RSSFeedCreate) Mutation() *RSSFeedMutation {
	return rfc.mutation
}

// Save creates the RSSFeed in the database.
func (rfc *RSSFeedCreate) Save(ctx context.Context) (*RSSFeed, error) {
	rfc.defaults()
	return withHooks(ctx, rfc.sqlSave, rfc.mutation, rfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rfc *RSSFeedCreate) SaveX(ctx context.Context) *RSSFeed {
	v, err := rfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rfc *RSSFeedCreate) Exec(ctx context.Context) error {
	_, err := rfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfc *RSSFeedCreate) ExecX(ctx context.Context) {
	if err := rfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rfc *RSSFeedCreate) defaults() {
	if _, ok := rfc.mutation.CreateTime(); !ok {
		v := rssfeed.DefaultCreateTime()
		rfc.mutation.SetCreateTime(v)
	}
	if _, ok := rfc.mutation.UpdateTime(); !ok {
		v := rssfeed.DefaultUpdateTime()
		rfc.mutation.SetUpdateTime(v)
	}
	if _, ok := rfc.mutation.ID(); !ok {
		v := rssfeed.DefaultID()
		rfc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rfc *RSSFeedCreate) check() error {
	if _, ok := rfc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`build: missing required field "RSSFeed.create_time"`)}
	}
	if _, ok := rfc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`build: missing required field "RSSFeed.update_time"`)}
	}
	if _, ok := rfc.mutation.RssFeedURL(); !ok {
		return &ValidationError{Name: "rss_feed_url", err: errors.New(`build: missing required field "RSSFeed.rss_feed_url"`)}
	}
	return nil
}

func (rfc *RSSFeedCreate) sqlSave(ctx context.Context) (*RSSFeed, error) {
	if err := rfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rfc.mutation.id = &_node.ID
	rfc.mutation.done = true
	return _node, nil
}

func (rfc *RSSFeedCreate) createSpec() (*RSSFeed, *sqlgraph.CreateSpec) {
	var (
		_node = &RSSFeed{config: rfc.config}
		_spec = sqlgraph.NewCreateSpec(rssfeed.Table, sqlgraph.NewFieldSpec(rssfeed.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rfc.conflict
	if id, ok := rfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rfc.mutation.CreateTime(); ok {
		_spec.SetField(rssfeed.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := rfc.mutation.UpdateTime(); ok {
		_spec.SetField(rssfeed.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := rfc.mutation.RssFeedURL(); ok {
		_spec.SetField(rssfeed.FieldRssFeedURL, field.TypeString, value)
		_node.RssFeedURL = value
	}
	if nodes := rfc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rssfeed.ItemsTable,
			Columns: []string{rssfeed.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newsitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rfc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rssfeed.OrganizationTable,
			Columns: []string{rssfeed.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.organization_feeds = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RSSFeed.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RSSFeedUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (rfc *RSSFeedCreate) OnConflict(opts ...sql.ConflictOption) *RSSFeedUpsertOne {
	rfc.conflict = opts
	return &RSSFeedUpsertOne{
		create: rfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RSSFeed.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rfc *RSSFeedCreate) OnConflictColumns(columns ...string) *RSSFeedUpsertOne {
	rfc.conflict = append(rfc.conflict, sql.ConflictColumns(columns...))
	return &RSSFeedUpsertOne{
		create: rfc,
	}
}

type (
	// RSSFeedUpsertOne is the builder for "upsert"-ing
	//  one RSSFeed node.
	RSSFeedUpsertOne struct {
		create *RSSFeedCreate
	}

	// RSSFeedUpsert is the "OnConflict" setter.
	RSSFeedUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *RSSFeedUpsert) SetUpdateTime(v time.Time) *RSSFeedUpsert {
	u.Set(rssfeed.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *RSSFeedUpsert) UpdateUpdateTime() *RSSFeedUpsert {
	u.SetExcluded(rssfeed.FieldUpdateTime)
	return u
}

// SetRssFeedURL sets the "rss_feed_url" field.
func (u *RSSFeedUpsert) SetRssFeedURL(v string) *RSSFeedUpsert {
	u.Set(rssfeed.FieldRssFeedURL, v)
	return u
}

// UpdateRssFeedURL sets the "rss_feed_url" field to the value that was provided on create.
func (u *RSSFeedUpsert) UpdateRssFeedURL() *RSSFeedUpsert {
	u.SetExcluded(rssfeed.FieldRssFeedURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RSSFeed.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rssfeed.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RSSFeedUpsertOne) UpdateNewValues() *RSSFeedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(rssfeed.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(rssfeed.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RSSFeed.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RSSFeedUpsertOne) Ignore() *RSSFeedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RSSFeedUpsertOne) DoNothing() *RSSFeedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RSSFeedCreate.OnConflict
// documentation for more info.
func (u *RSSFeedUpsertOne) Update(set func(*RSSFeedUpsert)) *RSSFeedUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RSSFeedUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *RSSFeedUpsertOne) SetUpdateTime(v time.Time) *RSSFeedUpsertOne {
	return u.Update(func(s *RSSFeedUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *RSSFeedUpsertOne) UpdateUpdateTime() *RSSFeedUpsertOne {
	return u.Update(func(s *RSSFeedUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetRssFeedURL sets the "rss_feed_url" field.
func (u *RSSFeedUpsertOne) SetRssFeedURL(v string) *RSSFeedUpsertOne {
	return u.Update(func(s *RSSFeedUpsert) {
		s.SetRssFeedURL(v)
	})
}

// UpdateRssFeedURL sets the "rss_feed_url" field to the value that was provided on create.
func (u *RSSFeedUpsertOne) UpdateRssFeedURL() *RSSFeedUpsertOne {
	return u.Update(func(s *RSSFeedUpsert) {
		s.UpdateRssFeedURL()
	})
}

// Exec executes the query.
func (u *RSSFeedUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("build: missing options for RSSFeedCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RSSFeedUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RSSFeedUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("build: RSSFeedUpsertOne.ID is not supported by MySQL driver. Use RSSFeedUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RSSFeedUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RSSFeedCreateBulk is the builder for creating many RSSFeed entities in bulk.
type RSSFeedCreateBulk struct {
	config
	err      error
	builders []*RSSFeedCreate
	conflict []sql.ConflictOption
}

// Save creates the RSSFeed entities in the database.
func (rfcb *RSSFeedCreateBulk) Save(ctx context.Context) ([]*RSSFeed, error) {
	if rfcb.err != nil {
		return nil, rfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rfcb.builders))
	nodes := make([]*RSSFeed, len(rfcb.builders))
	mutators := make([]Mutator, len(rfcb.builders))
	for i := range rfcb.builders {
		func(i int, root context.Context) {
			builder := rfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RSSFeedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rfcb *RSSFeedCreateBulk) SaveX(ctx context.Context) []*RSSFeed {
	v, err := rfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rfcb *RSSFeedCreateBulk) Exec(ctx context.Context) error {
	_, err := rfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfcb *RSSFeedCreateBulk) ExecX(ctx context.Context) {
	if err := rfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RSSFeed.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RSSFeedUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (rfcb *RSSFeedCreateBulk) OnConflict(opts ...sql.ConflictOption) *RSSFeedUpsertBulk {
	rfcb.conflict = opts
	return &RSSFeedUpsertBulk{
		create: rfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RSSFeed.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rfcb *RSSFeedCreateBulk) OnConflictColumns(columns ...string) *RSSFeedUpsertBulk {
	rfcb.conflict = append(rfcb.conflict, sql.ConflictColumns(columns...))
	return &RSSFeedUpsertBulk{
		create: rfcb,
	}
}

// RSSFeedUpsertBulk is the builder for "upsert"-ing
// a bulk of RSSFeed nodes.
type RSSFeedUpsertBulk struct {
	create *RSSFeedCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RSSFeed.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rssfeed.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RSSFeedUpsertBulk) UpdateNewValues() *RSSFeedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(rssfeed.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(rssfeed.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RSSFeed.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RSSFeedUpsertBulk) Ignore() *RSSFeedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RSSFeedUpsertBulk) DoNothing() *RSSFeedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RSSFeedCreateBulk.OnConflict
// documentation for more info.
func (u *RSSFeedUpsertBulk) Update(set func(*RSSFeedUpsert)) *RSSFeedUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RSSFeedUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *RSSFeedUpsertBulk) SetUpdateTime(v time.Time) *RSSFeedUpsertBulk {
	return u.Update(func(s *RSSFeedUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *RSSFeedUpsertBulk) UpdateUpdateTime() *RSSFeedUpsertBulk {
	return u.Update(func(s *RSSFeedUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetRssFeedURL sets the "rss_feed_url" field.
func (u *RSSFeedUpsertBulk) SetRssFeedURL(v string) *RSSFeedUpsertBulk {
	return u.Update(func(s *RSSFeedUpsert) {
		s.SetRssFeedURL(v)
	})
}

// UpdateRssFeedURL sets the "rss_feed_url" field to the value that was provided on create.
func (u *RSSFeedUpsertBulk) UpdateRssFeedURL() *RSSFeedUpsertBulk {
	return u.Update(func(s *RSSFeedUpsert) {
		s.UpdateRssFeedURL()
	})
}

// Exec executes the query.
func (u *RSSFeedUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("build: OnConflict was set for builder %d. Set it on the RSSFeedCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("build: missing options for RSSFeedCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RSSFeedUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
