// Code generated by ent, DO NOT EDIT.

package build

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/newsitem"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/predicate"
)

// NewsItemDelete is the builder for deleting a NewsItem entity.
type NewsItemDelete struct {
	config
	hooks    []Hook
	mutation *NewsItemMutation
}

// Where appends a list predicates to the NewsItemDelete builder.
func (nid *NewsItemDelete) Where(ps ...predicate.NewsItem) *NewsItemDelete {
	nid.mutation.Where(ps...)
	return nid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (nid *NewsItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, nid.sqlExec, nid.mutation, nid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (nid *NewsItemDelete) ExecX(ctx context.Context) int {
	n, err := nid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (nid *NewsItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(newsitem.Table, sqlgraph.NewFieldSpec(newsitem.FieldID, field.TypeUUID))
	if ps := nid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, nid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	nid.mutation.done = true
	return affected, err
}

// NewsItemDeleteOne is the builder for deleting a single NewsItem entity.
type NewsItemDeleteOne struct {
	nid *NewsItemDelete
}

// Where appends a list predicates to the NewsItemDelete builder.
func (nido *NewsItemDeleteOne) Where(ps ...predicate.NewsItem) *NewsItemDeleteOne {
	nido.nid.mutation.Where(ps...)
	return nido
}

// Exec executes the deletion query.
func (nido *NewsItemDeleteOne) Exec(ctx context.Context) error {
	n, err := nido.nid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{newsitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (nido *NewsItemDeleteOne) ExecX(ctx context.Context) {
	if err := nido.Exec(ctx); err != nil {
		panic(err)
	}
}
