// Code generated by ent, DO NOT EDIT.

package build

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/newsitem"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/organization"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/person"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/rssauthor"
)

// RSSAuthorCreate is the builder for creating a RSSAuthor entity.
type RSSAuthorCreate struct {
	config
	mutation *RSSAuthorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (rac *RSSAuthorCreate) SetCreateTime(t time.Time) *RSSAuthorCreate {
	rac.mutation.SetCreateTime(t)
	return rac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rac *RSSAuthorCreate) SetNillableCreateTime(t *time.Time) *RSSAuthorCreate {
	if t != nil {
		rac.SetCreateTime(*t)
	}
	return rac
}

// SetEmail sets the "email" field.
func (rac *RSSAuthorCreate) SetEmail(s string) *RSSAuthorCreate {
	rac.mutation.SetEmail(s)
	return rac
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (rac *RSSAuthorCreate) SetNillableEmail(s *string) *RSSAuthorCreate {
	if s != nil {
		rac.SetEmail(*s)
	}
	return rac
}

// SetName sets the "name" field.
func (rac *RSSAuthorCreate) SetName(s string) *RSSAuthorCreate {
	rac.mutation.SetName(s)
	return rac
}

// SetID sets the "id" field.
func (rac *RSSAuthorCreate) SetID(u uuid.UUID) *RSSAuthorCreate {
	rac.mutation.SetID(u)
	return rac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rac *RSSAuthorCreate) SetNillableID(u *uuid.UUID) *RSSAuthorCreate {
	if u != nil {
		rac.SetID(*u)
	}
	return rac
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (rac *RSSAuthorCreate) SetPersonID(id uuid.UUID) *RSSAuthorCreate {
	rac.mutation.SetPersonID(id)
	return rac
}

// SetNillablePersonID sets the "person" edge to the Person entity by ID if the given value is not nil.
func (rac *RSSAuthorCreate) SetNillablePersonID(id *uuid.UUID) *RSSAuthorCreate {
	if id != nil {
		rac = rac.SetPersonID(*id)
	}
	return rac
}

// SetPerson sets the "person" edge to the Person entity.
func (rac *RSSAuthorCreate) SetPerson(p *Person) *RSSAuthorCreate {
	return rac.SetPersonID(p.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (rac *RSSAuthorCreate) SetOrganizationID(id uuid.UUID) *RSSAuthorCreate {
	rac.mutation.SetOrganizationID(id)
	return rac
}

// SetNillableOrganizationID sets the "organization" edge to the Organization entity by ID if the given value is not nil.
func (rac *RSSAuthorCreate) SetNillableOrganizationID(id *uuid.UUID) *RSSAuthorCreate {
	if id != nil {
		rac = rac.SetOrganizationID(*id)
	}
	return rac
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (rac *RSSAuthorCreate) SetOrganization(o *Organization) *RSSAuthorCreate {
	return rac.SetOrganizationID(o.ID)
}

// AddNewsitemIDs adds the "newsitem" edge to the NewsItem entity by IDs.
func (rac *RSSAuthorCreate) AddNewsitemIDs(ids ...uuid.UUID) *RSSAuthorCreate {
	rac.mutation.AddNewsitemIDs(ids...)
	return rac
}

// AddNewsitem adds the "newsitem" edges to the NewsItem entity.
func (rac *RSSAuthorCreate) AddNewsitem(n ...*NewsItem) *RSSAuthorCreate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return rac.AddNewsitemIDs(ids...)
}

// Mutation returns the RSSAuthorMutation object of the builder.
func (rac *RSSAuthorCreate) Mutation() *RSSAuthorMutation {
	return rac.mutation
}

// Save creates the RSSAuthor in the database.
func (rac *RSSAuthorCreate) Save(ctx context.Context) (*RSSAuthor, error) {
	rac.defaults()
	return withHooks(ctx, rac.sqlSave, rac.mutation, rac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rac *RSSAuthorCreate) SaveX(ctx context.Context) *RSSAuthor {
	v, err := rac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rac *RSSAuthorCreate) Exec(ctx context.Context) error {
	_, err := rac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rac *RSSAuthorCreate) ExecX(ctx context.Context) {
	if err := rac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rac *RSSAuthorCreate) defaults() {
	if _, ok := rac.mutation.CreateTime(); !ok {
		v := rssauthor.DefaultCreateTime()
		rac.mutation.SetCreateTime(v)
	}
	if _, ok := rac.mutation.ID(); !ok {
		v := rssauthor.DefaultID()
		rac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rac *RSSAuthorCreate) check() error {
	if _, ok := rac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`build: missing required field "RSSAuthor.create_time"`)}
	}
	if _, ok := rac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`build: missing required field "RSSAuthor.name"`)}
	}
	return nil
}

func (rac *RSSAuthorCreate) sqlSave(ctx context.Context) (*RSSAuthor, error) {
	if err := rac.check(); err != nil {
		return nil, err
	}
	_node, _spec := rac.createSpec()
	if err := sqlgraph.CreateNode(ctx, rac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rac.mutation.id = &_node.ID
	rac.mutation.done = true
	return _node, nil
}

func (rac *RSSAuthorCreate) createSpec() (*RSSAuthor, *sqlgraph.CreateSpec) {
	var (
		_node = &RSSAuthor{config: rac.config}
		_spec = sqlgraph.NewCreateSpec(rssauthor.Table, sqlgraph.NewFieldSpec(rssauthor.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rac.conflict
	if id, ok := rac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rac.mutation.CreateTime(); ok {
		_spec.SetField(rssauthor.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := rac.mutation.Email(); ok {
		_spec.SetField(rssauthor.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := rac.mutation.Name(); ok {
		_spec.SetField(rssauthor.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := rac.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rssauthor.PersonTable,
			Columns: []string{rssauthor.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.rss_author_person = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rac.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rssauthor.OrganizationTable,
			Columns: []string{rssauthor.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.rss_author_organization = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rac.mutation.NewsitemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rssauthor.NewsitemTable,
			Columns: rssauthor.NewsitemPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newsitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RSSAuthor.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RSSAuthorUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (rac *RSSAuthorCreate) OnConflict(opts ...sql.ConflictOption) *RSSAuthorUpsertOne {
	rac.conflict = opts
	return &RSSAuthorUpsertOne{
		create: rac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RSSAuthor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rac *RSSAuthorCreate) OnConflictColumns(columns ...string) *RSSAuthorUpsertOne {
	rac.conflict = append(rac.conflict, sql.ConflictColumns(columns...))
	return &RSSAuthorUpsertOne{
		create: rac,
	}
}

type (
	// RSSAuthorUpsertOne is the builder for "upsert"-ing
	//  one RSSAuthor node.
	RSSAuthorUpsertOne struct {
		create *RSSAuthorCreate
	}

	// RSSAuthorUpsert is the "OnConflict" setter.
	RSSAuthorUpsert struct {
		*sql.UpdateSet
	}
)

// SetEmail sets the "email" field.
func (u *RSSAuthorUpsert) SetEmail(v string) *RSSAuthorUpsert {
	u.Set(rssauthor.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *RSSAuthorUpsert) UpdateEmail() *RSSAuthorUpsert {
	u.SetExcluded(rssauthor.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *RSSAuthorUpsert) ClearEmail() *RSSAuthorUpsert {
	u.SetNull(rssauthor.FieldEmail)
	return u
}

// SetName sets the "name" field.
func (u *RSSAuthorUpsert) SetName(v string) *RSSAuthorUpsert {
	u.Set(rssauthor.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RSSAuthorUpsert) UpdateName() *RSSAuthorUpsert {
	u.SetExcluded(rssauthor.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RSSAuthor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rssauthor.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RSSAuthorUpsertOne) UpdateNewValues() *RSSAuthorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(rssauthor.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(rssauthor.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RSSAuthor.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RSSAuthorUpsertOne) Ignore() *RSSAuthorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RSSAuthorUpsertOne) DoNothing() *RSSAuthorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RSSAuthorCreate.OnConflict
// documentation for more info.
func (u *RSSAuthorUpsertOne) Update(set func(*RSSAuthorUpsert)) *RSSAuthorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RSSAuthorUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "email" field.
func (u *RSSAuthorUpsertOne) SetEmail(v string) *RSSAuthorUpsertOne {
	return u.Update(func(s *RSSAuthorUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *RSSAuthorUpsertOne) UpdateEmail() *RSSAuthorUpsertOne {
	return u.Update(func(s *RSSAuthorUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *RSSAuthorUpsertOne) ClearEmail() *RSSAuthorUpsertOne {
	return u.Update(func(s *RSSAuthorUpsert) {
		s.ClearEmail()
	})
}

// SetName sets the "name" field.
func (u *RSSAuthorUpsertOne) SetName(v string) *RSSAuthorUpsertOne {
	return u.Update(func(s *RSSAuthorUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RSSAuthorUpsertOne) UpdateName() *RSSAuthorUpsertOne {
	return u.Update(func(s *RSSAuthorUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *RSSAuthorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("build: missing options for RSSAuthorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RSSAuthorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RSSAuthorUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("build: RSSAuthorUpsertOne.ID is not supported by MySQL driver. Use RSSAuthorUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RSSAuthorUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RSSAuthorCreateBulk is the builder for creating many RSSAuthor entities in bulk.
type RSSAuthorCreateBulk struct {
	config
	err      error
	builders []*RSSAuthorCreate
	conflict []sql.ConflictOption
}

// Save creates the RSSAuthor entities in the database.
func (racb *RSSAuthorCreateBulk) Save(ctx context.Context) ([]*RSSAuthor, error) {
	if racb.err != nil {
		return nil, racb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(racb.builders))
	nodes := make([]*RSSAuthor, len(racb.builders))
	mutators := make([]Mutator, len(racb.builders))
	for i := range racb.builders {
		func(i int, root context.Context) {
			builder := racb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RSSAuthorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, racb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = racb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, racb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, racb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (racb *RSSAuthorCreateBulk) SaveX(ctx context.Context) []*RSSAuthor {
	v, err := racb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (racb *RSSAuthorCreateBulk) Exec(ctx context.Context) error {
	_, err := racb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (racb *RSSAuthorCreateBulk) ExecX(ctx context.Context) {
	if err := racb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RSSAuthor.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RSSAuthorUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (racb *RSSAuthorCreateBulk) OnConflict(opts ...sql.ConflictOption) *RSSAuthorUpsertBulk {
	racb.conflict = opts
	return &RSSAuthorUpsertBulk{
		create: racb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RSSAuthor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (racb *RSSAuthorCreateBulk) OnConflictColumns(columns ...string) *RSSAuthorUpsertBulk {
	racb.conflict = append(racb.conflict, sql.ConflictColumns(columns...))
	return &RSSAuthorUpsertBulk{
		create: racb,
	}
}

// RSSAuthorUpsertBulk is the builder for "upsert"-ing
// a bulk of RSSAuthor nodes.
type RSSAuthorUpsertBulk struct {
	create *RSSAuthorCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RSSAuthor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rssauthor.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RSSAuthorUpsertBulk) UpdateNewValues() *RSSAuthorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(rssauthor.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(rssauthor.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RSSAuthor.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RSSAuthorUpsertBulk) Ignore() *RSSAuthorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RSSAuthorUpsertBulk) DoNothing() *RSSAuthorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RSSAuthorCreateBulk.OnConflict
// documentation for more info.
func (u *RSSAuthorUpsertBulk) Update(set func(*RSSAuthorUpsert)) *RSSAuthorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RSSAuthorUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "email" field.
func (u *RSSAuthorUpsertBulk) SetEmail(v string) *RSSAuthorUpsertBulk {
	return u.Update(func(s *RSSAuthorUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *RSSAuthorUpsertBulk) UpdateEmail() *RSSAuthorUpsertBulk {
	return u.Update(func(s *RSSAuthorUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *RSSAuthorUpsertBulk) ClearEmail() *RSSAuthorUpsertBulk {
	return u.Update(func(s *RSSAuthorUpsert) {
		s.ClearEmail()
	})
}

// SetName sets the "name" field.
func (u *RSSAuthorUpsertBulk) SetName(v string) *RSSAuthorUpsertBulk {
	return u.Update(func(s *RSSAuthorUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RSSAuthorUpsertBulk) UpdateName() *RSSAuthorUpsertBulk {
	return u.Update(func(s *RSSAuthorUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *RSSAuthorUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("build: OnConflict was set for builder %d. Set it on the RSSAuthorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("build: missing options for RSSAuthorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RSSAuthorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
