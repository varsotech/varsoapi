// Code generated by ent, DO NOT EDIT.

package build

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/comment"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/post"
)

// Post is the model entity for the Post schema.
type Post struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AuthorUserUUID holds the value of the "author_user_uuid" field.
	AuthorUserUUID uuid.UUID `json:"author_user_uuid,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// CoverImage holds the value of the "cover_image" field.
	CoverImage string `json:"cover_image,omitempty"`
	// TotalVotes holds the value of the "total_votes" field.
	TotalVotes int64 `json:"total_votes,omitempty"`
	// Upvotes holds the value of the "upvotes" field.
	Upvotes int64 `json:"upvotes,omitempty"`
	// Downvotes holds the value of the "downvotes" field.
	Downvotes int64 `json:"downvotes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostQuery when eager-loading is set.
	Edges         PostEdges `json:"edges"`
	post_comments *uuid.UUID
	selectValues  sql.SelectValues
}

// PostEdges holds the relations/edges for other nodes in the graph.
type PostEdges struct {
	// Comments holds the value of the comments edge.
	Comments *Comment `json:"comments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostEdges) CommentsOrErr() (*Comment, error) {
	if e.Comments != nil {
		return e.Comments, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: comment.Label}
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Post) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case post.FieldTotalVotes, post.FieldUpvotes, post.FieldDownvotes:
			values[i] = new(sql.NullInt64)
		case post.FieldTitle, post.FieldCoverImage:
			values[i] = new(sql.NullString)
		case post.FieldID, post.FieldAuthorUserUUID:
			values[i] = new(uuid.UUID)
		case post.ForeignKeys[0]: // post_comments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Post fields.
func (po *Post) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case post.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				po.ID = *value
			}
		case post.FieldAuthorUserUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field author_user_uuid", values[i])
			} else if value != nil {
				po.AuthorUserUUID = *value
			}
		case post.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				po.Title = value.String
			}
		case post.FieldCoverImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover_image", values[i])
			} else if value.Valid {
				po.CoverImage = value.String
			}
		case post.FieldTotalVotes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_votes", values[i])
			} else if value.Valid {
				po.TotalVotes = value.Int64
			}
		case post.FieldUpvotes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field upvotes", values[i])
			} else if value.Valid {
				po.Upvotes = value.Int64
			}
		case post.FieldDownvotes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field downvotes", values[i])
			} else if value.Valid {
				po.Downvotes = value.Int64
			}
		case post.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field post_comments", values[i])
			} else if value.Valid {
				po.post_comments = new(uuid.UUID)
				*po.post_comments = *value.S.(*uuid.UUID)
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Post.
// This includes values selected through modifiers, order, etc.
func (po *Post) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// QueryComments queries the "comments" edge of the Post entity.
func (po *Post) QueryComments() *CommentQuery {
	return NewPostClient(po.config).QueryComments(po)
}

// Update returns a builder for updating this Post.
// Note that you need to call Post.Unwrap() before calling this method if this Post
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Post) Update() *PostUpdateOne {
	return NewPostClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Post entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Post) Unwrap() *Post {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("build: Post is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Post) String() string {
	var builder strings.Builder
	builder.WriteString("Post(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("author_user_uuid=")
	builder.WriteString(fmt.Sprintf("%v", po.AuthorUserUUID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(po.Title)
	builder.WriteString(", ")
	builder.WriteString("cover_image=")
	builder.WriteString(po.CoverImage)
	builder.WriteString(", ")
	builder.WriteString("total_votes=")
	builder.WriteString(fmt.Sprintf("%v", po.TotalVotes))
	builder.WriteString(", ")
	builder.WriteString("upvotes=")
	builder.WriteString(fmt.Sprintf("%v", po.Upvotes))
	builder.WriteString(", ")
	builder.WriteString("downvotes=")
	builder.WriteString(fmt.Sprintf("%v", po.Downvotes))
	builder.WriteByte(')')
	return builder.String()
}

// Posts is a parsable slice of Post.
type Posts []*Post
