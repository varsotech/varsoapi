// Code generated by ent, DO NOT EDIT.

package build

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/comment"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/post"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/predicate"
)

// CommentUpdate is the builder for updating Comment entities.
type CommentUpdate struct {
	config
	hooks    []Hook
	mutation *CommentMutation
}

// Where appends a list predicates to the CommentUpdate builder.
func (cu *CommentUpdate) Where(ps ...predicate.Comment) *CommentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUserUUID sets the "user_uuid" field.
func (cu *CommentUpdate) SetUserUUID(u uuid.UUID) *CommentUpdate {
	cu.mutation.SetUserUUID(u)
	return cu
}

// SetNillableUserUUID sets the "user_uuid" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableUserUUID(u *uuid.UUID) *CommentUpdate {
	if u != nil {
		cu.SetUserUUID(*u)
	}
	return cu
}

// SetText sets the "text" field.
func (cu *CommentUpdate) SetText(s string) *CommentUpdate {
	cu.mutation.SetText(s)
	return cu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableText(s *string) *CommentUpdate {
	if s != nil {
		cu.SetText(*s)
	}
	return cu
}

// SetWasEdited sets the "was_edited" field.
func (cu *CommentUpdate) SetWasEdited(b bool) *CommentUpdate {
	cu.mutation.SetWasEdited(b)
	return cu
}

// SetNillableWasEdited sets the "was_edited" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableWasEdited(b *bool) *CommentUpdate {
	if b != nil {
		cu.SetWasEdited(*b)
	}
	return cu
}

// SetTotalVotes sets the "total_votes" field.
func (cu *CommentUpdate) SetTotalVotes(i int64) *CommentUpdate {
	cu.mutation.ResetTotalVotes()
	cu.mutation.SetTotalVotes(i)
	return cu
}

// SetNillableTotalVotes sets the "total_votes" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableTotalVotes(i *int64) *CommentUpdate {
	if i != nil {
		cu.SetTotalVotes(*i)
	}
	return cu
}

// AddTotalVotes adds i to the "total_votes" field.
func (cu *CommentUpdate) AddTotalVotes(i int64) *CommentUpdate {
	cu.mutation.AddTotalVotes(i)
	return cu
}

// SetUpvotes sets the "upvotes" field.
func (cu *CommentUpdate) SetUpvotes(i int64) *CommentUpdate {
	cu.mutation.ResetUpvotes()
	cu.mutation.SetUpvotes(i)
	return cu
}

// SetNillableUpvotes sets the "upvotes" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableUpvotes(i *int64) *CommentUpdate {
	if i != nil {
		cu.SetUpvotes(*i)
	}
	return cu
}

// AddUpvotes adds i to the "upvotes" field.
func (cu *CommentUpdate) AddUpvotes(i int64) *CommentUpdate {
	cu.mutation.AddUpvotes(i)
	return cu
}

// SetDownvotes sets the "downvotes" field.
func (cu *CommentUpdate) SetDownvotes(i int64) *CommentUpdate {
	cu.mutation.ResetDownvotes()
	cu.mutation.SetDownvotes(i)
	return cu
}

// SetNillableDownvotes sets the "downvotes" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableDownvotes(i *int64) *CommentUpdate {
	if i != nil {
		cu.SetDownvotes(*i)
	}
	return cu
}

// AddDownvotes adds i to the "downvotes" field.
func (cu *CommentUpdate) AddDownvotes(i int64) *CommentUpdate {
	cu.mutation.AddDownvotes(i)
	return cu
}

// AddPostIDs adds the "post" edge to the Post entity by IDs.
func (cu *CommentUpdate) AddPostIDs(ids ...uuid.UUID) *CommentUpdate {
	cu.mutation.AddPostIDs(ids...)
	return cu
}

// AddPost adds the "post" edges to the Post entity.
func (cu *CommentUpdate) AddPost(p ...*Post) *CommentUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPostIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (cu *CommentUpdate) Mutation() *CommentMutation {
	return cu.mutation
}

// ClearPost clears all "post" edges to the Post entity.
func (cu *CommentUpdate) ClearPost() *CommentUpdate {
	cu.mutation.ClearPost()
	return cu
}

// RemovePostIDs removes the "post" edge to Post entities by IDs.
func (cu *CommentUpdate) RemovePostIDs(ids ...uuid.UUID) *CommentUpdate {
	cu.mutation.RemovePostIDs(ids...)
	return cu
}

// RemovePost removes "post" edges to Post entities.
func (cu *CommentUpdate) RemovePost(p ...*Post) *CommentUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UserUUID(); ok {
		_spec.SetField(comment.FieldUserUUID, field.TypeUUID, value)
	}
	if value, ok := cu.mutation.Text(); ok {
		_spec.SetField(comment.FieldText, field.TypeString, value)
	}
	if value, ok := cu.mutation.WasEdited(); ok {
		_spec.SetField(comment.FieldWasEdited, field.TypeBool, value)
	}
	if value, ok := cu.mutation.TotalVotes(); ok {
		_spec.SetField(comment.FieldTotalVotes, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedTotalVotes(); ok {
		_spec.AddField(comment.FieldTotalVotes, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.Upvotes(); ok {
		_spec.SetField(comment.FieldUpvotes, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedUpvotes(); ok {
		_spec.AddField(comment.FieldUpvotes, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.Downvotes(); ok {
		_spec.SetField(comment.FieldDownvotes, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedDownvotes(); ok {
		_spec.AddField(comment.FieldDownvotes, field.TypeInt64, value)
	}
	if cu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: []string{comment.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPostIDs(); len(nodes) > 0 && !cu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: []string{comment.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: []string{comment.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommentUpdateOne is the builder for updating a single Comment entity.
type CommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentMutation
}

// SetUserUUID sets the "user_uuid" field.
func (cuo *CommentUpdateOne) SetUserUUID(u uuid.UUID) *CommentUpdateOne {
	cuo.mutation.SetUserUUID(u)
	return cuo
}

// SetNillableUserUUID sets the "user_uuid" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableUserUUID(u *uuid.UUID) *CommentUpdateOne {
	if u != nil {
		cuo.SetUserUUID(*u)
	}
	return cuo
}

// SetText sets the "text" field.
func (cuo *CommentUpdateOne) SetText(s string) *CommentUpdateOne {
	cuo.mutation.SetText(s)
	return cuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableText(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetText(*s)
	}
	return cuo
}

// SetWasEdited sets the "was_edited" field.
func (cuo *CommentUpdateOne) SetWasEdited(b bool) *CommentUpdateOne {
	cuo.mutation.SetWasEdited(b)
	return cuo
}

// SetNillableWasEdited sets the "was_edited" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableWasEdited(b *bool) *CommentUpdateOne {
	if b != nil {
		cuo.SetWasEdited(*b)
	}
	return cuo
}

// SetTotalVotes sets the "total_votes" field.
func (cuo *CommentUpdateOne) SetTotalVotes(i int64) *CommentUpdateOne {
	cuo.mutation.ResetTotalVotes()
	cuo.mutation.SetTotalVotes(i)
	return cuo
}

// SetNillableTotalVotes sets the "total_votes" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableTotalVotes(i *int64) *CommentUpdateOne {
	if i != nil {
		cuo.SetTotalVotes(*i)
	}
	return cuo
}

// AddTotalVotes adds i to the "total_votes" field.
func (cuo *CommentUpdateOne) AddTotalVotes(i int64) *CommentUpdateOne {
	cuo.mutation.AddTotalVotes(i)
	return cuo
}

// SetUpvotes sets the "upvotes" field.
func (cuo *CommentUpdateOne) SetUpvotes(i int64) *CommentUpdateOne {
	cuo.mutation.ResetUpvotes()
	cuo.mutation.SetUpvotes(i)
	return cuo
}

// SetNillableUpvotes sets the "upvotes" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableUpvotes(i *int64) *CommentUpdateOne {
	if i != nil {
		cuo.SetUpvotes(*i)
	}
	return cuo
}

// AddUpvotes adds i to the "upvotes" field.
func (cuo *CommentUpdateOne) AddUpvotes(i int64) *CommentUpdateOne {
	cuo.mutation.AddUpvotes(i)
	return cuo
}

// SetDownvotes sets the "downvotes" field.
func (cuo *CommentUpdateOne) SetDownvotes(i int64) *CommentUpdateOne {
	cuo.mutation.ResetDownvotes()
	cuo.mutation.SetDownvotes(i)
	return cuo
}

// SetNillableDownvotes sets the "downvotes" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableDownvotes(i *int64) *CommentUpdateOne {
	if i != nil {
		cuo.SetDownvotes(*i)
	}
	return cuo
}

// AddDownvotes adds i to the "downvotes" field.
func (cuo *CommentUpdateOne) AddDownvotes(i int64) *CommentUpdateOne {
	cuo.mutation.AddDownvotes(i)
	return cuo
}

// AddPostIDs adds the "post" edge to the Post entity by IDs.
func (cuo *CommentUpdateOne) AddPostIDs(ids ...uuid.UUID) *CommentUpdateOne {
	cuo.mutation.AddPostIDs(ids...)
	return cuo
}

// AddPost adds the "post" edges to the Post entity.
func (cuo *CommentUpdateOne) AddPost(p ...*Post) *CommentUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPostIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (cuo *CommentUpdateOne) Mutation() *CommentMutation {
	return cuo.mutation
}

// ClearPost clears all "post" edges to the Post entity.
func (cuo *CommentUpdateOne) ClearPost() *CommentUpdateOne {
	cuo.mutation.ClearPost()
	return cuo
}

// RemovePostIDs removes the "post" edge to Post entities by IDs.
func (cuo *CommentUpdateOne) RemovePostIDs(ids ...uuid.UUID) *CommentUpdateOne {
	cuo.mutation.RemovePostIDs(ids...)
	return cuo
}

// RemovePost removes "post" edges to Post entities.
func (cuo *CommentUpdateOne) RemovePost(p ...*Post) *CommentUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePostIDs(ids...)
}

// Where appends a list predicates to the CommentUpdate builder.
func (cuo *CommentUpdateOne) Where(ps ...predicate.Comment) *CommentUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommentUpdateOne) Select(field string, fields ...string) *CommentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Comment entity.
func (cuo *CommentUpdateOne) Save(ctx context.Context) (*Comment, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommentUpdateOne) SaveX(ctx context.Context) *Comment {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CommentUpdateOne) sqlSave(ctx context.Context) (_node *Comment, err error) {
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`build: missing "Comment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comment.FieldID)
		for _, f := range fields {
			if !comment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("build: invalid field %q for query", f)}
			}
			if f != comment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UserUUID(); ok {
		_spec.SetField(comment.FieldUserUUID, field.TypeUUID, value)
	}
	if value, ok := cuo.mutation.Text(); ok {
		_spec.SetField(comment.FieldText, field.TypeString, value)
	}
	if value, ok := cuo.mutation.WasEdited(); ok {
		_spec.SetField(comment.FieldWasEdited, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.TotalVotes(); ok {
		_spec.SetField(comment.FieldTotalVotes, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedTotalVotes(); ok {
		_spec.AddField(comment.FieldTotalVotes, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.Upvotes(); ok {
		_spec.SetField(comment.FieldUpvotes, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedUpvotes(); ok {
		_spec.AddField(comment.FieldUpvotes, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.Downvotes(); ok {
		_spec.SetField(comment.FieldDownvotes, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedDownvotes(); ok {
		_spec.AddField(comment.FieldDownvotes, field.TypeInt64, value)
	}
	if cuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: []string{comment.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPostIDs(); len(nodes) > 0 && !cuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: []string{comment.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: []string{comment.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Comment{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
