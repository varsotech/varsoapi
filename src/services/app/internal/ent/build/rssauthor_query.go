// Code generated by ent, DO NOT EDIT.

package build

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/newsitem"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/organization"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/person"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/predicate"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/rssauthor"
)

// RSSAuthorQuery is the builder for querying RSSAuthor entities.
type RSSAuthorQuery struct {
	config
	ctx              *QueryContext
	order            []rssauthor.OrderOption
	inters           []Interceptor
	predicates       []predicate.RSSAuthor
	withPerson       *PersonQuery
	withOrganization *OrganizationQuery
	withNewsitem     *NewsItemQuery
	withFKs          bool
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RSSAuthorQuery builder.
func (raq *RSSAuthorQuery) Where(ps ...predicate.RSSAuthor) *RSSAuthorQuery {
	raq.predicates = append(raq.predicates, ps...)
	return raq
}

// Limit the number of records to be returned by this query.
func (raq *RSSAuthorQuery) Limit(limit int) *RSSAuthorQuery {
	raq.ctx.Limit = &limit
	return raq
}

// Offset to start from.
func (raq *RSSAuthorQuery) Offset(offset int) *RSSAuthorQuery {
	raq.ctx.Offset = &offset
	return raq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (raq *RSSAuthorQuery) Unique(unique bool) *RSSAuthorQuery {
	raq.ctx.Unique = &unique
	return raq
}

// Order specifies how the records should be ordered.
func (raq *RSSAuthorQuery) Order(o ...rssauthor.OrderOption) *RSSAuthorQuery {
	raq.order = append(raq.order, o...)
	return raq
}

// QueryPerson chains the current query on the "person" edge.
func (raq *RSSAuthorQuery) QueryPerson() *PersonQuery {
	query := (&PersonClient{config: raq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := raq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := raq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rssauthor.Table, rssauthor.FieldID, selector),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, rssauthor.PersonTable, rssauthor.PersonColumn),
		)
		fromU = sqlgraph.SetNeighbors(raq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganization chains the current query on the "organization" edge.
func (raq *RSSAuthorQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: raq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := raq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := raq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rssauthor.Table, rssauthor.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, rssauthor.OrganizationTable, rssauthor.OrganizationColumn),
		)
		fromU = sqlgraph.SetNeighbors(raq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNewsitem chains the current query on the "newsitem" edge.
func (raq *RSSAuthorQuery) QueryNewsitem() *NewsItemQuery {
	query := (&NewsItemClient{config: raq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := raq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := raq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rssauthor.Table, rssauthor.FieldID, selector),
			sqlgraph.To(newsitem.Table, newsitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, rssauthor.NewsitemTable, rssauthor.NewsitemPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(raq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RSSAuthor entity from the query.
// Returns a *NotFoundError when no RSSAuthor was found.
func (raq *RSSAuthorQuery) First(ctx context.Context) (*RSSAuthor, error) {
	nodes, err := raq.Limit(1).All(setContextOp(ctx, raq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{rssauthor.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (raq *RSSAuthorQuery) FirstX(ctx context.Context) *RSSAuthor {
	node, err := raq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RSSAuthor ID from the query.
// Returns a *NotFoundError when no RSSAuthor ID was found.
func (raq *RSSAuthorQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = raq.Limit(1).IDs(setContextOp(ctx, raq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{rssauthor.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (raq *RSSAuthorQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := raq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RSSAuthor entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RSSAuthor entity is found.
// Returns a *NotFoundError when no RSSAuthor entities are found.
func (raq *RSSAuthorQuery) Only(ctx context.Context) (*RSSAuthor, error) {
	nodes, err := raq.Limit(2).All(setContextOp(ctx, raq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{rssauthor.Label}
	default:
		return nil, &NotSingularError{rssauthor.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (raq *RSSAuthorQuery) OnlyX(ctx context.Context) *RSSAuthor {
	node, err := raq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RSSAuthor ID in the query.
// Returns a *NotSingularError when more than one RSSAuthor ID is found.
// Returns a *NotFoundError when no entities are found.
func (raq *RSSAuthorQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = raq.Limit(2).IDs(setContextOp(ctx, raq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{rssauthor.Label}
	default:
		err = &NotSingularError{rssauthor.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (raq *RSSAuthorQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := raq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RSSAuthors.
func (raq *RSSAuthorQuery) All(ctx context.Context) ([]*RSSAuthor, error) {
	ctx = setContextOp(ctx, raq.ctx, "All")
	if err := raq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RSSAuthor, *RSSAuthorQuery]()
	return withInterceptors[[]*RSSAuthor](ctx, raq, qr, raq.inters)
}

// AllX is like All, but panics if an error occurs.
func (raq *RSSAuthorQuery) AllX(ctx context.Context) []*RSSAuthor {
	nodes, err := raq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RSSAuthor IDs.
func (raq *RSSAuthorQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if raq.ctx.Unique == nil && raq.path != nil {
		raq.Unique(true)
	}
	ctx = setContextOp(ctx, raq.ctx, "IDs")
	if err = raq.Select(rssauthor.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (raq *RSSAuthorQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := raq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (raq *RSSAuthorQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, raq.ctx, "Count")
	if err := raq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, raq, querierCount[*RSSAuthorQuery](), raq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (raq *RSSAuthorQuery) CountX(ctx context.Context) int {
	count, err := raq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (raq *RSSAuthorQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, raq.ctx, "Exist")
	switch _, err := raq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("build: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (raq *RSSAuthorQuery) ExistX(ctx context.Context) bool {
	exist, err := raq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RSSAuthorQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (raq *RSSAuthorQuery) Clone() *RSSAuthorQuery {
	if raq == nil {
		return nil
	}
	return &RSSAuthorQuery{
		config:           raq.config,
		ctx:              raq.ctx.Clone(),
		order:            append([]rssauthor.OrderOption{}, raq.order...),
		inters:           append([]Interceptor{}, raq.inters...),
		predicates:       append([]predicate.RSSAuthor{}, raq.predicates...),
		withPerson:       raq.withPerson.Clone(),
		withOrganization: raq.withOrganization.Clone(),
		withNewsitem:     raq.withNewsitem.Clone(),
		// clone intermediate query.
		sql:  raq.sql.Clone(),
		path: raq.path,
	}
}

// WithPerson tells the query-builder to eager-load the nodes that are connected to
// the "person" edge. The optional arguments are used to configure the query builder of the edge.
func (raq *RSSAuthorQuery) WithPerson(opts ...func(*PersonQuery)) *RSSAuthorQuery {
	query := (&PersonClient{config: raq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	raq.withPerson = query
	return raq
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (raq *RSSAuthorQuery) WithOrganization(opts ...func(*OrganizationQuery)) *RSSAuthorQuery {
	query := (&OrganizationClient{config: raq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	raq.withOrganization = query
	return raq
}

// WithNewsitem tells the query-builder to eager-load the nodes that are connected to
// the "newsitem" edge. The optional arguments are used to configure the query builder of the edge.
func (raq *RSSAuthorQuery) WithNewsitem(opts ...func(*NewsItemQuery)) *RSSAuthorQuery {
	query := (&NewsItemClient{config: raq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	raq.withNewsitem = query
	return raq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RSSAuthor.Query().
//		GroupBy(rssauthor.FieldCreateTime).
//		Aggregate(build.Count()).
//		Scan(ctx, &v)
func (raq *RSSAuthorQuery) GroupBy(field string, fields ...string) *RSSAuthorGroupBy {
	raq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RSSAuthorGroupBy{build: raq}
	grbuild.flds = &raq.ctx.Fields
	grbuild.label = rssauthor.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.RSSAuthor.Query().
//		Select(rssauthor.FieldCreateTime).
//		Scan(ctx, &v)
func (raq *RSSAuthorQuery) Select(fields ...string) *RSSAuthorSelect {
	raq.ctx.Fields = append(raq.ctx.Fields, fields...)
	sbuild := &RSSAuthorSelect{RSSAuthorQuery: raq}
	sbuild.label = rssauthor.Label
	sbuild.flds, sbuild.scan = &raq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RSSAuthorSelect configured with the given aggregations.
func (raq *RSSAuthorQuery) Aggregate(fns ...AggregateFunc) *RSSAuthorSelect {
	return raq.Select().Aggregate(fns...)
}

func (raq *RSSAuthorQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range raq.inters {
		if inter == nil {
			return fmt.Errorf("build: uninitialized interceptor (forgotten import build/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, raq); err != nil {
				return err
			}
		}
	}
	for _, f := range raq.ctx.Fields {
		if !rssauthor.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("build: invalid field %q for query", f)}
		}
	}
	if raq.path != nil {
		prev, err := raq.path(ctx)
		if err != nil {
			return err
		}
		raq.sql = prev
	}
	return nil
}

func (raq *RSSAuthorQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RSSAuthor, error) {
	var (
		nodes       = []*RSSAuthor{}
		withFKs     = raq.withFKs
		_spec       = raq.querySpec()
		loadedTypes = [3]bool{
			raq.withPerson != nil,
			raq.withOrganization != nil,
			raq.withNewsitem != nil,
		}
	)
	if raq.withPerson != nil || raq.withOrganization != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, rssauthor.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RSSAuthor).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RSSAuthor{config: raq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(raq.modifiers) > 0 {
		_spec.Modifiers = raq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, raq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := raq.withPerson; query != nil {
		if err := raq.loadPerson(ctx, query, nodes, nil,
			func(n *RSSAuthor, e *Person) { n.Edges.Person = e }); err != nil {
			return nil, err
		}
	}
	if query := raq.withOrganization; query != nil {
		if err := raq.loadOrganization(ctx, query, nodes, nil,
			func(n *RSSAuthor, e *Organization) { n.Edges.Organization = e }); err != nil {
			return nil, err
		}
	}
	if query := raq.withNewsitem; query != nil {
		if err := raq.loadNewsitem(ctx, query, nodes,
			func(n *RSSAuthor) { n.Edges.Newsitem = []*NewsItem{} },
			func(n *RSSAuthor, e *NewsItem) { n.Edges.Newsitem = append(n.Edges.Newsitem, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (raq *RSSAuthorQuery) loadPerson(ctx context.Context, query *PersonQuery, nodes []*RSSAuthor, init func(*RSSAuthor), assign func(*RSSAuthor, *Person)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*RSSAuthor)
	for i := range nodes {
		if nodes[i].rss_author_person == nil {
			continue
		}
		fk := *nodes[i].rss_author_person
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(person.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rss_author_person" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (raq *RSSAuthorQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*RSSAuthor, init func(*RSSAuthor), assign func(*RSSAuthor, *Organization)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*RSSAuthor)
	for i := range nodes {
		if nodes[i].rss_author_organization == nil {
			continue
		}
		fk := *nodes[i].rss_author_organization
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rss_author_organization" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (raq *RSSAuthorQuery) loadNewsitem(ctx context.Context, query *NewsItemQuery, nodes []*RSSAuthor, init func(*RSSAuthor), assign func(*RSSAuthor, *NewsItem)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*RSSAuthor)
	nids := make(map[uuid.UUID]map[*RSSAuthor]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(rssauthor.NewsitemTable)
		s.Join(joinT).On(s.C(newsitem.FieldID), joinT.C(rssauthor.NewsitemPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(rssauthor.NewsitemPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(rssauthor.NewsitemPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*RSSAuthor]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*NewsItem](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "newsitem" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (raq *RSSAuthorQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := raq.querySpec()
	if len(raq.modifiers) > 0 {
		_spec.Modifiers = raq.modifiers
	}
	_spec.Node.Columns = raq.ctx.Fields
	if len(raq.ctx.Fields) > 0 {
		_spec.Unique = raq.ctx.Unique != nil && *raq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, raq.driver, _spec)
}

func (raq *RSSAuthorQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(rssauthor.Table, rssauthor.Columns, sqlgraph.NewFieldSpec(rssauthor.FieldID, field.TypeUUID))
	_spec.From = raq.sql
	if unique := raq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if raq.path != nil {
		_spec.Unique = true
	}
	if fields := raq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rssauthor.FieldID)
		for i := range fields {
			if fields[i] != rssauthor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := raq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := raq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := raq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := raq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (raq *RSSAuthorQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(raq.driver.Dialect())
	t1 := builder.Table(rssauthor.Table)
	columns := raq.ctx.Fields
	if len(columns) == 0 {
		columns = rssauthor.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if raq.sql != nil {
		selector = raq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if raq.ctx.Unique != nil && *raq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range raq.modifiers {
		m(selector)
	}
	for _, p := range raq.predicates {
		p(selector)
	}
	for _, p := range raq.order {
		p(selector)
	}
	if offset := raq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := raq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (raq *RSSAuthorQuery) ForUpdate(opts ...sql.LockOption) *RSSAuthorQuery {
	if raq.driver.Dialect() == dialect.Postgres {
		raq.Unique(false)
	}
	raq.modifiers = append(raq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return raq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (raq *RSSAuthorQuery) ForShare(opts ...sql.LockOption) *RSSAuthorQuery {
	if raq.driver.Dialect() == dialect.Postgres {
		raq.Unique(false)
	}
	raq.modifiers = append(raq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return raq
}

// RSSAuthorGroupBy is the group-by builder for RSSAuthor entities.
type RSSAuthorGroupBy struct {
	selector
	build *RSSAuthorQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ragb *RSSAuthorGroupBy) Aggregate(fns ...AggregateFunc) *RSSAuthorGroupBy {
	ragb.fns = append(ragb.fns, fns...)
	return ragb
}

// Scan applies the selector query and scans the result into the given value.
func (ragb *RSSAuthorGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ragb.build.ctx, "GroupBy")
	if err := ragb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RSSAuthorQuery, *RSSAuthorGroupBy](ctx, ragb.build, ragb, ragb.build.inters, v)
}

func (ragb *RSSAuthorGroupBy) sqlScan(ctx context.Context, root *RSSAuthorQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ragb.fns))
	for _, fn := range ragb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ragb.flds)+len(ragb.fns))
		for _, f := range *ragb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ragb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ragb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RSSAuthorSelect is the builder for selecting fields of RSSAuthor entities.
type RSSAuthorSelect struct {
	*RSSAuthorQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ras *RSSAuthorSelect) Aggregate(fns ...AggregateFunc) *RSSAuthorSelect {
	ras.fns = append(ras.fns, fns...)
	return ras
}

// Scan applies the selector query and scans the result into the given value.
func (ras *RSSAuthorSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ras.ctx, "Select")
	if err := ras.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RSSAuthorQuery, *RSSAuthorSelect](ctx, ras.RSSAuthorQuery, ras, ras.inters, v)
}

func (ras *RSSAuthorSelect) sqlScan(ctx context.Context, root *RSSAuthorQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ras.fns))
	for _, fn := range ras.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ras.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ras.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
