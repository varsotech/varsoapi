// Code generated by ent, DO NOT EDIT.

package build

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/newsitem"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/rssfeed"
)

// NewsItem is the model entity for the NewsItem schema.
type NewsItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// RssGUID holds the value of the "rss_guid" field.
	RssGUID string `json:"rss_guid,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// Links holds the value of the "links" field.
	Links []string `json:"links,omitempty"`
	// ItemPublishTime holds the value of the "item_publish_time" field.
	ItemPublishTime time.Time `json:"item_publish_time,omitempty"`
	// ItemUpdateTime holds the value of the "item_update_time" field.
	ItemUpdateTime time.Time `json:"item_update_time,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// ImageTitle holds the value of the "image_title" field.
	ImageTitle string `json:"image_title,omitempty"`
	// Categories holds the value of the "categories" field.
	Categories []string `json:"categories,omitempty"`
	// Blur holds the value of the "blur" field.
	Blur bool `json:"blur,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NewsItemQuery when eager-loading is set.
	Edges          NewsItemEdges `json:"edges"`
	news_item_feed *uuid.UUID
	selectValues   sql.SelectValues
}

// NewsItemEdges holds the relations/edges for other nodes in the graph.
type NewsItemEdges struct {
	// Authors holds the value of the authors edge.
	Authors []*RSSAuthor `json:"authors,omitempty"`
	// Feed holds the value of the feed edge.
	Feed *RSSFeed `json:"feed,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AuthorsOrErr returns the Authors value or an error if the edge
// was not loaded in eager-loading.
func (e NewsItemEdges) AuthorsOrErr() ([]*RSSAuthor, error) {
	if e.loadedTypes[0] {
		return e.Authors, nil
	}
	return nil, &NotLoadedError{edge: "authors"}
}

// FeedOrErr returns the Feed value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NewsItemEdges) FeedOrErr() (*RSSFeed, error) {
	if e.Feed != nil {
		return e.Feed, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: rssfeed.Label}
	}
	return nil, &NotLoadedError{edge: "feed"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NewsItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case newsitem.FieldLinks, newsitem.FieldCategories:
			values[i] = new([]byte)
		case newsitem.FieldBlur:
			values[i] = new(sql.NullBool)
		case newsitem.FieldRssGUID, newsitem.FieldTitle, newsitem.FieldDescription, newsitem.FieldContent, newsitem.FieldLink, newsitem.FieldImageURL, newsitem.FieldImageTitle:
			values[i] = new(sql.NullString)
		case newsitem.FieldCreateTime, newsitem.FieldUpdateTime, newsitem.FieldItemPublishTime, newsitem.FieldItemUpdateTime:
			values[i] = new(sql.NullTime)
		case newsitem.FieldID:
			values[i] = new(uuid.UUID)
		case newsitem.ForeignKeys[0]: // news_item_feed
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NewsItem fields.
func (ni *NewsItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case newsitem.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ni.ID = *value
			}
		case newsitem.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ni.CreateTime = value.Time
			}
		case newsitem.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ni.UpdateTime = value.Time
			}
		case newsitem.FieldRssGUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rss_guid", values[i])
			} else if value.Valid {
				ni.RssGUID = value.String
			}
		case newsitem.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ni.Title = value.String
			}
		case newsitem.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ni.Description = value.String
			}
		case newsitem.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				ni.Content = value.String
			}
		case newsitem.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				ni.Link = value.String
			}
		case newsitem.FieldLinks:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field links", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ni.Links); err != nil {
					return fmt.Errorf("unmarshal field links: %w", err)
				}
			}
		case newsitem.FieldItemPublishTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field item_publish_time", values[i])
			} else if value.Valid {
				ni.ItemPublishTime = value.Time
			}
		case newsitem.FieldItemUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field item_update_time", values[i])
			} else if value.Valid {
				ni.ItemUpdateTime = value.Time
			}
		case newsitem.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				ni.ImageURL = value.String
			}
		case newsitem.FieldImageTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_title", values[i])
			} else if value.Valid {
				ni.ImageTitle = value.String
			}
		case newsitem.FieldCategories:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field categories", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ni.Categories); err != nil {
					return fmt.Errorf("unmarshal field categories: %w", err)
				}
			}
		case newsitem.FieldBlur:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field blur", values[i])
			} else if value.Valid {
				ni.Blur = value.Bool
			}
		case newsitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field news_item_feed", values[i])
			} else if value.Valid {
				ni.news_item_feed = new(uuid.UUID)
				*ni.news_item_feed = *value.S.(*uuid.UUID)
			}
		default:
			ni.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NewsItem.
// This includes values selected through modifiers, order, etc.
func (ni *NewsItem) Value(name string) (ent.Value, error) {
	return ni.selectValues.Get(name)
}

// QueryAuthors queries the "authors" edge of the NewsItem entity.
func (ni *NewsItem) QueryAuthors() *RSSAuthorQuery {
	return NewNewsItemClient(ni.config).QueryAuthors(ni)
}

// QueryFeed queries the "feed" edge of the NewsItem entity.
func (ni *NewsItem) QueryFeed() *RSSFeedQuery {
	return NewNewsItemClient(ni.config).QueryFeed(ni)
}

// Update returns a builder for updating this NewsItem.
// Note that you need to call NewsItem.Unwrap() before calling this method if this NewsItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ni *NewsItem) Update() *NewsItemUpdateOne {
	return NewNewsItemClient(ni.config).UpdateOne(ni)
}

// Unwrap unwraps the NewsItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ni *NewsItem) Unwrap() *NewsItem {
	_tx, ok := ni.config.driver.(*txDriver)
	if !ok {
		panic("build: NewsItem is not a transactional entity")
	}
	ni.config.driver = _tx.drv
	return ni
}

// String implements the fmt.Stringer.
func (ni *NewsItem) String() string {
	var builder strings.Builder
	builder.WriteString("NewsItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ni.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ni.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ni.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("rss_guid=")
	builder.WriteString(ni.RssGUID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ni.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ni.Description)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(ni.Content)
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(ni.Link)
	builder.WriteString(", ")
	builder.WriteString("links=")
	builder.WriteString(fmt.Sprintf("%v", ni.Links))
	builder.WriteString(", ")
	builder.WriteString("item_publish_time=")
	builder.WriteString(ni.ItemPublishTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("item_update_time=")
	builder.WriteString(ni.ItemUpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(ni.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("image_title=")
	builder.WriteString(ni.ImageTitle)
	builder.WriteString(", ")
	builder.WriteString("categories=")
	builder.WriteString(fmt.Sprintf("%v", ni.Categories))
	builder.WriteString(", ")
	builder.WriteString("blur=")
	builder.WriteString(fmt.Sprintf("%v", ni.Blur))
	builder.WriteByte(')')
	return builder.String()
}

// NewsItems is a parsable slice of NewsItem.
type NewsItems []*NewsItem
