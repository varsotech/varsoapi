// Code generated by ent, DO NOT EDIT.

package build

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/comment"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/post"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/predicate"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// Where appends a list predicates to the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetAuthorUserUUID sets the "author_user_uuid" field.
func (pu *PostUpdate) SetAuthorUserUUID(u uuid.UUID) *PostUpdate {
	pu.mutation.SetAuthorUserUUID(u)
	return pu
}

// SetNillableAuthorUserUUID sets the "author_user_uuid" field if the given value is not nil.
func (pu *PostUpdate) SetNillableAuthorUserUUID(u *uuid.UUID) *PostUpdate {
	if u != nil {
		pu.SetAuthorUserUUID(*u)
	}
	return pu
}

// SetTitle sets the "title" field.
func (pu *PostUpdate) SetTitle(s string) *PostUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PostUpdate) SetNillableTitle(s *string) *PostUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetCoverImage sets the "cover_image" field.
func (pu *PostUpdate) SetCoverImage(s string) *PostUpdate {
	pu.mutation.SetCoverImage(s)
	return pu
}

// SetNillableCoverImage sets the "cover_image" field if the given value is not nil.
func (pu *PostUpdate) SetNillableCoverImage(s *string) *PostUpdate {
	if s != nil {
		pu.SetCoverImage(*s)
	}
	return pu
}

// SetTotalVotes sets the "total_votes" field.
func (pu *PostUpdate) SetTotalVotes(i int64) *PostUpdate {
	pu.mutation.ResetTotalVotes()
	pu.mutation.SetTotalVotes(i)
	return pu
}

// SetNillableTotalVotes sets the "total_votes" field if the given value is not nil.
func (pu *PostUpdate) SetNillableTotalVotes(i *int64) *PostUpdate {
	if i != nil {
		pu.SetTotalVotes(*i)
	}
	return pu
}

// AddTotalVotes adds i to the "total_votes" field.
func (pu *PostUpdate) AddTotalVotes(i int64) *PostUpdate {
	pu.mutation.AddTotalVotes(i)
	return pu
}

// SetUpvotes sets the "upvotes" field.
func (pu *PostUpdate) SetUpvotes(i int64) *PostUpdate {
	pu.mutation.ResetUpvotes()
	pu.mutation.SetUpvotes(i)
	return pu
}

// SetNillableUpvotes sets the "upvotes" field if the given value is not nil.
func (pu *PostUpdate) SetNillableUpvotes(i *int64) *PostUpdate {
	if i != nil {
		pu.SetUpvotes(*i)
	}
	return pu
}

// AddUpvotes adds i to the "upvotes" field.
func (pu *PostUpdate) AddUpvotes(i int64) *PostUpdate {
	pu.mutation.AddUpvotes(i)
	return pu
}

// SetDownvotes sets the "downvotes" field.
func (pu *PostUpdate) SetDownvotes(i int64) *PostUpdate {
	pu.mutation.ResetDownvotes()
	pu.mutation.SetDownvotes(i)
	return pu
}

// SetNillableDownvotes sets the "downvotes" field if the given value is not nil.
func (pu *PostUpdate) SetNillableDownvotes(i *int64) *PostUpdate {
	if i != nil {
		pu.SetDownvotes(*i)
	}
	return pu
}

// AddDownvotes adds i to the "downvotes" field.
func (pu *PostUpdate) AddDownvotes(i int64) *PostUpdate {
	pu.mutation.AddDownvotes(i)
	return pu
}

// SetCommentsID sets the "comments" edge to the Comment entity by ID.
func (pu *PostUpdate) SetCommentsID(id uuid.UUID) *PostUpdate {
	pu.mutation.SetCommentsID(id)
	return pu
}

// SetNillableCommentsID sets the "comments" edge to the Comment entity by ID if the given value is not nil.
func (pu *PostUpdate) SetNillableCommentsID(id *uuid.UUID) *PostUpdate {
	if id != nil {
		pu = pu.SetCommentsID(*id)
	}
	return pu
}

// SetComments sets the "comments" edge to the Comment entity.
func (pu *PostUpdate) SetComments(c *Comment) *PostUpdate {
	return pu.SetCommentsID(c.ID)
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// ClearComments clears the "comments" edge to the Comment entity.
func (pu *PostUpdate) ClearComments() *PostUpdate {
	pu.mutation.ClearComments()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.AuthorUserUUID(); ok {
		_spec.SetField(post.FieldAuthorUserUUID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.CoverImage(); ok {
		_spec.SetField(post.FieldCoverImage, field.TypeString, value)
	}
	if value, ok := pu.mutation.TotalVotes(); ok {
		_spec.SetField(post.FieldTotalVotes, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedTotalVotes(); ok {
		_spec.AddField(post.FieldTotalVotes, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.Upvotes(); ok {
		_spec.SetField(post.FieldUpvotes, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedUpvotes(); ok {
		_spec.AddField(post.FieldUpvotes, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.Downvotes(); ok {
		_spec.SetField(post.FieldDownvotes, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedDownvotes(); ok {
		_spec.AddField(post.FieldDownvotes, field.TypeInt64, value)
	}
	if pu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostMutation
}

// SetAuthorUserUUID sets the "author_user_uuid" field.
func (puo *PostUpdateOne) SetAuthorUserUUID(u uuid.UUID) *PostUpdateOne {
	puo.mutation.SetAuthorUserUUID(u)
	return puo
}

// SetNillableAuthorUserUUID sets the "author_user_uuid" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableAuthorUserUUID(u *uuid.UUID) *PostUpdateOne {
	if u != nil {
		puo.SetAuthorUserUUID(*u)
	}
	return puo
}

// SetTitle sets the "title" field.
func (puo *PostUpdateOne) SetTitle(s string) *PostUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableTitle(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetCoverImage sets the "cover_image" field.
func (puo *PostUpdateOne) SetCoverImage(s string) *PostUpdateOne {
	puo.mutation.SetCoverImage(s)
	return puo
}

// SetNillableCoverImage sets the "cover_image" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableCoverImage(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetCoverImage(*s)
	}
	return puo
}

// SetTotalVotes sets the "total_votes" field.
func (puo *PostUpdateOne) SetTotalVotes(i int64) *PostUpdateOne {
	puo.mutation.ResetTotalVotes()
	puo.mutation.SetTotalVotes(i)
	return puo
}

// SetNillableTotalVotes sets the "total_votes" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableTotalVotes(i *int64) *PostUpdateOne {
	if i != nil {
		puo.SetTotalVotes(*i)
	}
	return puo
}

// AddTotalVotes adds i to the "total_votes" field.
func (puo *PostUpdateOne) AddTotalVotes(i int64) *PostUpdateOne {
	puo.mutation.AddTotalVotes(i)
	return puo
}

// SetUpvotes sets the "upvotes" field.
func (puo *PostUpdateOne) SetUpvotes(i int64) *PostUpdateOne {
	puo.mutation.ResetUpvotes()
	puo.mutation.SetUpvotes(i)
	return puo
}

// SetNillableUpvotes sets the "upvotes" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableUpvotes(i *int64) *PostUpdateOne {
	if i != nil {
		puo.SetUpvotes(*i)
	}
	return puo
}

// AddUpvotes adds i to the "upvotes" field.
func (puo *PostUpdateOne) AddUpvotes(i int64) *PostUpdateOne {
	puo.mutation.AddUpvotes(i)
	return puo
}

// SetDownvotes sets the "downvotes" field.
func (puo *PostUpdateOne) SetDownvotes(i int64) *PostUpdateOne {
	puo.mutation.ResetDownvotes()
	puo.mutation.SetDownvotes(i)
	return puo
}

// SetNillableDownvotes sets the "downvotes" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableDownvotes(i *int64) *PostUpdateOne {
	if i != nil {
		puo.SetDownvotes(*i)
	}
	return puo
}

// AddDownvotes adds i to the "downvotes" field.
func (puo *PostUpdateOne) AddDownvotes(i int64) *PostUpdateOne {
	puo.mutation.AddDownvotes(i)
	return puo
}

// SetCommentsID sets the "comments" edge to the Comment entity by ID.
func (puo *PostUpdateOne) SetCommentsID(id uuid.UUID) *PostUpdateOne {
	puo.mutation.SetCommentsID(id)
	return puo
}

// SetNillableCommentsID sets the "comments" edge to the Comment entity by ID if the given value is not nil.
func (puo *PostUpdateOne) SetNillableCommentsID(id *uuid.UUID) *PostUpdateOne {
	if id != nil {
		puo = puo.SetCommentsID(*id)
	}
	return puo
}

// SetComments sets the "comments" edge to the Comment entity.
func (puo *PostUpdateOne) SetComments(c *Comment) *PostUpdateOne {
	return puo.SetCommentsID(c.ID)
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// ClearComments clears the "comments" edge to the Comment entity.
func (puo *PostUpdateOne) ClearComments() *PostUpdateOne {
	puo.mutation.ClearComments()
	return puo
}

// Where appends a list predicates to the PostUpdate builder.
func (puo *PostUpdateOne) Where(ps ...predicate.Post) *PostUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`build: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("build: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.AuthorUserUUID(); ok {
		_spec.SetField(post.FieldAuthorUserUUID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.CoverImage(); ok {
		_spec.SetField(post.FieldCoverImage, field.TypeString, value)
	}
	if value, ok := puo.mutation.TotalVotes(); ok {
		_spec.SetField(post.FieldTotalVotes, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedTotalVotes(); ok {
		_spec.AddField(post.FieldTotalVotes, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.Upvotes(); ok {
		_spec.SetField(post.FieldUpvotes, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedUpvotes(); ok {
		_spec.AddField(post.FieldUpvotes, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.Downvotes(); ok {
		_spec.SetField(post.FieldDownvotes, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedDownvotes(); ok {
		_spec.AddField(post.FieldDownvotes, field.TypeInt64, value)
	}
	if puo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
