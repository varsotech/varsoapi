// Code generated by ent, DO NOT EDIT.

package newsitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the newsitem type in the database.
	Label = "news_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uuid"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldRssGUID holds the string denoting the rss_guid field in the database.
	FieldRssGUID = "rss_guid"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// FieldLinks holds the string denoting the links field in the database.
	FieldLinks = "links"
	// FieldItemPublishTime holds the string denoting the item_publish_time field in the database.
	FieldItemPublishTime = "item_publish_time"
	// FieldItemUpdateTime holds the string denoting the item_update_time field in the database.
	FieldItemUpdateTime = "item_update_time"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldImageTitle holds the string denoting the image_title field in the database.
	FieldImageTitle = "image_title"
	// FieldCategories holds the string denoting the categories field in the database.
	FieldCategories = "categories"
	// EdgeAuthors holds the string denoting the authors edge name in mutations.
	EdgeAuthors = "authors"
	// EdgeFeed holds the string denoting the feed edge name in mutations.
	EdgeFeed = "feed"
	// Table holds the table name of the newsitem in the database.
	Table = "news_items"
	// AuthorsTable is the table that holds the authors relation/edge. The primary key declared below.
	AuthorsTable = "news_item_authors"
	// AuthorsInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	AuthorsInverseTable = "persons"
	// FeedTable is the table that holds the feed relation/edge.
	FeedTable = "news_items"
	// FeedInverseTable is the table name for the RSSFeed entity.
	// It exists in this package in order to avoid circular dependency with the "rssfeed" package.
	FeedInverseTable = "rss_feeds"
	// FeedColumn is the table column denoting the feed relation/edge.
	FeedColumn = "news_item_feed"
)

// Columns holds all SQL columns for newsitem fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldRssGUID,
	FieldTitle,
	FieldDescription,
	FieldContent,
	FieldLink,
	FieldLinks,
	FieldItemPublishTime,
	FieldItemUpdateTime,
	FieldImageURL,
	FieldImageTitle,
	FieldCategories,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "news_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"news_item_feed",
}

var (
	// AuthorsPrimaryKey and AuthorsColumn2 are the table columns denoting the
	// primary key for the authors relation (M2M).
	AuthorsPrimaryKey = []string{"news_item_id", "person_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the NewsItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByRssGUID orders the results by the rss_guid field.
func ByRssGUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRssGUID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByItemPublishTime orders the results by the item_publish_time field.
func ByItemPublishTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemPublishTime, opts...).ToFunc()
}

// ByItemUpdateTime orders the results by the item_update_time field.
func ByItemUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemUpdateTime, opts...).ToFunc()
}

// ByImageURL orders the results by the image_url field.
func ByImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}

// ByImageTitle orders the results by the image_title field.
func ByImageTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageTitle, opts...).ToFunc()
}

// ByAuthorsCount orders the results by authors count.
func ByAuthorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuthorsStep(), opts...)
	}
}

// ByAuthors orders the results by authors terms.
func ByAuthors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFeedField orders the results by feed field.
func ByFeedField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedStep(), sql.OrderByField(field, opts...))
	}
}
func newAuthorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AuthorsTable, AuthorsPrimaryKey...),
	)
}
func newFeedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FeedTable, FeedColumn),
	)
}
