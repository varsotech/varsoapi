// Code generated by ent, DO NOT EDIT.

package build

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/newsitem"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/predicate"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/rssauthor"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/rssfeed"
)

// NewsItemQuery is the builder for querying NewsItem entities.
type NewsItemQuery struct {
	config
	ctx         *QueryContext
	order       []newsitem.OrderOption
	inters      []Interceptor
	predicates  []predicate.NewsItem
	withAuthors *RSSAuthorQuery
	withFeed    *RSSFeedQuery
	withFKs     bool
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NewsItemQuery builder.
func (niq *NewsItemQuery) Where(ps ...predicate.NewsItem) *NewsItemQuery {
	niq.predicates = append(niq.predicates, ps...)
	return niq
}

// Limit the number of records to be returned by this query.
func (niq *NewsItemQuery) Limit(limit int) *NewsItemQuery {
	niq.ctx.Limit = &limit
	return niq
}

// Offset to start from.
func (niq *NewsItemQuery) Offset(offset int) *NewsItemQuery {
	niq.ctx.Offset = &offset
	return niq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (niq *NewsItemQuery) Unique(unique bool) *NewsItemQuery {
	niq.ctx.Unique = &unique
	return niq
}

// Order specifies how the records should be ordered.
func (niq *NewsItemQuery) Order(o ...newsitem.OrderOption) *NewsItemQuery {
	niq.order = append(niq.order, o...)
	return niq
}

// QueryAuthors chains the current query on the "authors" edge.
func (niq *NewsItemQuery) QueryAuthors() *RSSAuthorQuery {
	query := (&RSSAuthorClient{config: niq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := niq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := niq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(newsitem.Table, newsitem.FieldID, selector),
			sqlgraph.To(rssauthor.Table, rssauthor.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, newsitem.AuthorsTable, newsitem.AuthorsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(niq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeed chains the current query on the "feed" edge.
func (niq *NewsItemQuery) QueryFeed() *RSSFeedQuery {
	query := (&RSSFeedClient{config: niq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := niq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := niq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(newsitem.Table, newsitem.FieldID, selector),
			sqlgraph.To(rssfeed.Table, rssfeed.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, newsitem.FeedTable, newsitem.FeedColumn),
		)
		fromU = sqlgraph.SetNeighbors(niq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NewsItem entity from the query.
// Returns a *NotFoundError when no NewsItem was found.
func (niq *NewsItemQuery) First(ctx context.Context) (*NewsItem, error) {
	nodes, err := niq.Limit(1).All(setContextOp(ctx, niq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{newsitem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (niq *NewsItemQuery) FirstX(ctx context.Context) *NewsItem {
	node, err := niq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NewsItem ID from the query.
// Returns a *NotFoundError when no NewsItem ID was found.
func (niq *NewsItemQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = niq.Limit(1).IDs(setContextOp(ctx, niq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{newsitem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (niq *NewsItemQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := niq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NewsItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NewsItem entity is found.
// Returns a *NotFoundError when no NewsItem entities are found.
func (niq *NewsItemQuery) Only(ctx context.Context) (*NewsItem, error) {
	nodes, err := niq.Limit(2).All(setContextOp(ctx, niq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{newsitem.Label}
	default:
		return nil, &NotSingularError{newsitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (niq *NewsItemQuery) OnlyX(ctx context.Context) *NewsItem {
	node, err := niq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NewsItem ID in the query.
// Returns a *NotSingularError when more than one NewsItem ID is found.
// Returns a *NotFoundError when no entities are found.
func (niq *NewsItemQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = niq.Limit(2).IDs(setContextOp(ctx, niq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{newsitem.Label}
	default:
		err = &NotSingularError{newsitem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (niq *NewsItemQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := niq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NewsItems.
func (niq *NewsItemQuery) All(ctx context.Context) ([]*NewsItem, error) {
	ctx = setContextOp(ctx, niq.ctx, "All")
	if err := niq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*NewsItem, *NewsItemQuery]()
	return withInterceptors[[]*NewsItem](ctx, niq, qr, niq.inters)
}

// AllX is like All, but panics if an error occurs.
func (niq *NewsItemQuery) AllX(ctx context.Context) []*NewsItem {
	nodes, err := niq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NewsItem IDs.
func (niq *NewsItemQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if niq.ctx.Unique == nil && niq.path != nil {
		niq.Unique(true)
	}
	ctx = setContextOp(ctx, niq.ctx, "IDs")
	if err = niq.Select(newsitem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (niq *NewsItemQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := niq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (niq *NewsItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, niq.ctx, "Count")
	if err := niq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, niq, querierCount[*NewsItemQuery](), niq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (niq *NewsItemQuery) CountX(ctx context.Context) int {
	count, err := niq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (niq *NewsItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, niq.ctx, "Exist")
	switch _, err := niq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("build: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (niq *NewsItemQuery) ExistX(ctx context.Context) bool {
	exist, err := niq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NewsItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (niq *NewsItemQuery) Clone() *NewsItemQuery {
	if niq == nil {
		return nil
	}
	return &NewsItemQuery{
		config:      niq.config,
		ctx:         niq.ctx.Clone(),
		order:       append([]newsitem.OrderOption{}, niq.order...),
		inters:      append([]Interceptor{}, niq.inters...),
		predicates:  append([]predicate.NewsItem{}, niq.predicates...),
		withAuthors: niq.withAuthors.Clone(),
		withFeed:    niq.withFeed.Clone(),
		// clone intermediate query.
		sql:  niq.sql.Clone(),
		path: niq.path,
	}
}

// WithAuthors tells the query-builder to eager-load the nodes that are connected to
// the "authors" edge. The optional arguments are used to configure the query builder of the edge.
func (niq *NewsItemQuery) WithAuthors(opts ...func(*RSSAuthorQuery)) *NewsItemQuery {
	query := (&RSSAuthorClient{config: niq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	niq.withAuthors = query
	return niq
}

// WithFeed tells the query-builder to eager-load the nodes that are connected to
// the "feed" edge. The optional arguments are used to configure the query builder of the edge.
func (niq *NewsItemQuery) WithFeed(opts ...func(*RSSFeedQuery)) *NewsItemQuery {
	query := (&RSSFeedClient{config: niq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	niq.withFeed = query
	return niq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NewsItem.Query().
//		GroupBy(newsitem.FieldCreateTime).
//		Aggregate(build.Count()).
//		Scan(ctx, &v)
func (niq *NewsItemQuery) GroupBy(field string, fields ...string) *NewsItemGroupBy {
	niq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &NewsItemGroupBy{build: niq}
	grbuild.flds = &niq.ctx.Fields
	grbuild.label = newsitem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.NewsItem.Query().
//		Select(newsitem.FieldCreateTime).
//		Scan(ctx, &v)
func (niq *NewsItemQuery) Select(fields ...string) *NewsItemSelect {
	niq.ctx.Fields = append(niq.ctx.Fields, fields...)
	sbuild := &NewsItemSelect{NewsItemQuery: niq}
	sbuild.label = newsitem.Label
	sbuild.flds, sbuild.scan = &niq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a NewsItemSelect configured with the given aggregations.
func (niq *NewsItemQuery) Aggregate(fns ...AggregateFunc) *NewsItemSelect {
	return niq.Select().Aggregate(fns...)
}

func (niq *NewsItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range niq.inters {
		if inter == nil {
			return fmt.Errorf("build: uninitialized interceptor (forgotten import build/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, niq); err != nil {
				return err
			}
		}
	}
	for _, f := range niq.ctx.Fields {
		if !newsitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("build: invalid field %q for query", f)}
		}
	}
	if niq.path != nil {
		prev, err := niq.path(ctx)
		if err != nil {
			return err
		}
		niq.sql = prev
	}
	return nil
}

func (niq *NewsItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*NewsItem, error) {
	var (
		nodes       = []*NewsItem{}
		withFKs     = niq.withFKs
		_spec       = niq.querySpec()
		loadedTypes = [2]bool{
			niq.withAuthors != nil,
			niq.withFeed != nil,
		}
	)
	if niq.withFeed != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, newsitem.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*NewsItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &NewsItem{config: niq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(niq.modifiers) > 0 {
		_spec.Modifiers = niq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, niq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := niq.withAuthors; query != nil {
		if err := niq.loadAuthors(ctx, query, nodes,
			func(n *NewsItem) { n.Edges.Authors = []*RSSAuthor{} },
			func(n *NewsItem, e *RSSAuthor) { n.Edges.Authors = append(n.Edges.Authors, e) }); err != nil {
			return nil, err
		}
	}
	if query := niq.withFeed; query != nil {
		if err := niq.loadFeed(ctx, query, nodes, nil,
			func(n *NewsItem, e *RSSFeed) { n.Edges.Feed = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (niq *NewsItemQuery) loadAuthors(ctx context.Context, query *RSSAuthorQuery, nodes []*NewsItem, init func(*NewsItem), assign func(*NewsItem, *RSSAuthor)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*NewsItem)
	nids := make(map[uuid.UUID]map[*NewsItem]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(newsitem.AuthorsTable)
		s.Join(joinT).On(s.C(rssauthor.FieldID), joinT.C(newsitem.AuthorsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(newsitem.AuthorsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(newsitem.AuthorsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*NewsItem]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*RSSAuthor](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "authors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (niq *NewsItemQuery) loadFeed(ctx context.Context, query *RSSFeedQuery, nodes []*NewsItem, init func(*NewsItem), assign func(*NewsItem, *RSSFeed)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*NewsItem)
	for i := range nodes {
		if nodes[i].news_item_feed == nil {
			continue
		}
		fk := *nodes[i].news_item_feed
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rssfeed.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "news_item_feed" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (niq *NewsItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := niq.querySpec()
	if len(niq.modifiers) > 0 {
		_spec.Modifiers = niq.modifiers
	}
	_spec.Node.Columns = niq.ctx.Fields
	if len(niq.ctx.Fields) > 0 {
		_spec.Unique = niq.ctx.Unique != nil && *niq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, niq.driver, _spec)
}

func (niq *NewsItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(newsitem.Table, newsitem.Columns, sqlgraph.NewFieldSpec(newsitem.FieldID, field.TypeUUID))
	_spec.From = niq.sql
	if unique := niq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if niq.path != nil {
		_spec.Unique = true
	}
	if fields := niq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, newsitem.FieldID)
		for i := range fields {
			if fields[i] != newsitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := niq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := niq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := niq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := niq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (niq *NewsItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(niq.driver.Dialect())
	t1 := builder.Table(newsitem.Table)
	columns := niq.ctx.Fields
	if len(columns) == 0 {
		columns = newsitem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if niq.sql != nil {
		selector = niq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if niq.ctx.Unique != nil && *niq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range niq.modifiers {
		m(selector)
	}
	for _, p := range niq.predicates {
		p(selector)
	}
	for _, p := range niq.order {
		p(selector)
	}
	if offset := niq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := niq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (niq *NewsItemQuery) ForUpdate(opts ...sql.LockOption) *NewsItemQuery {
	if niq.driver.Dialect() == dialect.Postgres {
		niq.Unique(false)
	}
	niq.modifiers = append(niq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return niq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (niq *NewsItemQuery) ForShare(opts ...sql.LockOption) *NewsItemQuery {
	if niq.driver.Dialect() == dialect.Postgres {
		niq.Unique(false)
	}
	niq.modifiers = append(niq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return niq
}

// NewsItemGroupBy is the group-by builder for NewsItem entities.
type NewsItemGroupBy struct {
	selector
	build *NewsItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (nigb *NewsItemGroupBy) Aggregate(fns ...AggregateFunc) *NewsItemGroupBy {
	nigb.fns = append(nigb.fns, fns...)
	return nigb
}

// Scan applies the selector query and scans the result into the given value.
func (nigb *NewsItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nigb.build.ctx, "GroupBy")
	if err := nigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NewsItemQuery, *NewsItemGroupBy](ctx, nigb.build, nigb, nigb.build.inters, v)
}

func (nigb *NewsItemGroupBy) sqlScan(ctx context.Context, root *NewsItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(nigb.fns))
	for _, fn := range nigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*nigb.flds)+len(nigb.fns))
		for _, f := range *nigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*nigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// NewsItemSelect is the builder for selecting fields of NewsItem entities.
type NewsItemSelect struct {
	*NewsItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (nis *NewsItemSelect) Aggregate(fns ...AggregateFunc) *NewsItemSelect {
	nis.fns = append(nis.fns, fns...)
	return nis
}

// Scan applies the selector query and scans the result into the given value.
func (nis *NewsItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nis.ctx, "Select")
	if err := nis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NewsItemQuery, *NewsItemSelect](ctx, nis.NewsItemQuery, nis, nis.inters, v)
}

func (nis *NewsItemSelect) sqlScan(ctx context.Context, root *NewsItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(nis.fns))
	for _, fn := range nis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*nis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
