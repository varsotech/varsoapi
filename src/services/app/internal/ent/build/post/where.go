// Code generated by ent, DO NOT EDIT.

package post

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldID, id))
}

// AuthorUserUUID applies equality check predicate on the "author_user_uuid" field. It's identical to AuthorUserUUIDEQ.
func AuthorUserUUID(v uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldAuthorUserUUID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTitle, v))
}

// CoverImage applies equality check predicate on the "cover_image" field. It's identical to CoverImageEQ.
func CoverImage(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCoverImage, v))
}

// TotalVotes applies equality check predicate on the "total_votes" field. It's identical to TotalVotesEQ.
func TotalVotes(v int64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTotalVotes, v))
}

// Upvotes applies equality check predicate on the "upvotes" field. It's identical to UpvotesEQ.
func Upvotes(v int64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldUpvotes, v))
}

// Downvotes applies equality check predicate on the "downvotes" field. It's identical to DownvotesEQ.
func Downvotes(v int64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDownvotes, v))
}

// AuthorUserUUIDEQ applies the EQ predicate on the "author_user_uuid" field.
func AuthorUserUUIDEQ(v uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldAuthorUserUUID, v))
}

// AuthorUserUUIDNEQ applies the NEQ predicate on the "author_user_uuid" field.
func AuthorUserUUIDNEQ(v uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldAuthorUserUUID, v))
}

// AuthorUserUUIDIn applies the In predicate on the "author_user_uuid" field.
func AuthorUserUUIDIn(vs ...uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldAuthorUserUUID, vs...))
}

// AuthorUserUUIDNotIn applies the NotIn predicate on the "author_user_uuid" field.
func AuthorUserUUIDNotIn(vs ...uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldAuthorUserUUID, vs...))
}

// AuthorUserUUIDGT applies the GT predicate on the "author_user_uuid" field.
func AuthorUserUUIDGT(v uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldAuthorUserUUID, v))
}

// AuthorUserUUIDGTE applies the GTE predicate on the "author_user_uuid" field.
func AuthorUserUUIDGTE(v uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldAuthorUserUUID, v))
}

// AuthorUserUUIDLT applies the LT predicate on the "author_user_uuid" field.
func AuthorUserUUIDLT(v uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldAuthorUserUUID, v))
}

// AuthorUserUUIDLTE applies the LTE predicate on the "author_user_uuid" field.
func AuthorUserUUIDLTE(v uuid.UUID) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldAuthorUserUUID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldTitle, v))
}

// CoverImageEQ applies the EQ predicate on the "cover_image" field.
func CoverImageEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCoverImage, v))
}

// CoverImageNEQ applies the NEQ predicate on the "cover_image" field.
func CoverImageNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldCoverImage, v))
}

// CoverImageIn applies the In predicate on the "cover_image" field.
func CoverImageIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldCoverImage, vs...))
}

// CoverImageNotIn applies the NotIn predicate on the "cover_image" field.
func CoverImageNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldCoverImage, vs...))
}

// CoverImageGT applies the GT predicate on the "cover_image" field.
func CoverImageGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldCoverImage, v))
}

// CoverImageGTE applies the GTE predicate on the "cover_image" field.
func CoverImageGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldCoverImage, v))
}

// CoverImageLT applies the LT predicate on the "cover_image" field.
func CoverImageLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldCoverImage, v))
}

// CoverImageLTE applies the LTE predicate on the "cover_image" field.
func CoverImageLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldCoverImage, v))
}

// CoverImageContains applies the Contains predicate on the "cover_image" field.
func CoverImageContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldCoverImage, v))
}

// CoverImageHasPrefix applies the HasPrefix predicate on the "cover_image" field.
func CoverImageHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldCoverImage, v))
}

// CoverImageHasSuffix applies the HasSuffix predicate on the "cover_image" field.
func CoverImageHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldCoverImage, v))
}

// CoverImageEqualFold applies the EqualFold predicate on the "cover_image" field.
func CoverImageEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldCoverImage, v))
}

// CoverImageContainsFold applies the ContainsFold predicate on the "cover_image" field.
func CoverImageContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldCoverImage, v))
}

// TotalVotesEQ applies the EQ predicate on the "total_votes" field.
func TotalVotesEQ(v int64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTotalVotes, v))
}

// TotalVotesNEQ applies the NEQ predicate on the "total_votes" field.
func TotalVotesNEQ(v int64) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldTotalVotes, v))
}

// TotalVotesIn applies the In predicate on the "total_votes" field.
func TotalVotesIn(vs ...int64) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldTotalVotes, vs...))
}

// TotalVotesNotIn applies the NotIn predicate on the "total_votes" field.
func TotalVotesNotIn(vs ...int64) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldTotalVotes, vs...))
}

// TotalVotesGT applies the GT predicate on the "total_votes" field.
func TotalVotesGT(v int64) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldTotalVotes, v))
}

// TotalVotesGTE applies the GTE predicate on the "total_votes" field.
func TotalVotesGTE(v int64) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldTotalVotes, v))
}

// TotalVotesLT applies the LT predicate on the "total_votes" field.
func TotalVotesLT(v int64) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldTotalVotes, v))
}

// TotalVotesLTE applies the LTE predicate on the "total_votes" field.
func TotalVotesLTE(v int64) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldTotalVotes, v))
}

// UpvotesEQ applies the EQ predicate on the "upvotes" field.
func UpvotesEQ(v int64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldUpvotes, v))
}

// UpvotesNEQ applies the NEQ predicate on the "upvotes" field.
func UpvotesNEQ(v int64) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldUpvotes, v))
}

// UpvotesIn applies the In predicate on the "upvotes" field.
func UpvotesIn(vs ...int64) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldUpvotes, vs...))
}

// UpvotesNotIn applies the NotIn predicate on the "upvotes" field.
func UpvotesNotIn(vs ...int64) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldUpvotes, vs...))
}

// UpvotesGT applies the GT predicate on the "upvotes" field.
func UpvotesGT(v int64) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldUpvotes, v))
}

// UpvotesGTE applies the GTE predicate on the "upvotes" field.
func UpvotesGTE(v int64) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldUpvotes, v))
}

// UpvotesLT applies the LT predicate on the "upvotes" field.
func UpvotesLT(v int64) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldUpvotes, v))
}

// UpvotesLTE applies the LTE predicate on the "upvotes" field.
func UpvotesLTE(v int64) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldUpvotes, v))
}

// DownvotesEQ applies the EQ predicate on the "downvotes" field.
func DownvotesEQ(v int64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDownvotes, v))
}

// DownvotesNEQ applies the NEQ predicate on the "downvotes" field.
func DownvotesNEQ(v int64) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldDownvotes, v))
}

// DownvotesIn applies the In predicate on the "downvotes" field.
func DownvotesIn(vs ...int64) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldDownvotes, vs...))
}

// DownvotesNotIn applies the NotIn predicate on the "downvotes" field.
func DownvotesNotIn(vs ...int64) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldDownvotes, vs...))
}

// DownvotesGT applies the GT predicate on the "downvotes" field.
func DownvotesGT(v int64) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldDownvotes, v))
}

// DownvotesGTE applies the GTE predicate on the "downvotes" field.
func DownvotesGTE(v int64) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldDownvotes, v))
}

// DownvotesLT applies the LT predicate on the "downvotes" field.
func DownvotesLT(v int64) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldDownvotes, v))
}

// DownvotesLTE applies the LTE predicate on the "downvotes" field.
func DownvotesLTE(v int64) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldDownvotes, v))
}

// HasComments applies the HasEdge predicate on the "comments" edge.
func HasComments() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentsWith applies the HasEdge predicate on the "comments" edge with a given conditions (other predicates).
func HasCommentsWith(preds ...predicate.Comment) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newCommentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Post) predicate.Post {
	return predicate.Post(sql.NotPredicates(p))
}
