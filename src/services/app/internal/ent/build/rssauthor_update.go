// Code generated by ent, DO NOT EDIT.

package build

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/newsitem"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/organization"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/person"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/predicate"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/rssauthor"
)

// RSSAuthorUpdate is the builder for updating RSSAuthor entities.
type RSSAuthorUpdate struct {
	config
	hooks    []Hook
	mutation *RSSAuthorMutation
}

// Where appends a list predicates to the RSSAuthorUpdate builder.
func (rau *RSSAuthorUpdate) Where(ps ...predicate.RSSAuthor) *RSSAuthorUpdate {
	rau.mutation.Where(ps...)
	return rau
}

// SetEmail sets the "email" field.
func (rau *RSSAuthorUpdate) SetEmail(s string) *RSSAuthorUpdate {
	rau.mutation.SetEmail(s)
	return rau
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (rau *RSSAuthorUpdate) SetNillableEmail(s *string) *RSSAuthorUpdate {
	if s != nil {
		rau.SetEmail(*s)
	}
	return rau
}

// ClearEmail clears the value of the "email" field.
func (rau *RSSAuthorUpdate) ClearEmail() *RSSAuthorUpdate {
	rau.mutation.ClearEmail()
	return rau
}

// SetName sets the "name" field.
func (rau *RSSAuthorUpdate) SetName(s string) *RSSAuthorUpdate {
	rau.mutation.SetName(s)
	return rau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rau *RSSAuthorUpdate) SetNillableName(s *string) *RSSAuthorUpdate {
	if s != nil {
		rau.SetName(*s)
	}
	return rau
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (rau *RSSAuthorUpdate) SetPersonID(id uuid.UUID) *RSSAuthorUpdate {
	rau.mutation.SetPersonID(id)
	return rau
}

// SetNillablePersonID sets the "person" edge to the Person entity by ID if the given value is not nil.
func (rau *RSSAuthorUpdate) SetNillablePersonID(id *uuid.UUID) *RSSAuthorUpdate {
	if id != nil {
		rau = rau.SetPersonID(*id)
	}
	return rau
}

// SetPerson sets the "person" edge to the Person entity.
func (rau *RSSAuthorUpdate) SetPerson(p *Person) *RSSAuthorUpdate {
	return rau.SetPersonID(p.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (rau *RSSAuthorUpdate) SetOrganizationID(id uuid.UUID) *RSSAuthorUpdate {
	rau.mutation.SetOrganizationID(id)
	return rau
}

// SetNillableOrganizationID sets the "organization" edge to the Organization entity by ID if the given value is not nil.
func (rau *RSSAuthorUpdate) SetNillableOrganizationID(id *uuid.UUID) *RSSAuthorUpdate {
	if id != nil {
		rau = rau.SetOrganizationID(*id)
	}
	return rau
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (rau *RSSAuthorUpdate) SetOrganization(o *Organization) *RSSAuthorUpdate {
	return rau.SetOrganizationID(o.ID)
}

// AddNewsitemIDs adds the "newsitem" edge to the NewsItem entity by IDs.
func (rau *RSSAuthorUpdate) AddNewsitemIDs(ids ...uuid.UUID) *RSSAuthorUpdate {
	rau.mutation.AddNewsitemIDs(ids...)
	return rau
}

// AddNewsitem adds the "newsitem" edges to the NewsItem entity.
func (rau *RSSAuthorUpdate) AddNewsitem(n ...*NewsItem) *RSSAuthorUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return rau.AddNewsitemIDs(ids...)
}

// Mutation returns the RSSAuthorMutation object of the builder.
func (rau *RSSAuthorUpdate) Mutation() *RSSAuthorMutation {
	return rau.mutation
}

// ClearPerson clears the "person" edge to the Person entity.
func (rau *RSSAuthorUpdate) ClearPerson() *RSSAuthorUpdate {
	rau.mutation.ClearPerson()
	return rau
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (rau *RSSAuthorUpdate) ClearOrganization() *RSSAuthorUpdate {
	rau.mutation.ClearOrganization()
	return rau
}

// ClearNewsitem clears all "newsitem" edges to the NewsItem entity.
func (rau *RSSAuthorUpdate) ClearNewsitem() *RSSAuthorUpdate {
	rau.mutation.ClearNewsitem()
	return rau
}

// RemoveNewsitemIDs removes the "newsitem" edge to NewsItem entities by IDs.
func (rau *RSSAuthorUpdate) RemoveNewsitemIDs(ids ...uuid.UUID) *RSSAuthorUpdate {
	rau.mutation.RemoveNewsitemIDs(ids...)
	return rau
}

// RemoveNewsitem removes "newsitem" edges to NewsItem entities.
func (rau *RSSAuthorUpdate) RemoveNewsitem(n ...*NewsItem) *RSSAuthorUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return rau.RemoveNewsitemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rau *RSSAuthorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rau.sqlSave, rau.mutation, rau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rau *RSSAuthorUpdate) SaveX(ctx context.Context) int {
	affected, err := rau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rau *RSSAuthorUpdate) Exec(ctx context.Context) error {
	_, err := rau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rau *RSSAuthorUpdate) ExecX(ctx context.Context) {
	if err := rau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rau *RSSAuthorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rssauthor.Table, rssauthor.Columns, sqlgraph.NewFieldSpec(rssauthor.FieldID, field.TypeUUID))
	if ps := rau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rau.mutation.Email(); ok {
		_spec.SetField(rssauthor.FieldEmail, field.TypeString, value)
	}
	if rau.mutation.EmailCleared() {
		_spec.ClearField(rssauthor.FieldEmail, field.TypeString)
	}
	if value, ok := rau.mutation.Name(); ok {
		_spec.SetField(rssauthor.FieldName, field.TypeString, value)
	}
	if rau.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rssauthor.PersonTable,
			Columns: []string{rssauthor.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rau.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rssauthor.PersonTable,
			Columns: []string{rssauthor.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rau.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rssauthor.OrganizationTable,
			Columns: []string{rssauthor.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rau.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rssauthor.OrganizationTable,
			Columns: []string{rssauthor.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rau.mutation.NewsitemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rssauthor.NewsitemTable,
			Columns: rssauthor.NewsitemPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newsitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rau.mutation.RemovedNewsitemIDs(); len(nodes) > 0 && !rau.mutation.NewsitemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rssauthor.NewsitemTable,
			Columns: rssauthor.NewsitemPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newsitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rau.mutation.NewsitemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rssauthor.NewsitemTable,
			Columns: rssauthor.NewsitemPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newsitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rssauthor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rau.mutation.done = true
	return n, nil
}

// RSSAuthorUpdateOne is the builder for updating a single RSSAuthor entity.
type RSSAuthorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RSSAuthorMutation
}

// SetEmail sets the "email" field.
func (rauo *RSSAuthorUpdateOne) SetEmail(s string) *RSSAuthorUpdateOne {
	rauo.mutation.SetEmail(s)
	return rauo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (rauo *RSSAuthorUpdateOne) SetNillableEmail(s *string) *RSSAuthorUpdateOne {
	if s != nil {
		rauo.SetEmail(*s)
	}
	return rauo
}

// ClearEmail clears the value of the "email" field.
func (rauo *RSSAuthorUpdateOne) ClearEmail() *RSSAuthorUpdateOne {
	rauo.mutation.ClearEmail()
	return rauo
}

// SetName sets the "name" field.
func (rauo *RSSAuthorUpdateOne) SetName(s string) *RSSAuthorUpdateOne {
	rauo.mutation.SetName(s)
	return rauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rauo *RSSAuthorUpdateOne) SetNillableName(s *string) *RSSAuthorUpdateOne {
	if s != nil {
		rauo.SetName(*s)
	}
	return rauo
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (rauo *RSSAuthorUpdateOne) SetPersonID(id uuid.UUID) *RSSAuthorUpdateOne {
	rauo.mutation.SetPersonID(id)
	return rauo
}

// SetNillablePersonID sets the "person" edge to the Person entity by ID if the given value is not nil.
func (rauo *RSSAuthorUpdateOne) SetNillablePersonID(id *uuid.UUID) *RSSAuthorUpdateOne {
	if id != nil {
		rauo = rauo.SetPersonID(*id)
	}
	return rauo
}

// SetPerson sets the "person" edge to the Person entity.
func (rauo *RSSAuthorUpdateOne) SetPerson(p *Person) *RSSAuthorUpdateOne {
	return rauo.SetPersonID(p.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (rauo *RSSAuthorUpdateOne) SetOrganizationID(id uuid.UUID) *RSSAuthorUpdateOne {
	rauo.mutation.SetOrganizationID(id)
	return rauo
}

// SetNillableOrganizationID sets the "organization" edge to the Organization entity by ID if the given value is not nil.
func (rauo *RSSAuthorUpdateOne) SetNillableOrganizationID(id *uuid.UUID) *RSSAuthorUpdateOne {
	if id != nil {
		rauo = rauo.SetOrganizationID(*id)
	}
	return rauo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (rauo *RSSAuthorUpdateOne) SetOrganization(o *Organization) *RSSAuthorUpdateOne {
	return rauo.SetOrganizationID(o.ID)
}

// AddNewsitemIDs adds the "newsitem" edge to the NewsItem entity by IDs.
func (rauo *RSSAuthorUpdateOne) AddNewsitemIDs(ids ...uuid.UUID) *RSSAuthorUpdateOne {
	rauo.mutation.AddNewsitemIDs(ids...)
	return rauo
}

// AddNewsitem adds the "newsitem" edges to the NewsItem entity.
func (rauo *RSSAuthorUpdateOne) AddNewsitem(n ...*NewsItem) *RSSAuthorUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return rauo.AddNewsitemIDs(ids...)
}

// Mutation returns the RSSAuthorMutation object of the builder.
func (rauo *RSSAuthorUpdateOne) Mutation() *RSSAuthorMutation {
	return rauo.mutation
}

// ClearPerson clears the "person" edge to the Person entity.
func (rauo *RSSAuthorUpdateOne) ClearPerson() *RSSAuthorUpdateOne {
	rauo.mutation.ClearPerson()
	return rauo
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (rauo *RSSAuthorUpdateOne) ClearOrganization() *RSSAuthorUpdateOne {
	rauo.mutation.ClearOrganization()
	return rauo
}

// ClearNewsitem clears all "newsitem" edges to the NewsItem entity.
func (rauo *RSSAuthorUpdateOne) ClearNewsitem() *RSSAuthorUpdateOne {
	rauo.mutation.ClearNewsitem()
	return rauo
}

// RemoveNewsitemIDs removes the "newsitem" edge to NewsItem entities by IDs.
func (rauo *RSSAuthorUpdateOne) RemoveNewsitemIDs(ids ...uuid.UUID) *RSSAuthorUpdateOne {
	rauo.mutation.RemoveNewsitemIDs(ids...)
	return rauo
}

// RemoveNewsitem removes "newsitem" edges to NewsItem entities.
func (rauo *RSSAuthorUpdateOne) RemoveNewsitem(n ...*NewsItem) *RSSAuthorUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return rauo.RemoveNewsitemIDs(ids...)
}

// Where appends a list predicates to the RSSAuthorUpdate builder.
func (rauo *RSSAuthorUpdateOne) Where(ps ...predicate.RSSAuthor) *RSSAuthorUpdateOne {
	rauo.mutation.Where(ps...)
	return rauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rauo *RSSAuthorUpdateOne) Select(field string, fields ...string) *RSSAuthorUpdateOne {
	rauo.fields = append([]string{field}, fields...)
	return rauo
}

// Save executes the query and returns the updated RSSAuthor entity.
func (rauo *RSSAuthorUpdateOne) Save(ctx context.Context) (*RSSAuthor, error) {
	return withHooks(ctx, rauo.sqlSave, rauo.mutation, rauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rauo *RSSAuthorUpdateOne) SaveX(ctx context.Context) *RSSAuthor {
	node, err := rauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rauo *RSSAuthorUpdateOne) Exec(ctx context.Context) error {
	_, err := rauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rauo *RSSAuthorUpdateOne) ExecX(ctx context.Context) {
	if err := rauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rauo *RSSAuthorUpdateOne) sqlSave(ctx context.Context) (_node *RSSAuthor, err error) {
	_spec := sqlgraph.NewUpdateSpec(rssauthor.Table, rssauthor.Columns, sqlgraph.NewFieldSpec(rssauthor.FieldID, field.TypeUUID))
	id, ok := rauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`build: missing "RSSAuthor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rssauthor.FieldID)
		for _, f := range fields {
			if !rssauthor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("build: invalid field %q for query", f)}
			}
			if f != rssauthor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rauo.mutation.Email(); ok {
		_spec.SetField(rssauthor.FieldEmail, field.TypeString, value)
	}
	if rauo.mutation.EmailCleared() {
		_spec.ClearField(rssauthor.FieldEmail, field.TypeString)
	}
	if value, ok := rauo.mutation.Name(); ok {
		_spec.SetField(rssauthor.FieldName, field.TypeString, value)
	}
	if rauo.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rssauthor.PersonTable,
			Columns: []string{rssauthor.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rauo.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rssauthor.PersonTable,
			Columns: []string{rssauthor.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rauo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rssauthor.OrganizationTable,
			Columns: []string{rssauthor.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rauo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rssauthor.OrganizationTable,
			Columns: []string{rssauthor.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rauo.mutation.NewsitemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rssauthor.NewsitemTable,
			Columns: rssauthor.NewsitemPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newsitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rauo.mutation.RemovedNewsitemIDs(); len(nodes) > 0 && !rauo.mutation.NewsitemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rssauthor.NewsitemTable,
			Columns: rssauthor.NewsitemPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newsitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rauo.mutation.NewsitemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rssauthor.NewsitemTable,
			Columns: rssauthor.NewsitemPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newsitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RSSAuthor{config: rauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rssauthor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rauo.mutation.done = true
	return _node, nil
}
