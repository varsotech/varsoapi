// Code generated by ent, DO NOT EDIT.

package build

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/newsitem"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/rssauthor"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/rssfeed"
)

// NewsItemCreate is the builder for creating a NewsItem entity.
type NewsItemCreate struct {
	config
	mutation *NewsItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (nic *NewsItemCreate) SetCreateTime(t time.Time) *NewsItemCreate {
	nic.mutation.SetCreateTime(t)
	return nic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (nic *NewsItemCreate) SetNillableCreateTime(t *time.Time) *NewsItemCreate {
	if t != nil {
		nic.SetCreateTime(*t)
	}
	return nic
}

// SetUpdateTime sets the "update_time" field.
func (nic *NewsItemCreate) SetUpdateTime(t time.Time) *NewsItemCreate {
	nic.mutation.SetUpdateTime(t)
	return nic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (nic *NewsItemCreate) SetNillableUpdateTime(t *time.Time) *NewsItemCreate {
	if t != nil {
		nic.SetUpdateTime(*t)
	}
	return nic
}

// SetRssGUID sets the "rss_guid" field.
func (nic *NewsItemCreate) SetRssGUID(s string) *NewsItemCreate {
	nic.mutation.SetRssGUID(s)
	return nic
}

// SetTitle sets the "title" field.
func (nic *NewsItemCreate) SetTitle(s string) *NewsItemCreate {
	nic.mutation.SetTitle(s)
	return nic
}

// SetDescription sets the "description" field.
func (nic *NewsItemCreate) SetDescription(s string) *NewsItemCreate {
	nic.mutation.SetDescription(s)
	return nic
}

// SetContent sets the "content" field.
func (nic *NewsItemCreate) SetContent(s string) *NewsItemCreate {
	nic.mutation.SetContent(s)
	return nic
}

// SetLink sets the "link" field.
func (nic *NewsItemCreate) SetLink(s string) *NewsItemCreate {
	nic.mutation.SetLink(s)
	return nic
}

// SetLinks sets the "links" field.
func (nic *NewsItemCreate) SetLinks(s []string) *NewsItemCreate {
	nic.mutation.SetLinks(s)
	return nic
}

// SetItemPublishTime sets the "item_publish_time" field.
func (nic *NewsItemCreate) SetItemPublishTime(t time.Time) *NewsItemCreate {
	nic.mutation.SetItemPublishTime(t)
	return nic
}

// SetNillableItemPublishTime sets the "item_publish_time" field if the given value is not nil.
func (nic *NewsItemCreate) SetNillableItemPublishTime(t *time.Time) *NewsItemCreate {
	if t != nil {
		nic.SetItemPublishTime(*t)
	}
	return nic
}

// SetItemUpdateTime sets the "item_update_time" field.
func (nic *NewsItemCreate) SetItemUpdateTime(t time.Time) *NewsItemCreate {
	nic.mutation.SetItemUpdateTime(t)
	return nic
}

// SetNillableItemUpdateTime sets the "item_update_time" field if the given value is not nil.
func (nic *NewsItemCreate) SetNillableItemUpdateTime(t *time.Time) *NewsItemCreate {
	if t != nil {
		nic.SetItemUpdateTime(*t)
	}
	return nic
}

// SetImageURL sets the "image_url" field.
func (nic *NewsItemCreate) SetImageURL(s string) *NewsItemCreate {
	nic.mutation.SetImageURL(s)
	return nic
}

// SetImageTitle sets the "image_title" field.
func (nic *NewsItemCreate) SetImageTitle(s string) *NewsItemCreate {
	nic.mutation.SetImageTitle(s)
	return nic
}

// SetCategories sets the "categories" field.
func (nic *NewsItemCreate) SetCategories(s []string) *NewsItemCreate {
	nic.mutation.SetCategories(s)
	return nic
}

// SetBlur sets the "blur" field.
func (nic *NewsItemCreate) SetBlur(b bool) *NewsItemCreate {
	nic.mutation.SetBlur(b)
	return nic
}

// SetNillableBlur sets the "blur" field if the given value is not nil.
func (nic *NewsItemCreate) SetNillableBlur(b *bool) *NewsItemCreate {
	if b != nil {
		nic.SetBlur(*b)
	}
	return nic
}

// SetID sets the "id" field.
func (nic *NewsItemCreate) SetID(u uuid.UUID) *NewsItemCreate {
	nic.mutation.SetID(u)
	return nic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (nic *NewsItemCreate) SetNillableID(u *uuid.UUID) *NewsItemCreate {
	if u != nil {
		nic.SetID(*u)
	}
	return nic
}

// AddAuthorIDs adds the "authors" edge to the RSSAuthor entity by IDs.
func (nic *NewsItemCreate) AddAuthorIDs(ids ...uuid.UUID) *NewsItemCreate {
	nic.mutation.AddAuthorIDs(ids...)
	return nic
}

// AddAuthors adds the "authors" edges to the RSSAuthor entity.
func (nic *NewsItemCreate) AddAuthors(r ...*RSSAuthor) *NewsItemCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return nic.AddAuthorIDs(ids...)
}

// SetFeedID sets the "feed" edge to the RSSFeed entity by ID.
func (nic *NewsItemCreate) SetFeedID(id uuid.UUID) *NewsItemCreate {
	nic.mutation.SetFeedID(id)
	return nic
}

// SetNillableFeedID sets the "feed" edge to the RSSFeed entity by ID if the given value is not nil.
func (nic *NewsItemCreate) SetNillableFeedID(id *uuid.UUID) *NewsItemCreate {
	if id != nil {
		nic = nic.SetFeedID(*id)
	}
	return nic
}

// SetFeed sets the "feed" edge to the RSSFeed entity.
func (nic *NewsItemCreate) SetFeed(r *RSSFeed) *NewsItemCreate {
	return nic.SetFeedID(r.ID)
}

// Mutation returns the NewsItemMutation object of the builder.
func (nic *NewsItemCreate) Mutation() *NewsItemMutation {
	return nic.mutation
}

// Save creates the NewsItem in the database.
func (nic *NewsItemCreate) Save(ctx context.Context) (*NewsItem, error) {
	nic.defaults()
	return withHooks(ctx, nic.sqlSave, nic.mutation, nic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nic *NewsItemCreate) SaveX(ctx context.Context) *NewsItem {
	v, err := nic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nic *NewsItemCreate) Exec(ctx context.Context) error {
	_, err := nic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nic *NewsItemCreate) ExecX(ctx context.Context) {
	if err := nic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nic *NewsItemCreate) defaults() {
	if _, ok := nic.mutation.CreateTime(); !ok {
		v := newsitem.DefaultCreateTime()
		nic.mutation.SetCreateTime(v)
	}
	if _, ok := nic.mutation.UpdateTime(); !ok {
		v := newsitem.DefaultUpdateTime()
		nic.mutation.SetUpdateTime(v)
	}
	if _, ok := nic.mutation.Blur(); !ok {
		v := newsitem.DefaultBlur
		nic.mutation.SetBlur(v)
	}
	if _, ok := nic.mutation.ID(); !ok {
		v := newsitem.DefaultID()
		nic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nic *NewsItemCreate) check() error {
	if _, ok := nic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`build: missing required field "NewsItem.create_time"`)}
	}
	if _, ok := nic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`build: missing required field "NewsItem.update_time"`)}
	}
	if _, ok := nic.mutation.RssGUID(); !ok {
		return &ValidationError{Name: "rss_guid", err: errors.New(`build: missing required field "NewsItem.rss_guid"`)}
	}
	if _, ok := nic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`build: missing required field "NewsItem.title"`)}
	}
	if _, ok := nic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`build: missing required field "NewsItem.description"`)}
	}
	if _, ok := nic.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`build: missing required field "NewsItem.content"`)}
	}
	if _, ok := nic.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`build: missing required field "NewsItem.link"`)}
	}
	if _, ok := nic.mutation.Links(); !ok {
		return &ValidationError{Name: "links", err: errors.New(`build: missing required field "NewsItem.links"`)}
	}
	if _, ok := nic.mutation.ImageURL(); !ok {
		return &ValidationError{Name: "image_url", err: errors.New(`build: missing required field "NewsItem.image_url"`)}
	}
	if _, ok := nic.mutation.ImageTitle(); !ok {
		return &ValidationError{Name: "image_title", err: errors.New(`build: missing required field "NewsItem.image_title"`)}
	}
	if _, ok := nic.mutation.Categories(); !ok {
		return &ValidationError{Name: "categories", err: errors.New(`build: missing required field "NewsItem.categories"`)}
	}
	if _, ok := nic.mutation.Blur(); !ok {
		return &ValidationError{Name: "blur", err: errors.New(`build: missing required field "NewsItem.blur"`)}
	}
	return nil
}

func (nic *NewsItemCreate) sqlSave(ctx context.Context) (*NewsItem, error) {
	if err := nic.check(); err != nil {
		return nil, err
	}
	_node, _spec := nic.createSpec()
	if err := sqlgraph.CreateNode(ctx, nic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	nic.mutation.id = &_node.ID
	nic.mutation.done = true
	return _node, nil
}

func (nic *NewsItemCreate) createSpec() (*NewsItem, *sqlgraph.CreateSpec) {
	var (
		_node = &NewsItem{config: nic.config}
		_spec = sqlgraph.NewCreateSpec(newsitem.Table, sqlgraph.NewFieldSpec(newsitem.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = nic.conflict
	if id, ok := nic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := nic.mutation.CreateTime(); ok {
		_spec.SetField(newsitem.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := nic.mutation.UpdateTime(); ok {
		_spec.SetField(newsitem.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := nic.mutation.RssGUID(); ok {
		_spec.SetField(newsitem.FieldRssGUID, field.TypeString, value)
		_node.RssGUID = value
	}
	if value, ok := nic.mutation.Title(); ok {
		_spec.SetField(newsitem.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := nic.mutation.Description(); ok {
		_spec.SetField(newsitem.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := nic.mutation.Content(); ok {
		_spec.SetField(newsitem.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := nic.mutation.Link(); ok {
		_spec.SetField(newsitem.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if value, ok := nic.mutation.Links(); ok {
		_spec.SetField(newsitem.FieldLinks, field.TypeJSON, value)
		_node.Links = value
	}
	if value, ok := nic.mutation.ItemPublishTime(); ok {
		_spec.SetField(newsitem.FieldItemPublishTime, field.TypeTime, value)
		_node.ItemPublishTime = value
	}
	if value, ok := nic.mutation.ItemUpdateTime(); ok {
		_spec.SetField(newsitem.FieldItemUpdateTime, field.TypeTime, value)
		_node.ItemUpdateTime = value
	}
	if value, ok := nic.mutation.ImageURL(); ok {
		_spec.SetField(newsitem.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := nic.mutation.ImageTitle(); ok {
		_spec.SetField(newsitem.FieldImageTitle, field.TypeString, value)
		_node.ImageTitle = value
	}
	if value, ok := nic.mutation.Categories(); ok {
		_spec.SetField(newsitem.FieldCategories, field.TypeJSON, value)
		_node.Categories = value
	}
	if value, ok := nic.mutation.Blur(); ok {
		_spec.SetField(newsitem.FieldBlur, field.TypeBool, value)
		_node.Blur = value
	}
	if nodes := nic.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   newsitem.AuthorsTable,
			Columns: newsitem.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rssauthor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nic.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   newsitem.FeedTable,
			Columns: []string{newsitem.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rssfeed.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.news_item_feed = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NewsItem.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NewsItemUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (nic *NewsItemCreate) OnConflict(opts ...sql.ConflictOption) *NewsItemUpsertOne {
	nic.conflict = opts
	return &NewsItemUpsertOne{
		create: nic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NewsItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nic *NewsItemCreate) OnConflictColumns(columns ...string) *NewsItemUpsertOne {
	nic.conflict = append(nic.conflict, sql.ConflictColumns(columns...))
	return &NewsItemUpsertOne{
		create: nic,
	}
}

type (
	// NewsItemUpsertOne is the builder for "upsert"-ing
	//  one NewsItem node.
	NewsItemUpsertOne struct {
		create *NewsItemCreate
	}

	// NewsItemUpsert is the "OnConflict" setter.
	NewsItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *NewsItemUpsert) SetUpdateTime(v time.Time) *NewsItemUpsert {
	u.Set(newsitem.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *NewsItemUpsert) UpdateUpdateTime() *NewsItemUpsert {
	u.SetExcluded(newsitem.FieldUpdateTime)
	return u
}

// SetRssGUID sets the "rss_guid" field.
func (u *NewsItemUpsert) SetRssGUID(v string) *NewsItemUpsert {
	u.Set(newsitem.FieldRssGUID, v)
	return u
}

// UpdateRssGUID sets the "rss_guid" field to the value that was provided on create.
func (u *NewsItemUpsert) UpdateRssGUID() *NewsItemUpsert {
	u.SetExcluded(newsitem.FieldRssGUID)
	return u
}

// SetTitle sets the "title" field.
func (u *NewsItemUpsert) SetTitle(v string) *NewsItemUpsert {
	u.Set(newsitem.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NewsItemUpsert) UpdateTitle() *NewsItemUpsert {
	u.SetExcluded(newsitem.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *NewsItemUpsert) SetDescription(v string) *NewsItemUpsert {
	u.Set(newsitem.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NewsItemUpsert) UpdateDescription() *NewsItemUpsert {
	u.SetExcluded(newsitem.FieldDescription)
	return u
}

// SetContent sets the "content" field.
func (u *NewsItemUpsert) SetContent(v string) *NewsItemUpsert {
	u.Set(newsitem.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *NewsItemUpsert) UpdateContent() *NewsItemUpsert {
	u.SetExcluded(newsitem.FieldContent)
	return u
}

// SetLink sets the "link" field.
func (u *NewsItemUpsert) SetLink(v string) *NewsItemUpsert {
	u.Set(newsitem.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *NewsItemUpsert) UpdateLink() *NewsItemUpsert {
	u.SetExcluded(newsitem.FieldLink)
	return u
}

// SetLinks sets the "links" field.
func (u *NewsItemUpsert) SetLinks(v []string) *NewsItemUpsert {
	u.Set(newsitem.FieldLinks, v)
	return u
}

// UpdateLinks sets the "links" field to the value that was provided on create.
func (u *NewsItemUpsert) UpdateLinks() *NewsItemUpsert {
	u.SetExcluded(newsitem.FieldLinks)
	return u
}

// SetItemPublishTime sets the "item_publish_time" field.
func (u *NewsItemUpsert) SetItemPublishTime(v time.Time) *NewsItemUpsert {
	u.Set(newsitem.FieldItemPublishTime, v)
	return u
}

// UpdateItemPublishTime sets the "item_publish_time" field to the value that was provided on create.
func (u *NewsItemUpsert) UpdateItemPublishTime() *NewsItemUpsert {
	u.SetExcluded(newsitem.FieldItemPublishTime)
	return u
}

// ClearItemPublishTime clears the value of the "item_publish_time" field.
func (u *NewsItemUpsert) ClearItemPublishTime() *NewsItemUpsert {
	u.SetNull(newsitem.FieldItemPublishTime)
	return u
}

// SetItemUpdateTime sets the "item_update_time" field.
func (u *NewsItemUpsert) SetItemUpdateTime(v time.Time) *NewsItemUpsert {
	u.Set(newsitem.FieldItemUpdateTime, v)
	return u
}

// UpdateItemUpdateTime sets the "item_update_time" field to the value that was provided on create.
func (u *NewsItemUpsert) UpdateItemUpdateTime() *NewsItemUpsert {
	u.SetExcluded(newsitem.FieldItemUpdateTime)
	return u
}

// ClearItemUpdateTime clears the value of the "item_update_time" field.
func (u *NewsItemUpsert) ClearItemUpdateTime() *NewsItemUpsert {
	u.SetNull(newsitem.FieldItemUpdateTime)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *NewsItemUpsert) SetImageURL(v string) *NewsItemUpsert {
	u.Set(newsitem.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *NewsItemUpsert) UpdateImageURL() *NewsItemUpsert {
	u.SetExcluded(newsitem.FieldImageURL)
	return u
}

// SetImageTitle sets the "image_title" field.
func (u *NewsItemUpsert) SetImageTitle(v string) *NewsItemUpsert {
	u.Set(newsitem.FieldImageTitle, v)
	return u
}

// UpdateImageTitle sets the "image_title" field to the value that was provided on create.
func (u *NewsItemUpsert) UpdateImageTitle() *NewsItemUpsert {
	u.SetExcluded(newsitem.FieldImageTitle)
	return u
}

// SetCategories sets the "categories" field.
func (u *NewsItemUpsert) SetCategories(v []string) *NewsItemUpsert {
	u.Set(newsitem.FieldCategories, v)
	return u
}

// UpdateCategories sets the "categories" field to the value that was provided on create.
func (u *NewsItemUpsert) UpdateCategories() *NewsItemUpsert {
	u.SetExcluded(newsitem.FieldCategories)
	return u
}

// SetBlur sets the "blur" field.
func (u *NewsItemUpsert) SetBlur(v bool) *NewsItemUpsert {
	u.Set(newsitem.FieldBlur, v)
	return u
}

// UpdateBlur sets the "blur" field to the value that was provided on create.
func (u *NewsItemUpsert) UpdateBlur() *NewsItemUpsert {
	u.SetExcluded(newsitem.FieldBlur)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NewsItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(newsitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NewsItemUpsertOne) UpdateNewValues() *NewsItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(newsitem.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(newsitem.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NewsItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NewsItemUpsertOne) Ignore() *NewsItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NewsItemUpsertOne) DoNothing() *NewsItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NewsItemCreate.OnConflict
// documentation for more info.
func (u *NewsItemUpsertOne) Update(set func(*NewsItemUpsert)) *NewsItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NewsItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *NewsItemUpsertOne) SetUpdateTime(v time.Time) *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *NewsItemUpsertOne) UpdateUpdateTime() *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetRssGUID sets the "rss_guid" field.
func (u *NewsItemUpsertOne) SetRssGUID(v string) *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetRssGUID(v)
	})
}

// UpdateRssGUID sets the "rss_guid" field to the value that was provided on create.
func (u *NewsItemUpsertOne) UpdateRssGUID() *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateRssGUID()
	})
}

// SetTitle sets the "title" field.
func (u *NewsItemUpsertOne) SetTitle(v string) *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NewsItemUpsertOne) UpdateTitle() *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *NewsItemUpsertOne) SetDescription(v string) *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NewsItemUpsertOne) UpdateDescription() *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateDescription()
	})
}

// SetContent sets the "content" field.
func (u *NewsItemUpsertOne) SetContent(v string) *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *NewsItemUpsertOne) UpdateContent() *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateContent()
	})
}

// SetLink sets the "link" field.
func (u *NewsItemUpsertOne) SetLink(v string) *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *NewsItemUpsertOne) UpdateLink() *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateLink()
	})
}

// SetLinks sets the "links" field.
func (u *NewsItemUpsertOne) SetLinks(v []string) *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetLinks(v)
	})
}

// UpdateLinks sets the "links" field to the value that was provided on create.
func (u *NewsItemUpsertOne) UpdateLinks() *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateLinks()
	})
}

// SetItemPublishTime sets the "item_publish_time" field.
func (u *NewsItemUpsertOne) SetItemPublishTime(v time.Time) *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetItemPublishTime(v)
	})
}

// UpdateItemPublishTime sets the "item_publish_time" field to the value that was provided on create.
func (u *NewsItemUpsertOne) UpdateItemPublishTime() *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateItemPublishTime()
	})
}

// ClearItemPublishTime clears the value of the "item_publish_time" field.
func (u *NewsItemUpsertOne) ClearItemPublishTime() *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.ClearItemPublishTime()
	})
}

// SetItemUpdateTime sets the "item_update_time" field.
func (u *NewsItemUpsertOne) SetItemUpdateTime(v time.Time) *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetItemUpdateTime(v)
	})
}

// UpdateItemUpdateTime sets the "item_update_time" field to the value that was provided on create.
func (u *NewsItemUpsertOne) UpdateItemUpdateTime() *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateItemUpdateTime()
	})
}

// ClearItemUpdateTime clears the value of the "item_update_time" field.
func (u *NewsItemUpsertOne) ClearItemUpdateTime() *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.ClearItemUpdateTime()
	})
}

// SetImageURL sets the "image_url" field.
func (u *NewsItemUpsertOne) SetImageURL(v string) *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *NewsItemUpsertOne) UpdateImageURL() *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateImageURL()
	})
}

// SetImageTitle sets the "image_title" field.
func (u *NewsItemUpsertOne) SetImageTitle(v string) *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetImageTitle(v)
	})
}

// UpdateImageTitle sets the "image_title" field to the value that was provided on create.
func (u *NewsItemUpsertOne) UpdateImageTitle() *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateImageTitle()
	})
}

// SetCategories sets the "categories" field.
func (u *NewsItemUpsertOne) SetCategories(v []string) *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetCategories(v)
	})
}

// UpdateCategories sets the "categories" field to the value that was provided on create.
func (u *NewsItemUpsertOne) UpdateCategories() *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateCategories()
	})
}

// SetBlur sets the "blur" field.
func (u *NewsItemUpsertOne) SetBlur(v bool) *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetBlur(v)
	})
}

// UpdateBlur sets the "blur" field to the value that was provided on create.
func (u *NewsItemUpsertOne) UpdateBlur() *NewsItemUpsertOne {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateBlur()
	})
}

// Exec executes the query.
func (u *NewsItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("build: missing options for NewsItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NewsItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NewsItemUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("build: NewsItemUpsertOne.ID is not supported by MySQL driver. Use NewsItemUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NewsItemUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NewsItemCreateBulk is the builder for creating many NewsItem entities in bulk.
type NewsItemCreateBulk struct {
	config
	err      error
	builders []*NewsItemCreate
	conflict []sql.ConflictOption
}

// Save creates the NewsItem entities in the database.
func (nicb *NewsItemCreateBulk) Save(ctx context.Context) ([]*NewsItem, error) {
	if nicb.err != nil {
		return nil, nicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nicb.builders))
	nodes := make([]*NewsItem, len(nicb.builders))
	mutators := make([]Mutator, len(nicb.builders))
	for i := range nicb.builders {
		func(i int, root context.Context) {
			builder := nicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NewsItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = nicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nicb *NewsItemCreateBulk) SaveX(ctx context.Context) []*NewsItem {
	v, err := nicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nicb *NewsItemCreateBulk) Exec(ctx context.Context) error {
	_, err := nicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nicb *NewsItemCreateBulk) ExecX(ctx context.Context) {
	if err := nicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NewsItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NewsItemUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (nicb *NewsItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *NewsItemUpsertBulk {
	nicb.conflict = opts
	return &NewsItemUpsertBulk{
		create: nicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NewsItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nicb *NewsItemCreateBulk) OnConflictColumns(columns ...string) *NewsItemUpsertBulk {
	nicb.conflict = append(nicb.conflict, sql.ConflictColumns(columns...))
	return &NewsItemUpsertBulk{
		create: nicb,
	}
}

// NewsItemUpsertBulk is the builder for "upsert"-ing
// a bulk of NewsItem nodes.
type NewsItemUpsertBulk struct {
	create *NewsItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NewsItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(newsitem.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NewsItemUpsertBulk) UpdateNewValues() *NewsItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(newsitem.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(newsitem.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NewsItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NewsItemUpsertBulk) Ignore() *NewsItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NewsItemUpsertBulk) DoNothing() *NewsItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NewsItemCreateBulk.OnConflict
// documentation for more info.
func (u *NewsItemUpsertBulk) Update(set func(*NewsItemUpsert)) *NewsItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NewsItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *NewsItemUpsertBulk) SetUpdateTime(v time.Time) *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *NewsItemUpsertBulk) UpdateUpdateTime() *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetRssGUID sets the "rss_guid" field.
func (u *NewsItemUpsertBulk) SetRssGUID(v string) *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetRssGUID(v)
	})
}

// UpdateRssGUID sets the "rss_guid" field to the value that was provided on create.
func (u *NewsItemUpsertBulk) UpdateRssGUID() *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateRssGUID()
	})
}

// SetTitle sets the "title" field.
func (u *NewsItemUpsertBulk) SetTitle(v string) *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NewsItemUpsertBulk) UpdateTitle() *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *NewsItemUpsertBulk) SetDescription(v string) *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NewsItemUpsertBulk) UpdateDescription() *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateDescription()
	})
}

// SetContent sets the "content" field.
func (u *NewsItemUpsertBulk) SetContent(v string) *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *NewsItemUpsertBulk) UpdateContent() *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateContent()
	})
}

// SetLink sets the "link" field.
func (u *NewsItemUpsertBulk) SetLink(v string) *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *NewsItemUpsertBulk) UpdateLink() *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateLink()
	})
}

// SetLinks sets the "links" field.
func (u *NewsItemUpsertBulk) SetLinks(v []string) *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetLinks(v)
	})
}

// UpdateLinks sets the "links" field to the value that was provided on create.
func (u *NewsItemUpsertBulk) UpdateLinks() *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateLinks()
	})
}

// SetItemPublishTime sets the "item_publish_time" field.
func (u *NewsItemUpsertBulk) SetItemPublishTime(v time.Time) *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetItemPublishTime(v)
	})
}

// UpdateItemPublishTime sets the "item_publish_time" field to the value that was provided on create.
func (u *NewsItemUpsertBulk) UpdateItemPublishTime() *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateItemPublishTime()
	})
}

// ClearItemPublishTime clears the value of the "item_publish_time" field.
func (u *NewsItemUpsertBulk) ClearItemPublishTime() *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.ClearItemPublishTime()
	})
}

// SetItemUpdateTime sets the "item_update_time" field.
func (u *NewsItemUpsertBulk) SetItemUpdateTime(v time.Time) *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetItemUpdateTime(v)
	})
}

// UpdateItemUpdateTime sets the "item_update_time" field to the value that was provided on create.
func (u *NewsItemUpsertBulk) UpdateItemUpdateTime() *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateItemUpdateTime()
	})
}

// ClearItemUpdateTime clears the value of the "item_update_time" field.
func (u *NewsItemUpsertBulk) ClearItemUpdateTime() *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.ClearItemUpdateTime()
	})
}

// SetImageURL sets the "image_url" field.
func (u *NewsItemUpsertBulk) SetImageURL(v string) *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *NewsItemUpsertBulk) UpdateImageURL() *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateImageURL()
	})
}

// SetImageTitle sets the "image_title" field.
func (u *NewsItemUpsertBulk) SetImageTitle(v string) *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetImageTitle(v)
	})
}

// UpdateImageTitle sets the "image_title" field to the value that was provided on create.
func (u *NewsItemUpsertBulk) UpdateImageTitle() *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateImageTitle()
	})
}

// SetCategories sets the "categories" field.
func (u *NewsItemUpsertBulk) SetCategories(v []string) *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetCategories(v)
	})
}

// UpdateCategories sets the "categories" field to the value that was provided on create.
func (u *NewsItemUpsertBulk) UpdateCategories() *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateCategories()
	})
}

// SetBlur sets the "blur" field.
func (u *NewsItemUpsertBulk) SetBlur(v bool) *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.SetBlur(v)
	})
}

// UpdateBlur sets the "blur" field to the value that was provided on create.
func (u *NewsItemUpsertBulk) UpdateBlur() *NewsItemUpsertBulk {
	return u.Update(func(s *NewsItemUpsert) {
		s.UpdateBlur()
	})
}

// Exec executes the query.
func (u *NewsItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("build: OnConflict was set for builder %d. Set it on the NewsItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("build: missing options for NewsItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NewsItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
