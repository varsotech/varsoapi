// Code generated by ent, DO NOT EDIT.

package rssfeed

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/varsotech/varsoapi/src/services/app/internal/ent/build/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldUpdateTime, v))
}

// RssFeedURL applies equality check predicate on the "rss_feed_url" field. It's identical to RssFeedURLEQ.
func RssFeedURL(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldRssFeedURL, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLTE(FieldUpdateTime, v))
}

// RssFeedURLEQ applies the EQ predicate on the "rss_feed_url" field.
func RssFeedURLEQ(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldRssFeedURL, v))
}

// RssFeedURLNEQ applies the NEQ predicate on the "rss_feed_url" field.
func RssFeedURLNEQ(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNEQ(FieldRssFeedURL, v))
}

// RssFeedURLIn applies the In predicate on the "rss_feed_url" field.
func RssFeedURLIn(vs ...string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIn(FieldRssFeedURL, vs...))
}

// RssFeedURLNotIn applies the NotIn predicate on the "rss_feed_url" field.
func RssFeedURLNotIn(vs ...string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotIn(FieldRssFeedURL, vs...))
}

// RssFeedURLGT applies the GT predicate on the "rss_feed_url" field.
func RssFeedURLGT(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGT(FieldRssFeedURL, v))
}

// RssFeedURLGTE applies the GTE predicate on the "rss_feed_url" field.
func RssFeedURLGTE(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGTE(FieldRssFeedURL, v))
}

// RssFeedURLLT applies the LT predicate on the "rss_feed_url" field.
func RssFeedURLLT(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLT(FieldRssFeedURL, v))
}

// RssFeedURLLTE applies the LTE predicate on the "rss_feed_url" field.
func RssFeedURLLTE(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLTE(FieldRssFeedURL, v))
}

// RssFeedURLContains applies the Contains predicate on the "rss_feed_url" field.
func RssFeedURLContains(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldContains(FieldRssFeedURL, v))
}

// RssFeedURLHasPrefix applies the HasPrefix predicate on the "rss_feed_url" field.
func RssFeedURLHasPrefix(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldHasPrefix(FieldRssFeedURL, v))
}

// RssFeedURLHasSuffix applies the HasSuffix predicate on the "rss_feed_url" field.
func RssFeedURLHasSuffix(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldHasSuffix(FieldRssFeedURL, v))
}

// RssFeedURLEqualFold applies the EqualFold predicate on the "rss_feed_url" field.
func RssFeedURLEqualFold(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEqualFold(FieldRssFeedURL, v))
}

// RssFeedURLContainsFold applies the ContainsFold predicate on the "rss_feed_url" field.
func RssFeedURLContainsFold(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldContainsFold(FieldRssFeedURL, v))
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.RSSFeed {
	return predicate.RSSFeed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.NewsItem) predicate.RSSFeed {
	return predicate.RSSFeed(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.RSSFeed {
	return predicate.RSSFeed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.RSSFeed {
	return predicate.RSSFeed(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RSSFeed) predicate.RSSFeed {
	return predicate.RSSFeed(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RSSFeed) predicate.RSSFeed {
	return predicate.RSSFeed(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RSSFeed) predicate.RSSFeed {
	return predicate.RSSFeed(sql.NotPredicates(p))
}
